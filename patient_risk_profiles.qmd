---
title: "Patient Risk Profiles"
author: "Aditya Dahiya"
editor: visual
subtitle: "Looking at the Jenna Rep's curated data-set of Patient Risk Profiles as a part of #TidyTuesday Week 43 (Oct 23, 2023)"
date: "2023-10-24"
image: "taylor_swift.png"
format:
  html:
    theme: simplex
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  code-fold: true
bibliography: references.bib
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/session_presentations/projects/patient_risk_profiles.html"
  description: "A detailed look at a simulated data set for patient risk factors for various outcomes"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
---

# Loading the libraries and the data-set

```{r}
#| label: setup

library(tidyverse)
library(summarytools)
library(visdat)
library(janitor)
library(snakecase)

patient_risk_profiles <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-10-24/patient_risk_profiles.csv')

```

# Exploratory Data Analysis

The data is completely numerical, and there are no missing values. So it seems good for creating statistical learning models.

```{r}
#| label: fig-eda1
#| fig-cap: "Entire dataframe with vis_dat()"
#| fig-width: 10
#| fig-asp: 1

patient_risk_profiles |> 
  vis_dat() +
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "bottom")
```

The data has mainly these columns:

1.  ID

2.  Age groups

3.  Sex

4.  Many different risk factors as binary variables (0-1)

5.  Risk of many outcomes as decimals (between 0 and 1)

Lets us improve the age groups and sex columns to make them into 1 column each. This will allow us to use age as an ordinal variable; or even the mid-point age in developing models.

## Wrangling

```{r}
# Assign the result of a series of data manipulation operations to the 'prf' variable.

prf <- patient_risk_profiles |> 

  # Select columns: 'personId,' names starting with "age group" and "Sex"
  # select(personId, starts_with("age group"), starts_with("Sex")) |> 
  
  # Reshape the data to long format for columns starting with "age group."
  pivot_longer(cols = starts_with("age group"),
               names_to = "age_group",
               values_to = "age_value",
               names_prefix = "age group:  ") |> 
  
  # Filter out rows where 'age_value' is not equal to 0.
  filter(age_value != 0) |> 
  
  # Reshape the data to long format for columns starting with "Sex."
  pivot_longer(cols = starts_with("Sex"),
               names_to = "gender",
               values_to = "sex_value",
               names_prefix = "Sex = ") |> 
  
  # Filter out rows where 'sex_value' is not equal to 0.
  filter(sex_value != 0) |> 
  
  # Select all columns except 'sex_value' and 'age_value.'
  select(-c(sex_value, age_value)) |> 
  
  # Reorder the columns with 'age_group' and 'gender' after 'personId.'
  relocate(age_group, gender, .after = personId)

# Creating levels of the age group to make it an ordinal variable
levels_age <- prf |> 
  distinct(age_group) |> 
  separate_wider_delim(cols = age_group,
                       delim = " -  ",
                       names = c("age_lower", NA),
                       cols_remove = FALSE) |> 
  mutate(age_lower = parse_number(age_lower)) |> 
  arrange(age_lower) |> 
  pull(age_group)

# Adding levels of factor to age group  
prf <- prf |> 
  mutate(age_group = fct(age_group, levels = levels_age))

# Removing double observations for persons with sex male and female both
gend_rm <- patient_risk_profiles |> 
  filter(`Sex = FEMALE` == 1 & `Sex = MALE` == 1) |> 
  pull(personId)

prf <- prf |> 
  mutate(gender = if_else(personId %in% gend_rm,
                          "MIXED",
                          gender)) |> 
  filter(!duplicated(personId))
```

------------------------------------------------------------------------

## Age Distribution

Let's look at the Age distribution in the simulated data-set: --

```{r}
prf |> 
  ggplot(aes(y = age_group)) +
  geom_bar() +
  theme_classic() +
  labs(title = "Distribution of age groups in the data set",
       y = NULL, x = "Number of persons")
```

No specific pattern found.

------------------------------------------------------------------------

## Outcomes

Now, lets focus on outcomes to visually check correlations amongst them. We can see there are total 14 different outcomes which are "predicted" in this data-set.

\(a\) A `GGally` output showing correlations between outcomes

```{r}
colnames_prf1 <- prf |> 
  select(starts_with("predicted")) |> 
  colnames() |>
  as_tibble() |> 
  mutate(small = str_remove(value, "predicted risk of "),
         smaller = str_sub(small, start = 1, end = 20))

prf1 <- prf |> 
  select(starts_with("predicted"))
colnames(prf1) <- colnames_prf1$smaller

prf1 |>
  GGally::ggpairs()
```

\(b\) An interactive heat-map using `heatmaply` package with a *dendrogram* to classify groups of outcomes: --

```{r}
prf1 |> 
  as_data_frame() |> 
  cor() |> 
  heatmaply::heatmaply_cor()
```

We can see that there are two groups of outcomes, one in bottom-left (very strong correlations) and other small group at top-right (less stronger correlations). Lets keep that in mind as we come to it later.

Lets also try **principal components analysis** to see if there exist groups of outcomes within the 100 simulated patients in terms of their outcomes: --

```{r}
pc1 <- prf1 |> 
  as.matrix() |> 
  prcomp(scale = TRUE)

biplot(pc1, scale = 0)


  
  
```

```{r}
# Computing clusters with K-Means Clustering
#### number of clusters to form #####
n_c = 3                    

kmeans_prf1 <- prf1 |> 
  as.matrix() |> 
  kmeans(centers = n_c,
         nstart = 20)

# Add cluster number to the tibble of outcomes

prf1 <- prf1 |> 
  mutate(
    outcome_cluster = kmeans_prf1$cluster
  )
```

------------------------------------------------------------------------

## Predictors

Listing the predictors present in the data set: there are **64** of them !

```{r}
prf |> 
  select(!starts_with("predicted"), 
         -c(personId, age_group, gender)) |> 
  colnames() |> 
  as_tibble() |> 
  rename(`Predictors in the data-set` = value) |> 
  gt::gt() |> gt::opt_interactive(page_size_default = 5)
```

```{r}
# Selecting the predictors alone
prf2 <- prf |> 
  select(!starts_with("predicted"), 
         -c(personId, age_group, gender))

# Creating a tibble of their full names, small and 
# smaller names
colnames_prf2 <- colnames(prf2) |>
  as_tibble() |> 
  mutate(
    small = value |> 
      str_remove(" in prior year") |> 
      str_remove("Occurrence of ") |>
      str_remove("Antibiotics ") |> 
      str_to_title(),
    
    smaller = value |> 
      str_remove(" in prior year") |> 
      str_remove("Occurrence of ") |>
      str_remove("Antibiotics ") |> 
      str_sub(start = 1, end = 15) |> 
      str_to_title()
  )

# Easy names to display in correlation matrix
colnames(prf2) <- colnames_prf2$smaller

prf2 |> 
  as_data_frame() |> 
  cor() |> 
  heatmaply::heatmaply_cor()
```

As we can see, no specific patterns stand out amongst predictors. A few positive correlations seem to be ones of disease - medicine. For example, Urinary Tract Infections are treated by Spreptogramins. Hence, both appear together.

------------------------------------------------------------------------

## Important Predictors for each outcome

Tyring out **Variable Importance Plots** and **Random Forests** to select best predictors

Planned steps

1.  Find top predictors for each outcome and also save their %IncMSE

2.  Combine predictor importance for each outcome into a final tibble

3.  Create a stacked bar chart for all these predictors

4.  Make it interactive with plotly

### Step 1

```{r}
# Loading random Forest library
library(randomForest)

# Setting a seed for reproducability of results
set.seed(1)

# cleaning out names of all risk factors and outcomes for easy
# construction of formulas in for loops
prftemp <- prf |>
  clean_names()

# An empty tibble to fill in the data
risk_factors <- tibble(
  outcome_variable = NA,
  risk_factors = NA,
  percentage_increase_in_MSE = NA
)

# Repeating the following loop for all outcomes

for (i in 68:81) {
  
  # Finding the i'th outcome variable
  var_num = i
  
  # Name of the outcome - condition
  output_var = names(prftemp)[var_num]
  
  # A vector of all risk factors
  input_var = str_flatten(names(prftemp)[2:67], collapse = " + ")
  
  # Creating a formula to use in Random Forest
  modelformula = formula(paste0(output_var, " ~ ", input_var))
  
  # RandomForest model created
  model <- randomForest(formula = modelformula, 
                        data = prftemp, 
                        importance = TRUE)
  
  # Adding risk factors and their importance to final tibbe to plot
  risk_factors <- bind_rows(
    
    risk_factors,
    
    as_tibble(
    data.frame(risk_factors = rownames(importance(model)), 
               importance(model),
               outcome_variable = output_var)
    ) |> 
    rename(percentage_increase_in_MSE = `X.IncMSE`) |> 
    select(-IncNodePurity) |> 
    relocate(outcome_variable) |> 
    arrange(desc(percentage_increase_in_MSE))
    
  )  
  
}

# Writing a nice caption for the plot
plot_caption <- expression(paste(
  italic("#TidyTuesday"),
  ". Data: Simulated Patient Risk Profiles by Jenna Reps.",
  italic("Graphics: Aditya Dahiya.  "),
  "Analysis of risk factors' importance using Random Forests in R"))
                       

risk_factors |> 
  drop_na() |> 
  mutate(
    outcome_variable = str_remove(outcome_variable,
                                       "predicted_risk_of_"),
    outcome_variable = to_title_case(outcome_variable),
    risk_factors = to_sentence_case(risk_factors),
    outcome_variable = str_remove(outcome_variable, " with"),
    outcome_variable = str_remove(outcome_variable, " Trd")
  ) |> 
  separate_wider_delim(cols = outcome_variable,
                       delim = " No ",
                       names = c("outcome_variable", NA),
                       too_few = "align_start") |> 
  separate_wider_delim(cols = outcome_variable,
                       delim = " or 2 Nd ",
                       names = c("outcome_variable", NA),
                       too_few = "align_start") |>
  filter(percentage_increase_in_MSE > 5) |> 
  group_by(outcome_variable) |> 
  mutate(reorder_var = sum(percentage_increase_in_MSE)) |> 
  ungroup() |> 
  ggplot(aes(y = reorder(outcome_variable, reorder_var),
             x = percentage_increase_in_MSE,
             fill = risk_factors)) +
  geom_bar(stat = "identity",
           position = "stack") +
  labs(x = "Percentage increase in MSE explained by the risk factor",
       y = NULL,
       title = "Age is the most important risk factor associated with 8 out of 13 conditions",
       subtitle = "Each condition has some important associated risk factors, with correlation depicted by the length of the bar below",
       caption = plot_caption,
       fill = NULL) +
  scale_fill_brewer(palette = "Set3") +
  theme_minimal() +
  theme(axis.line = element_blank(),
        axis.ticks.y = element_blank(),
        panel.grid = element_blank(),
        plot.title.position = "plot",
        legend.position = "bottom")
```

Saving the image output

```{r}
ggsave("patient_risk_profiles.png",
         device = "png",
         width = 800,
         height = 600,
         units = "px")
  
magick::image_read("patient_risk_profiles.png")

```
