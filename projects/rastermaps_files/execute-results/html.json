{
  "hash": "fa57ca528b15ead654c0793c00d404c6",
  "result": {
    "markdown": "---\ntitle: \"Drawing Raster Maps with ggplot2: showing Urbanization levels\"\nauthor: \"Aditya Dahiya\"\neditor: visual\nsubtitle: \"Showing Urbanization using Raster images from Copernicus Global Land Service, and tools like ggplot2 and R\"\ncategories:\n  - \"Data Visualization\"\ndate: \"2024-01-21\"\nimage: \"rastermaps.png\"\nformat:\n  html:\n    code-fold: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  error: false\n  message: false\n  warning: false\nbibliography: references.bib\nfilters:\n  - social-share\nshare:\n  permalink: \"https://aditya-dahiya.github.io/session_presentations/projects/rastermaps.html\"\n  description: \"Raster Maps with ggplot2\"\n  twitter: true\n  linkedin: true\n  email: true\n  mastodon: true\n---\n\n\nThis post is inspired from the tutorial [3D map with rayshader and ggplot2 in R](https://www.youtube.com/watch?v=bvlB5yb_uVQ) by [Milos Popovic](https://github.com/milos-agathon). Credits to [this repo](https://github.com/milos-agathon/3d-forest-map-ggplot2/tree/main) for most of the [code](https://github.com/milos-agathon/3d-forest-map-ggplot2/blob/main/R/main.r) shown below.\n\n\n::: {.cell}\n\n:::\n\n\n# Static Map of Urbanization\n\n### Obtaining the map of Haryana (from India's Official Government Map)\n\nSource: Survey of India [Official Maps](https://onlinemaps.surveyofindia.gov.in/Home.aspx)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plotting the plain map of Haryana\nggplot(haryana_borders |> st_simplify(dTolerance = 100)) +\n  geom_sf() +\n  ggthemes::theme_map() +\n  labs(title = \"A Map of Haryana (India) plotted with geom_sf()\") +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![Using sf package to obtain, transform and plot a Map of Haryana (India). The map is plotted with geom_sf()](rastermaps_files/figure-html/fig-haryana1-1.png){#fig-haryana1 width=672}\n:::\n:::\n\n\n### Obtaining Urban Cover Data\n\nCredits for this [data](https://lcviewer.vito.be/download) goes to [Copernicus Global Land Service](https://land.copernicus.eu/global/ \"Home\") which provides bio-geophysical products of global land surface. Using this code we get a raster file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Obtaining the official data from\n# https://lcviewer.vito.be/download\n\n# A fixed initial part of the URL for data\nstart_url <- \"https://s3-eu-west-1.amazonaws.com/vito.landcover.global/v3.0.1/2015/E060N40/E060N40_PROBAV_LC100_global_v3.0.1_\"\n\n# Variable part: Each year\nvar_url <- 2015:2019\n\n# Fixed part of the end of the URL\nend <- \"-nrt_BuiltUp-CoverFraction-layer_EPSG-4326.tif\"\n\nurls <- paste0(start_url, var_url, end)\n\n# For now, focussing only on the final year data, i.e. 2019\nurls <- urls[5]\n\n# for (url in urls) {\n#    download.file(\n#      url, \n#      destfile = basename(url), \n#      mode = \"wb\")\n#}\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n### Getting the data on Urban Cover into R\n\nWe can use the `rast()` fucntion in {`terra`} package to display the urban cover in R. This forms the rough data basis which we will use to later plot the object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurban_cover <- lapply(raster_files, terra::rast)\nurban_cover_mosaic <- urban_cover[[1]]\n\nplot(urban_cover_mosaic)\n```\n\n::: {.cell-output-display}\n![A raw depiction of the raster data on Urban Cover Tile fetched from Copernicus Data](rastermaps_files/figure-html/fig-raster1-1.png){#fig-raster1 width=672}\n:::\n:::\n\n\nNow, we can crop this raster data to the size fo the geometrical object, Haryana, in this case.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_urban_cover_cropped <- function() {\n    # Create a Spatial Vector from haryana borders sf object\n    haryana_borders_vect <- terra::vect(\n        haryana_borders\n    )\n    \n    # Cut out a part of a Spatial Raster\n    urban_cover_cropped <- terra::crop(\n        urban_cover_mosaic, haryana_borders_vect,\n        snap = \"in\", mask = T\n    )\n\n    return(urban_cover_cropped)\n}\n\n# Lower Resolution to save space\nurban_cover_cropped <- get_urban_cover_cropped() |>\n    terra::aggregate(fact = 5) \n\nplot(urban_cover_cropped)\n```\n\n::: {.cell-output-display}\n![The same raster image as above, now cropped according to the boundaries of Haryana](rastermaps_files/figure-html/fig-raster2-1.png){#fig-raster2 width=672}\n:::\n:::\n\n\nLastly, we convert this raster data into a tibble, so that we can use it with ggplot2 and change it as we wish later on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurban_cover_df <- urban_cover_cropped |>\n    as.data.frame(xy = T) |> \n    as_tibble()\n\nnames(urban_cover_df)[3] <- \"percent_cover\"\n```\n:::\n\n\n### Plotting the Urbanization Map of Haryana with ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load fonts\nfont_add_google(\"Days One\", \n                family = \"title_font\")       # Font for titles\nfont_add_google(\"Saira Extra Condensed\", \n                family = \"caption_font\")     # Font for the caption\nfont_add_google(\"Strait\", \n                family = \"body_font\")        # Font for plot text\nshowtext_auto()\n\n# Define Text Size\nts = unit(20, units = \"cm\")                             # Text Size\n\n# Caption stuff\nsysfonts::font_add(family = \"Font Awesome 6 Brands\",\n                   regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\"))\ngithub <- \"&#xf09b\"\ngithub_username <- \"aditya-dahiya\"\nxtwitter <- \"&#xe61b\"\nxtwitter_username <- \"@adityadahiyaias\"\nlinkedin <- \"&#xf08c\"\nlinkedin_username <- \"dr-aditya-dahiya-ias\"\nsocial_caption <- glue::glue(\"<span style='font-family:\\\"Font Awesome 6 Brands\\\";'>{github};</span> <span style='color: {text_col}'>{github_username}  </span> <span style='font-family:\\\"Font Awesome 6 Brands\\\";'>{xtwitter};</span> <span style='color: {text_col}'>{xtwitter_username}</span> <span style='font-family:\\\"Font Awesome 6 Brands\\\";'>{linkedin};</span> <span style='color: {text_col}'>{linkedin_username}</span>\")\n\n# Add text to plot--------------------------------------------------------------\nplot_title <- \"Urbanization in Haryana (2019)\"\n\nplot_caption <- paste0(\"**Data:** Copernicus Global Land Service | \", \"**Graphics:** \", social_caption)\n\ntext_col = \"#631b00\"\nbg_col = \"white\"\n\np <- ggplot(urban_cover_df) +\n    geom_raster(aes(\n      x = x, \n      y = y, \n      fill = percent_cover\n      )) +\n    geom_sf(\n      data = haryana_borders,\n      fill = \"transparent\", \n      color = \"black\", \n      size = 1) +\n    paletteer::scale_fill_paletteer_c(\"grDevices::OrRd\",\n                                      direction = -1) +\n    guides(\n        fill = guide_legend(\n            title = \"Urbanized Area (%)\",\n            direction = \"horizontal\",\n            title.position = \"top\",\n            label.position = \"bottom\",\n            nrow = 1,\n            byrow = T\n        )\n    ) +\n    labs(\n      title = plot_title,\n      caption = plot_caption\n    ) +\n    ggthemes::theme_map() +\n    theme(\n      legend.position = c(0, 0.1),\n      legend.key.width = unit(15, \"mm\"),\n      plot.caption =  element_textbox(family = \"caption_font\",\n                                  hjust = 0.5,\n                                  colour = text_col,\n                                  size = 1.5 * ts),\n      plot.title   =     element_text(hjust = 0.5,\n                                  size = 6 * ts,\n                                  family = \"title_font\",\n                                  face = \"bold\",\n                                  colour = text_col,\n                                  margin = margin(0,0,0,0)),\n      plot.background =  element_rect(fill = bg_col,\n                                  color = bg_col,\n                                  linewidth = 0),\n    plot.title.position = \"plot\",\n    legend.text = element_text(size = 2 * ts,\n                             family = \"body_font\",\n                             colour = text_col,\n                             margin = margin(0,0,0,0),\n                             hjust = 0.5),\n    legend.key = element_rect(fill = bg_col,\n                            colour = bg_col),\n    legend.background = element_rect(fill = bg_col),\n    legend.title = element_text(family = \"title_font\",\n                                colour = text_col,\n                                hjust = 0.5,\n                                size = 45)\n)\n    \n\n\n\nggsave(\n  plot = p,\n  filename = here(\"projects\", \"rastermaps.png\"),\n  height = unit(10, \"cm\"),\n  width = unit(10, \"cm\"),\n  bg = \"white\"\n)\n```\n:::\n\n\n![Final Plot of Urbanization in Haryana (2019)](rastermaps.png)\n\n# Change in Urbanization over Time\n\nFor this, we focus on UAE to see changes over time from 2015 to 2019. Unfortunately, the current data does not change over time, thus, there is no perceptible difference. But the code works!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\n\n# Setting the CRS for projections in all following data\ncrsLONGLAT <- \"+proj=longlat +datum=WGS84 +no_defs\"\n\n\nggn_borders <- st_read(here(\"data\", \n                            \"uae\", \n                            \"are_admbnda_adm1_fcsc_20230515.shp\")) |> \n  select(geometry) |>\n  st_transform(crsLONGLAT)\n\nraster_files <- list.files(\n    path = here(\"data\", \"uae\"),\n    pattern = \"BuiltUp-CoverFraction-layer_EPSG-4326.tif\",\n    full.names = T\n)\n\nurban_cover <- lapply(raster_files, terra::rast)\n\n\nget_urban_cover_cropped <- function(image) {\n    ggn_borders_vect <- terra::vect(\n        ggn_borders\n    )\n    urban_cover_cropped <- terra::crop(\n        image, ggn_borders_vect,\n        snap = \"in\", mask = T\n    )\n\n    return(urban_cover_cropped)\n}\n\nfact_res <- 5\n\n# Save image for each year from 2015 to 2019\nurban2015 <- get_urban_cover_cropped(urban_cover[[1]]) |> \n  terra::aggregate(fact = fact_res) \nurban2016 <- get_urban_cover_cropped(urban_cover[[2]]) |> \n  terra::aggregate(fact = fact_res) \nurban2017 <- get_urban_cover_cropped(urban_cover[[3]]) |> \n  terra::aggregate(fact = fact_res) \nurban2018 <- get_urban_cover_cropped(urban_cover[[4]]) |> \n  terra::aggregate(fact = fact_res) \nurban2019 <- get_urban_cover_cropped(urban_cover[[5]]) |> \n  terra::aggregate(fact = fact_res) \n\nmake_img_df <- function(image, year_coded){\n  temp <- image |> \n    as.data.frame(xy = T) |> \n    as_tibble()\n  \n  names(temp)[3] <- \"percent_cover\"\n  \n  temp <- temp |> \n    mutate(year = year_coded)\n  \n  return(temp)\n}\n\nurban_cover_df <- bind_rows(\n  make_img_df(urban2015, 2015),\n  make_img_df(urban2015, 2016),\n  make_img_df(urban2015, 2017),\n  make_img_df(urban2015, 2018),\n  make_img_df(urban2015, 2019)\n)\n  \ng <- ggplot(urban_cover_df) +\n    geom_tile(aes(\n      x = x, \n      y = y, \n      fill = percent_cover\n      )) +\n    geom_sf(\n      data = ggn_borders,\n      fill = \"transparent\", \n      color = \"black\", \n      size = 1) +\n    paletteer::scale_fill_paletteer_c(\"grDevices::OrRd\",\n                                      direction = -1) +\n    guides(\n        fill = guide_legend(\n            title = \"Urbanized Area (%)\",\n            direction = \"horizontal\",\n            title.position = \"top\",\n            label.position = \"bottom\",\n            nrow = 1,\n            byrow = T\n        )\n    ) +\n    labs(\n      title = \"Urbanization in U.A.E. during {closest_state}\"\n    ) +\n    ggthemes::theme_map() +\n    theme(\n      plot.title = element_text(hjust = 0.5,\n                                face = \"bold\",\n                                size = 18)\n    ) +\n    transition_states(states = factor(year)) +\n    enter_fade() +\n    exit_fade()\n\nanim_save(\n  animation = g,\n  filename = here(\"docs\", \"uae_urban.gif\"),\n  nframes = 20,\n  duration = 10\n)\n```\n:::\n\n\n![](/docs/uae_urban.gif)\n",
    "supporting": [
      "rastermaps_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}