---
title: "Data Visualizations from D.I.P."
author: "Aditya Dahiya"
editor: visual
subtitle: "Examples of Visualizations created from the Data Is Plural Newsletter by Jeremy Singer-Vine"
categories:
  - "Data Is Plural"
  - "Data Visualization"
date: "last-modified"
image: "dip_uselections.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
bibliography: references.bib
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/session_presentations/projects/dip_viz.html"
  description: "#TidyTuesday"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
---

Welcome to this webpage showcasing visualizations created using [ggplot2](https://ggplot2-book.org/index.html), [tidyverse](https://www.tidyverse.org/), and **`R`** programming language, utilizing publicly available datasets from the weekly newsletter [***Data Is Plural***](https://www.data-is-plural.com/) by [Jeremy Singer-Vine](https://www.jsvine.com/). Here, you'll find open-source code detailing every step, from data acquisition to final rendering, with collapsible sections and annotations tailored to assist those new to `ggplot2` and `tidyverse`. Feel free to explore the visualizations and delve into the code.

Your feedback is greatly appreciated and can be shared at my [Twitter](https://twitter.com/AdityaDahiyaIAS)[,](https://twitter.com/AdityaDahiyaIAS,) where these visualizations are periodically posted. Alternatively, you can click on the link provided for "Edit this page" or submit suggestions or pull requests on [Github](https://github.com/Aditya-Dahiya/projects_presentations).

## D.I.P 2016.09.28: County-level and precinct-level results.

@fig-1 shows data collected by OpenElections, supported by the Knight Foundation - a comprehensive and standardized election dataset for the United States on County-level elections results from 1990-2020.

```{r}
#| eval: false

# Library Load-in-----------------------------------------------------------
library(tidyverse)      # Load the tidyverse package for data wrangling and plotting
library(here)           # Load the here package for managing file locations
library(showtext)       # Load showtext for easier font usage in R graphs
library(fontawesome)    # Load fontawesome for social media icons
library(ggtext)         # Load ggtext for Markdown text in ggplot2
library(ggstream)       # Load ggstream to use geom_stream()
library(colorspace)     # Load colorspace to manipulate colors
library(summarytools)   # Load summarytools to view summary information

# Data Load-in-------------------------------------------------------------
# Load the dataset either from a local file or a URL
# uselections <- read_csv(here("data", "ledb_candidatelevel.csv"))

url <- "https://osf.io/download/tbwzd/"
uselections <- read_csv(url)


# Exploratory Data Analysis--------------------------------------------------

uselections  # Display the contents of the 'uselections' dataset
dfSummary(uselections) |>  # Pipe the summary of 'uselections' dataset into 'view()' function for viewing in a nicer format
  view()


# Data Wrangling------------------------------------------------------------

# Perform data wrangling operations on the 'uselections' dataset
racedf <- uselections |> 
  mutate(party = case_when(
    prob_democrat > 0.5 ~ "Democrat",
    prob_republican > 0.5 ~ "Republican",
    .default = "Others"
  )) |> 
  mutate(
    race_est = case_when(
      is.na(race_est) ~ "other",
      .default = race_est
    )
  ) |> 
  group_by(year, party, race_est) |> 
  count() |> 
  mutate(race_est = str_to_title(race_est)) |> 
  ungroup() |> 
  group_by(year) |> 
  mutate(prop = n / sum(n)) |> 
  mutate(party = fct(
    party, 
    levels = c("Republican", "Democrat", "Others")
  ),
  race_est = fct(
    race_est,
    levels = c("Caucasian", "Black", "Hispanic", 
               "Asian", "Other")
  )
  )

# Options & Visualization Parameters----------------------------------

# Load fonts for the plot
font_add_google("Fira Sans Extra Condensed", 
                family = "title_font")       # Add Fira Sans Extra Condensed font for titles
font_add_google("Saira Extra Condensed", 
                family = "caption_font")     # Add Saira Extra Condensed font for captions
font_add_google("Anaheim", 
                family = "body_font")        # Add Anaheim font for plot text
showtext_auto()  # Automatically enable showtext functionality

# Define icons for use in the graph

# Define colors
bg_col <- "white"                   # Define the background color
text_col <- "#655A5AFF"             # Define the color for the text
text_hil <- "#655A5AFF"             # Define the color for highlighted text

# Define colors for stream graph
fill_cols <- paletteer::paletteer_d("fishualize::Anchoviella_lepidentostole",
                                    direction = -1) |> 
  colorspace::lighten(0.2)

col_cols <- paletteer::paletteer_d("fishualize::Anchoviella_lepidentostole",
                                   direction = -1) |> 
  colorspace::darken(0.4)

# Define text size
ts = unit(20, units = "cm")                             # Define the text size

# Define caption text and social media icons
sysfonts::font_add(family = "Font Awesome 6 Brands",
                   regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf"))
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_col}'>{github_username}  </span>")
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_col}'>{xtwitter_username}</span>")

# Define plot title, subtitle, and caption
plot_title <- "Ethnicity of candidates in USA's local elections."
subtitle_text <- "Percentage of candidates from different ethnicities fielded by the two dominant political parties in USA over last 20 years in local elections for posts of Prosecutor, Sheriff, County Executive, Mayor, School Board, County Legislature and City Council. As we can see, the share of non-Caucasian races has increased, but at different rates in different parties."
plot_subtitle <- paste(strwrap(subtitle_text, 100), collapse = "\n")

plot_caption <- paste0(
  "**Data**: Justin de Benedictis-Kessner et al. **|** ", 
  "**Graphics**:",
  social_caption_1, 
  " **|** ",
  "**Code:**", 
  social_caption_2
)

# Data Visualization----------------------------------------------------------

# Create the main plot 'g' using ggplot with aesthetics defined
g <- racedf |> 
  ggplot(mapping = aes(
    x = year,
    y = prop,
    fill = race_est,
    label = race_est,
    color = race_est
  )) +

  # Add the stream geom to represent the data
  geom_stream(
    type = "proportional",
    alpha = 0.3) +

  # Add labels to the stream geom
  geom_stream_label(
    type = "proportional",
    hjust = "inward",
    size = 0.7 * ts,
    family = "body_font"
  ) +

  # Add facets to split the data by 'party'
  facet_wrap(~ party, nrow = 1) +

  # Adjust the x-axis scale
  scale_x_continuous(
    expand = expansion(0),
    breaks = seq(1990, 2020, 5)
  ) +

  # Adjust the y-axis scale
  scale_y_continuous(
    expand = expansion(0),
    labels = scales::label_percent()
  ) +

  # Manually set color values for aesthetics
  scale_color_manual(values = col_cols) +

  # Manually set fill values for aesthetics
  scale_fill_manual(values = fill_cols) +

  # Add plot titles, subtitle, and caption
  labs(
    title = plot_title,
    subtitle = plot_subtitle,
    caption = plot_caption,
    x = NULL,
    y = "Percentage of candidates fielded by the Party"
  ) +

  # Apply minimal theme to the plot
  theme_minimal() +

  # Customize theme elements
  theme(
    legend.position = "none",
    panel.grid.major.y = element_line(
      linetype = 2
    ),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    plot.caption =  element_textbox(family = "caption_font",
                                    hjust = 0.5,
                                    colour = text_col,
                                    size = 1.5 * ts,
                                    margin = margin(1,0,0,0,
                                                    unit = "cm")),
    plot.title   =     element_text(hjust = 0.5,
                                    size = 6 * ts,
                                    family = "title_font",
                                    face = "bold",
                                    colour = text_hil,
                                    margin = margin(2,0,0.5,0,
                                                    unit = "cm")),
    plot.subtitle    = element_text(hjust = 0.5,
                                    size = 3 * ts,
                                    family = "body_font",
                                    colour = text_col,
                                    margin = margin(5,0,2,0),
                                    lineheight = 0.35),
    plot.background =  element_rect(fill = bg_col,
                                    color = bg_col,
                                    linewidth = 0),
    axis.text.y = element_text(size = 2.5 * ts,
                             family = "title_font",
                             colour = text_col,
                             face = "bold",
                             margin = margin(0,0,0,0)),
    axis.text.x = element_text(size = 1.5 * ts,
                               family = "body_font",
                               colour = text_col,
                               face = "bold",
                               margin = margin(0,0,0,0)),
    axis.title = element_text(size = 3 * ts,
                              family = "body_font",
                              colour = text_col,
                              face = "bold",
                              margin = margin(0,0,0,0)),
    strip.text = element_text(hjust = 0.5,
                              family = "title_font",
                              face = "bold",
                              colour = text_col,
                              size = 5 * ts,
                              margin = margin(1,0,0,0,
                                              unit = "cm")),
    plot.title.position = "plot"
)


# Image Saving----------------------------------------------------------------

# Save the plot as an image file
ggsave(
  filename = here::here("docs", "dip_uselections.png"),
  plot = g,
  width = 30, 
  height = 30, 
  units = "cm",
  bg = bg_col
)
```

![Share of different ethnicities amongst the candidates fielded by the major USA political parties in local elections.](dip_uselections.png){#fig-1}

## D.I.P. 2024.01.31: Military surplus

Visualizing the CRS Report for Congress: Excess Defense Articles: Grants and Sales to Allies and Friendly Countries in @fig-2

```{r}
#| eval: false
#| code-fold: true

# ==============================================================================#
# Library Load-in---------------------------------------------------------------
# ==============================================================================#
library(tidyverse)
library(openxlsx)
library(janitor)
library(rnaturalearth)
library(ggthemes)
library(scales)
library(sf)
library(patchwork)
library(fontawesome)
library(ggtext)
library(showtext)


# ==============================================================================#
# Data Load-in------------------------------------------------------------------
# ==============================================================================#
usdef <- openxlsx::read.xlsx("https://www.dsca.mil/sites/default/files/EDA_Public_Report_2020-06-15.xlsx") |>
  as_tibble()


# ==============================================================================#
# Data Wrangling----------------------------------------------------------------
# ==============================================================================#

df <- usdef |>
  clean_names() |>
  select(
    fiscal_year_of_request,
    country_transfer_to,
    total_delivered_qty,
    total_current_value
  ) |>
  mutate(total_delivered_qty = as.numeric(total_delivered_qty)) |>
  filter(!is.na(total_delivered_qty)) |>
  filter(total_delivered_qty >= 1)

countries <- df |>
  group_by(country_transfer_to) |>
  summarise(total_current_value = sum(total_current_value)) |>
  arrange(desc(total_current_value))

select_con <- countries |>
  slice_head(n = 10) |>
  pull(country_transfer_to)

df1 <- df |>
  mutate(country = if_else(
    country_transfer_to %in% select_con,
    country_transfer_to,
    "Others"
  )) |>
  group_by(fiscal_year_of_request, country) |>
  summarize(total = sum(total_current_value))


df2 <- usdef |>
  clean_names() |>
  select(-c(
    transfer_authority, implementing_agency, item_description, status, status_date,
    qty_accepted, qty_allocated, qty_rejected, total_acquisition_value
  )) |>
  mutate(total_delivered_qty = as.numeric(total_delivered_qty)) |>
  mutate(total_delivered_qty = if_else(
    (is.na(total_delivered_qty) | total_delivered_qty == 0),
    0,
    total_delivered_qty
  )) |>
  mutate(total_current_value = if_else(
    total_delivered_qty == 0,
    1,
    total_current_value
  )) |>
  rename(
    year = fiscal_year_of_request,
    country = country_transfer_to
  ) |>
  group_by(country) |>
  summarise(total_value = sum(total_current_value))


mapdf <- ne_countries(
  type = "countries",
  continent = c(
    "asia", "africa", "europe", "oceania",
    "north america", "south america"
  ),
  returnclass = "sf",
  scale = "large"
) |>
  st_transform(crs = st_crs("ESRI:54030")) |>
  mutate(country = admin)


# =============================================================================#
# Additional Data Wrangling-----------------------------------------------------
# =============================================================================#
library(tidytext)

add_stop_words <- tibble(
  word = c(
    "AND", "EQUIPMENT", "CARGO",
    "UTILITY", "TON", "5T", "CTG",
    "1", "4", "W", "SUPPLIES", "COMPONENTS",
    "CAL", "EQUIP", "T", "50", "PARTS", "2.5T",
    "MRAP", "SUPPORT", "2"
  )
)

articles <- usdef |>
  clean_names() |>
  select(item_description) |>
  unnest_tokens(
    output = "word",
    input = item_description,
    to_lower = FALSE
  ) |>
  anti_join(stop_words) |>
  anti_join(add_stop_words) |>
  count(word, sort = TRUE)

imp_art <- articles |>
  slice_max(order_by = n, n = 7) |>
  pull(word)

# Preparing graphs for the top 7 articles of sale
plot_item <- function(i) {
  pattern1 <- c(
    imp_art[i],
    imp_art[i] |> str_to_lower(),
    imp_art[i] |> str_to_title()
  )
  temp <- usdef |>
    clean_names() |>
    filter(
      str_detect(
        string = item_description,
        pattern = paste0(pattern1, collapse = " | ")
      )
    )
  tg1 <- temp |>
    filter(total_delivered_qty > 0) |>
    group_by(country_transfer_to) |>
    summarise(
      total = sum(total_acquisition_value)
    ) |>
    arrange(desc(total)) |>
    slice_max(order_by = total, n = 5) |>
    ggplot(aes(
      x = total,
      y = reorder(
        country_transfer_to,
        total
      )
    )) +
    geom_col(
      fill = text_col,
      col = "black",
      linewidth = 0.1
    ) +
    labs(
      x = NULL,
      y = NULL,
      title = imp_art[i]
    ) +
    theme_minimal() +
    theme(
      axis.ticks.y = element_blank(),
      legend.position = "none",
      plot.margin = margin(0, 0, 0, 0),
      plot.title = element_text(
        hjust = 0,
        size = 3 * ts,
        family = "body_font",
        colour = text_hil,
        margin = margin(0.2, 0, 0, 0,
          unit = "cm"
        )
      ),
      axis.text.x = element_text(
        family = "body_font",
        size = 2 * ts,
        color = text_col,
        hjust = 0
      ),
      axis.ticks.x = element_line(),
      axis.text.y = element_text(
        vjust = 0.5,
        hjust = 1,
        family = "caption_font",
        size = 2.5 * ts,
        color = text_col
      ),
      panel.grid.minor.x = element_blank(),
      panel.grid.major.x = element_line(
        linetype = 2,
        linewidth = 0.1,
        color = text_hil
      ),
      panel.grid.major.y = element_blank(),
      panel.grid.minor.y = element_blank()
    )
  return(tg1)
}

# =============================================================================#
# Options & Visualization Parameters--------------------------------------------
# =============================================================================#

# Load fonts
font_add_google("Gotu",
  family = "title_font"
) # Font for titles
font_add_google("Saira Extra Condensed",
  family = "caption_font"
) # Font for the caption
font_add_google("Abel",
  family = "body_font"
) # Font for plot text
showtext_auto()

# Define colours
bg_col <- "#fff1d4" # Background Colour
text_col <- "#753501" # Colour for the text
text_hil <- "#b85200" # Colour for highlighted text

# Define Text Size
ts <- unit(10, units = "cm") # Text Size

# Caption stuff
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_col}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_col}'>{xtwitter_username}</span>")

# Add text to plot--------------------------------------------------------------
plot_title <- "USA's Excess Defense Articles' global sales"
plot_caption <- paste0("**Data:** CRS Report for Congress. Excess Defense Articles: Grants and Sales to Allies and Friendly Countries", " | ", " **Code:** ", social_caption_1, " | ", " **Graphics:** ", social_caption_2)
subtitle_text <- "This map visualizes the distribution of U.S. Excess Defense Articles (EDA) sales at reduced prices to allied and friendly nations. Highlighting top recipients like Israel, Morocco, and the UAE, the graph illustrates the strategic allocation of military equipment to support modernization efforts, peacekeeping missions, and counter-narcotics operations worldwide."
plot_subtitle <- str_wrap(subtitle_text, width = 170)

# ==============================================================================#
# Data Visualization------------------------------------------------------------
# ==============================================================================#

# Combining the World Map data and Sales Data-----------------------------------

g1 <- mapdf |>
  left_join(
    df2,
    by = join_by(country == country)
  ) |>
  ggplot(aes(
    fill = total_value
  )) +
  geom_sf(linewidth = 0.1) +
  paletteer::scale_fill_paletteer_c(
    "ggthemes::Orange",
    na.value = "white",
    trans = "log10",
    labels = scales::label_number(
      prefix = "$",
      scale_cut = cut_short_scale()
    ),
    name = "Total Value of items sold (2010-2019)"
  ) +
  guides(
    fill = guide_colorbar(
      title = "Total Value of items sold (2010-2019)",
      title.position = "top",
      title.theme = element_blank(),
      label.theme = element_text(
        family = "body_font",
        colour = text_col,
        size = 3 * ts,
        margin = margin(0, 0, 0, 0)
      ),
      title.hjust = 0.5,
      barwidth = unit(7, "cm"),
      barheight = unit(0.3, "cm"),
      direction = "horizontal",
      frame.colour = bg_col
    )
  ) +
  labs(
    title = plot_title,
    subtitle = plot_subtitle,
    caption = plot_caption
  ) +
  theme_map() +
  theme(legend.position = c(0.45, 0.01)) +
  theme(
    plot.caption = element_textbox(
      family = "caption_font",
      hjust = 0.5,
      colour = text_col,
      size = 3 * ts,
      margin = margin(0.4, 0, 0, 0.5,
        unit = "cm"
      )
    ),
    plot.title = element_text(
      hjust = 0.5,
      size = 11 * ts,
      family = "title_font",
      face = "bold",
      colour = text_hil,
      margin = margin(0, 0, 0.5, 0,
        unit = "cm"
      )
    ),
    plot.subtitle = element_text(
      hjust = 0.5,
      size = 4 * ts,
      family = "body_font",
      colour = text_col,
      margin = margin(0, 0, 0, 0,
        unit = "cm"
      ),
      lineheight = 0.35
    ),
    plot.background = element_rect(
      fill = bg_col,
      color = bg_col,
      linewidth = 0
    ),
    plot.margin = margin(0, 0, 0, 0),
    legend.background = element_rect(
      fill = "transparent",
      color = "transparent"
    ),
    panel.background = element_rect(
      fill = "transparent",
      colour = "transparent"
    )
  )


g2 <- countries |>
  slice_max(order_by = total_current_value, n = 10) |>
  mutate(country_transfer_to = if_else(
    country_transfer_to == "United Arab Emirates",
    "UAE",
    country_transfer_to
  )) |>
  ggplot(aes(
    x = total_current_value,
    y = reorder(
      country_transfer_to,
      total_current_value
    )
    )) +
  geom_col(
    col = "black",
    linewidth = 0.1,
    fill = text_col
  ) +
  scale_x_reverse(
    expand = expansion(0, 0),
    labels = label_number(
      prefix = "$",
      scale_cut = cut_short_scale(),
    ),
    position = "top"
  ) +
  scale_y_discrete(
    position = "right"
  ) +
  labs(title = "TOTAL SALES", 
       x = NULL, y = NULL) +
  theme_minimal() +
  theme(
    axis.ticks.y = element_blank(),
    legend.position = "none",
    plot.margin = margin(0, 0, 0, 0),
    plot.title = element_text(
      hjust = 1,
      size = 5 * ts,
      family = "body_font",
      colour = text_hil,
      margin = margin(0, 0, 0, 0,
                      unit = "cm"
      )
    ),
    axis.text.x = element_text(
      family = "body_font",
      size = 2 * ts,
      color = text_col,
      hjust = 0.5
    ),
    axis.ticks.x = element_line(),
    axis.text.y = element_text(
      vjust = 0.5,
      hjust = 1,
      family = "caption_font",
      size = 2.5 * ts,
      color = text_col
    ),
    panel.grid = element_blank()
  )


g3 <- plot_item(6) +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
  ) +
  scale_x_continuous(
    expand = expansion(0),
    labels = label_number(
      prefix = "$",
      scale_cut = cut_short_scale()
    ),
    limits = c(0, 3e8),
    breaks = c(0, 1e8)
  ) 
g4 <- plot_item(7) +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
  ) +
  scale_x_continuous(
    expand = expansion(0),
    labels = label_number(
      prefix = "$",
      scale_cut = cut_short_scale()
    ),
    limits = c(0, 3e8),
    breaks = c(0, 1e8)
  ) 
g5 <- plot_item(1) + 
  theme(
    axis.text.x = element_blank(), 
    axis.ticks.x = element_blank()
  ) +
  scale_x_continuous(
    expand = expansion(0),
    labels = label_number(
      prefix = "$",
      scale_cut = cut_short_scale()
    ),
    limits = c(0, 3e8),
    breaks = c(0, 1e8, 2e8)
  ) 
g6 <- plot_item(2) +
  scale_x_continuous(
    expand = expansion(0),
    labels = label_number(
      prefix = "$",
      scale_cut = cut_short_scale()
    ),
    limits = c(0, 3e8)
  ) 

g7 <- g3 + g4 + g5 + g6 +
  plot_layout(ncol = 1)

g <- g1 +
  patchwork::inset_element(
    g7,
    top = 0.95,
    left = 0,
    right = 0.3,
    bottom = 0,
    on_top = TRUE
  ) +
  patchwork::inset_element(
    g2,
    top = 0.95,
    bottom = 0.2,
    right = 1,
    left = 0.86,
    on_top = TRUE
  ) +
  plot_annotation(
    theme = theme(
      plot.background = element_rect(
        colour = bg_col,
        fill = bg_col
      )
    )
  )

# =============================================================================#
# Image Saving-----------------------------------------------------------------
# =============================================================================#


ggsave(
  filename = here::here("docs", "dip_us_arms_export.png"),
  plot = g,
  width = 30,
  height = 18,
  units = "cm",
  bg = bg_col
)

```

![This world map visualizes the distribution of U.S. Excess Defense Articles (EDA) sales at reduced prices to allied and friendly nations. Highlighting top recipients like Israel, Morocco, and the UAE, the graph illustrates the strategic allocation of military equipment to support modernization efforts, peacekeeping missions, and counter-narcotics operations worldwide.](/docs/dip_us_arms_export.png){#fig-2}

## D.I.P. 2024.02.21: Self-driving stats.

A graphical analysis of Autonomous Vehicles’ (AV) [Testing Data](https://www.dmv.ca.gov/portal/vehicle-industry-services/autonomous-vehicles/) (released by the State of California's [Department of Motor Vehicles](https://www.dmv.ca.gov/portal/)) in @fig-3 reveals the performance of various AV Manufacturers.

```{r}
#| eval: false

# =============================================================================#
# About the Dataset-------------------------------------------------------------
# =============================================================================#

# Credit: State of California, Department of Motor Vehicles
# https://www.dmv.ca.gov/portal/
# https://twitter.com/ca_dmv
# @CA_DMV

# To test or deploy self-driving cars on California's public roads, companies 
# must obtain a permit from the state DMV's Autonomous Vehicles Program. As part 
# of the permit requirements, these companies are obliged to submit yearly 
# reports detailing the frequency of instances where their vehicles exited 
# autonomous mode during tests. This includes cases resulting from technology 
# failures or situations demanding manual intervention by the test driver/
# operator for safety reasons. These disengagement reports include information 
# such as the company name, permit number, VIN, monthly mileage, and annual
#  disengagements for each vehicle, even if there were none. 
#  
#  Additionally, for each disengagement, the reports provide details such as the 
#  vehicle involved, date of occurrence, initiator of the disengagement (whether 
#  it was the vehicle itself, the test driver, remote operator, or passenger),
#  type of location, and a brief summary of the event.

# Source: https://www.dmv.ca.gov/portal/vehicle-industry-services/autonomous-vehicles/disengagement-reports/

# DISENGAGEMENT REPORTS
# Autonomous vehicle makers participating in the Autonomous Vehicle Tester (AVT) 
# Program and AVT Driverless Program must annually submit reports detailing the 
# frequency of instances where their vehicles exited autonomous mode during 
# testing. This encompasses occurrences triggered by technological malfunctions 
# or scenarios necessitating manual intervention by the test driver/operator for 
# safe operation.


# 2023 Disengagement Reports

# 2023 Autonomous Vehicle Disengagement Reports (CSV)
url1 <- "https://www.dmv.ca.gov/portal/file/2023-autonomous-vehicle-disengagement-reports-csv/"

# 2023 Autonomous Mileage Reports (CSV)
url2 <- "https://www.dmv.ca.gov/portal/file/2023-autonomous-mileage-reports-csv/"

# 2022-23 Autonomous Vehicle Disengagement Reports (CSV)(first-time filers)
# url3 <- "https://www.dmv.ca.gov/portal/file/2022-23-autonomous-vehicle-disengagement-reports-csvfirst-time-filers/"

# 2022-23 Autonomous Mileage Reports (CSV)(first-time filers)
# url4 <- "https://www.dmv.ca.gov/portal/file/2022-23-autonomous-mileage-reports-csvfirst-time-filers/"

# 2023 Autonomous Vehicle Disengagement Reports (CSV)(driverless)
# url5 <- "https://www.dmv.ca.gov/portal/file/2023-autonomous-vehicle-disengagement-reports-csvdriverless/"

# 2023 Autonomous Mileage Reports (CSV)(driverless)
# url6 <- "https://www.dmv.ca.gov/portal/file/2023-autonomous-mileage-reports-csvdriverless/"


# =============================================================================#
# Library Load-in---------------------------------------------------------------
# =============================================================================#
# Data Wrangling Tools
library(tidyverse)
library(janitor)

# Final plot (ggplot2) tools
library(scales)
library(fontawesome)
library(ggtext)
library(showtext)
library(patchwork)
library(ggimage)
library(ggfittext)
library(colorspace)


# ==============================================================================#
# Data Load-in------------------------------------------------------------------
# ==============================================================================#
# {1} 2023 Autonomous Vehicle Disengagement Reports (CSV)
df1 <- read_csv(url1) |> remove_empty()

# {2} 2023 Autonomous Mileage Reports (CSV)
df2 <- read_csv(url2) |> remove_empty()

# ==============================================================================#
# Data Wrangling----------------------------------------------------------------
# ==============================================================================#
# {1} 2023 Autonomous Vehicle Disengagement Reports (CSV)
# Store full names of Variables
cn_df1 <- names(df1)
# short names
names(df1) <- c("manufacturer",
                "permit_number",
                "date",
                "vin",
                "driver_need",
                "driver",
                "disengagement_initiate",
                "disengagement_location",
                "description")

# Number of disengagements by AV vs. Test Driver for each manufacturer
plot1df1 <- df1 |> 
  mutate(disengagement_initiate = if_else(
    str_detect(disengagement_initiate, "AV"),
    "AV System",
    "Test Driver")) |> 
  group_by(manufacturer) |> 
  count(disengagement_initiate) |> 
  # A minor nomenculature change to match data in all plots
  mutate(manufacturer = if_else(
    manufacturer == "Nissan North America",
    "Nissan",
    manufacturer
  ))

# Top 14 descriptions of reasons for disengagements
sum_desc <- df1 |> 
  mutate(
    description = fct(description),
    description = fct_lump_n(description, n = 13)
  ) |> 
  count(description, sort = TRUE) |> 
  pull(description)

# Number of disengagements by reason for each manufacturer
plot2df1 <- df1 |> 
  # A minor nomenculature change to match data in all plots
  mutate(manufacturer = if_else(
    manufacturer == "Nissan North America",
    "Nissan",
    manufacturer
  )) |> 
  mutate(
    short_description = case_when(
      description == sum_desc[1] ~ "Wrongly predicted road user behavior",
      description == sum_desc[2] ~ "Other Reasons",
      description == sum_desc[3] ~ "Hardware issues",
      description == sum_desc[4] ~ "Software issues",
      description == sum_desc[5] ~ "Vehicle too close to road boundary",
      description == sum_desc[6] ~ "Onboard map errors",
      description == sum_desc[7] ~ "Unexpected braking",
      description == sum_desc[8] ~ "Undesirable lane placement",
      description == sum_desc[9] ~ "Too close to preceding vehicle",
      description == sum_desc[10] ~ "Lane violation",
      description == sum_desc[11] ~ "Motion plan error",
      description == sum_desc[12] ~ "Unwanted maneuver by vehicle",
      description == sum_desc[13] ~ "Lane violation",
      description == "Prediction discrepancy. Adjacent vehicle made illegal maneuver from left turn only lane." ~ "Other vehicles' fault",
      description == "Prediction discrepancy. Late and illegal cut-in from other vehicle from adjacent lane." ~ "Illegal cut by others",
      description == "Prediction discrepancy. Late cut-in from other vehicle from adjacent lane." ~ "Late cut by others",
      str_detect(description, "Planning Logic")  ~ "Incorrect Planning Logic",
      str_detect(description, "Object Perception") ~ "Incorrect Object Perception",
      str_detect(description, "The lead vehicle stopped for stop sign was falsely identified") ~ "Incorrect Object Perception",
      str_detect(description, "While traveling on a narrow road, an incoming vehicle approached") ~ "Other vehicles' fault",
      str_detect(description, "The AV system exited autonomous mode due to hardware irregularity.") ~ "Hardware issues",
      str_detect(description, "Manual disengagement as the AV had hardware irregularity. The HMI") ~ "Hardware issues",
      str_detect(description, "Manual disengagement after a scooter made contact with the AV.") ~ "Other vehicles' fault",
      str_detect(description, "Disengage for a perception discrepancy for which a component of the vehicle's perception system") ~ "Perception Error",
      str_detect(description, "Disengage for a software discrepancy for which our vehicle's diagnostics received") ~ "Software issues",
      .default = "Other Reasons"
    )
  ) |> 
  group_by(manufacturer) |> 
  count(short_description, sort = TRUE) |> 
  rename(snag = n)

# {2} 2023 Autonomous Mileage Reports (CSV)
# Store full names of variables
cn_df2 <- names(df2)

# cleaner names
df2 <- df2 |> clean_names()

# Tibble of Brands, total mileage and disengagements
plotdf2 <- df2 |> 
  select(-c(vin_number, annual_total,permit_number)) |> 
  pivot_longer(
    cols = -c(manufacturer, annual_total_of_disengagements),
    names_to = "month",
    values_to = "miles"
  ) |> 
  group_by(manufacturer) |> 
  summarise(total_miles = sum(miles, na.rm = TRUE),
            total_disengagements = sum(annual_total_of_disengagements)) |> 
  arrange(desc(total_miles)) |> 
  mutate(diseng_p_100m = 100 * total_disengagements / total_miles ) |> 
  # Adding logos of manufacturers for the plot
  mutate(logo_url = c(
    "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9f/Waymo_logo.svg/1200px-Waymo_logo.svg.png",
    "https://upload.wikimedia.org/wikipedia/commons/5/5d/Zoox_logo_2021.png",
    "https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Cruise_logo.svg/2560px-Cruise_logo.svg.png",
    "https://1000logos.net/wp-content/uploads/2016/10/Apple-Logo.png",
    "https://seekvectorlogo.com/wp-content/uploads/2023/03/nuro-inc-vector-logo.png",
    "https://media.designrush.com/inspiration_images/136995/conversions/_1524250340_590_Mercedes-Benz-Logo-Wordmark-mobile.jpg",
    "https://mms.businesswire.com/media/20231108625285/en/1938556/23/ghost_combination_black_new.jpg",
    "https://d1.awsstatic.com/customer-references-case-studies-logos/Customer-References-600x400-logos/600X400_WeRide_logo.8637603e647959947cbd83eded476566dd45ef46.png",
    "https://cdn.cookielaw.org/logos/8c60fe9e-585e-46b1-8f92-eba17239401e/d3e43cda-e0a4-42f2-9c04-0e1900c3f68f/808c47fb-8484-44eb-b369-d90d6bb4733e/motional_logo_stack_colorrev_rgb_black.png",
    "https://www.apollo.auto/abolo/images/logo.png",
    "https://mma.prnewswire.com/media/777482/ai_motive_landscape_logo_Logo.jpg",
    "https://s3-us-west-2.amazonaws.com/cbi-image-service-prd/original/fc97e73f-33bd-414e-a9ef-e4504451e4c0.png",
    "https://upload.wikimedia.org/wikipedia/commons/8/8c/Nissan_logo.png",
    "https://global.toyota/pages/news/images/2023/04/11/0800/20230411_02_01.png",
    "https://s28.q4cdn.com/896456191/files/images/didi-logo.png",
    "https://logos-world.net/wp-content/uploads/2022/11/Qualcomm-Emblem.png",
    "https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/Bosch-logo.svg/2560px-Bosch-logo.svg.png",
    "https://ces.vporoom.com/Imagry/image/imagry-logo-with-short-tagline.gif",
    "https://d1io3yog0oux5.cloudfront.net/_e08a077351e2c1b3b2e6179a6ccad2db/aurora/logo.png",
    "https://gatik.ai/wp-content/uploads/gatik-logo.png",
    "https://upload.wikimedia.org/wikipedia/commons/thumb/2/2b/Valeo_Logo.svg/1200px-Valeo_Logo.svg.png"
  ))

# Change levels of Manufacturer to have a common order in all plots
manufacturer_levels <- c(plotdf2$manufacturer, "Valeo")

plotdf2 <- plotdf2 |> 
  mutate(manufacturer = fct(manufacturer, levels = manufacturer_levels)) |> 
  mutate(manufacturer = fct_rev(manufacturer))
plot1df1 <- plot1df1 |> 
  mutate(manufacturer = fct(manufacturer, levels = manufacturer_levels)) |> 
  mutate(manufacturer = fct_rev(manufacturer))
plot2df1 <- plot2df1 |> 
  mutate(manufacturer = fct(manufacturer, levels = manufacturer_levels)) |> 
  mutate(manufacturer = fct_rev(manufacturer))

# Top n manufacturers by number of miles driven
top_manufacturers <- plotdf2 |> 
  slice_max(order_by = total_miles, n = 11) |> 
  pull(manufacturer)

# Common Manufacturers
common_manufacturers <- plot1df1 |> 
  inner_join(plot2df1, relationship = "many-to-many") |> 
  inner_join(plotdf2) |> 
  distinct(manufacturer) |> 
  pull(manufacturer) |> 
  as.character()

# =============================================================================#
# Options & Visualization Parameters--------------------------------------------
# =============================================================================#

# Load fonts
font_add_google("Fredericka the Great",
  family = "title_font"
) # Font for titles
font_add_google("Saira Extra Condensed",
  family = "caption_font"
) # Font for the caption
font_add_google("Fira Sans Extra Condensed",
  family = "body_font"
) # Font for plot text
showtext_auto()

# Define colours
bg_col <- "white"   # Background Colour
text_col <- "#04225CFF" # Colour for the text
text_hil <- "#309D96FF" # Colour for higlighted text

# Define Text Size
ts <- unit(30, units = "cm") # Text Size

# Caption stuff
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")

# Add text to plot--------------------------------------------------------------
plot_title <- "Behind the Wheel of Tomorrow:\nCalifornia's Autonomous Vehicles Testing Data"
plot_caption <- paste0("**Data:** State of California, Department of Motor Vehicles", " | ", " **Code:** ", social_caption_1, " | ", " **Graphics:** ", social_caption_2)
subtitle_text <- "An analysis of Autonomous Vehicles’ (AV) Testing Data (released by the State of California's Department of Motor Vehicles) reveals the performance of various AV Manufacturers. The number of total miles driven, disengagement rates (per 100 miles driven), and common reasons for autonomous mode exits (termed “disengagements”) indicate dominance & error-free tech of Google’s Waymo, and error-prone nature of Apple’s AV."
plot_subtitle <- str_wrap(subtitle_text, width = 115)

# ==============================================================================#
# Data Visualization------------------------------------------------------------
# ==============================================================================#
tempdf2 <- plotdf2 |> 
  filter(manufacturer %in% common_manufacturers) |> 
  filter(manufacturer %in% top_manufacturers)

g1 <- tempdf2 |> 
  ggplot(
    mapping = aes(
      x = total_miles,
      y = manufacturer
    )
  ) +
  geom_col(
    fill = text_col,
    color = "black",
    alpha = 0.5
    ) +
  geom_text(
    aes(
      label = comma(total_miles),
      colour = (total_miles > 1e6)
      ),
    family = "body_font",
    size = 1.8 * ts,
    hjust = if_else(tempdf2$total_miles > 1e6,
                    1.1, -0.1)
  ) +
  geom_image(
    aes(
      x = -1.7e6,
      image = logo_url
    ),
    by = "height",
    hjust = 1
  ) +
  scale_colour_manual(values = c(text_col, "white")) +
  scale_x_continuous(
    expand = expansion(c(0.45, 0.2)),
    breaks = c(1e5, 1e6, 2e6, 3e6),
    labels = label_number(
      scale_cut = cut_short_scale()
    )
  ) +
  labs(
    subtitle = "Total AV miles driven by Manufacturer's\nAutonomous Vehicles (2023))",
    y = NULL, x = NULL
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid = element_blank(),
    panel.grid.major.x = element_line(
      linetype = 2,
      colour = text_hil,
      linewidth = 1
    ),
    axis.text.x = element_text(
      hjust = 0.5,
      size = 4 * ts,
      family = "body_font",
      colour = text_col,
      margin = margin(0, 0, 0, 0,
                      unit = "cm"),
      lineheight = 0.35
    ),
    plot.subtitle = element_text(
      hjust = 0.5,
      size = 4 * ts,
      family = "body_font",
      colour = text_col,
      margin = margin(2, 0, 0, 0,
                      unit = "cm"
      ),
      lineheight = 0.25
    ),
    legend.position = "none"
  )

g2 <- tempdf2 |> 
  ggplot(
    mapping = aes(
      x = diseng_p_100m,
      y = manufacturer
    )
  ) +
  geom_col(
    fill = text_hil,
    colour = "black",
    alpha = 0.5
  ) +
  geom_text(
    aes(
      label = round(diseng_p_100m, 2),
      colour = (diseng_p_100m > 35)
    ),
    family = "body_font",
    size = 1.8 * ts,
    hjust = if_else(tempdf2$diseng_p_100m > 35,
                            1.1, -0.1)
  ) +
  scale_colour_manual(values = c(text_hil, "white")) +
  scale_x_continuous(
    expand = expansion(c(0, 0.2)),
    breaks = c(0, 25, 50),
    labels = c(0, 25, 50)
  ) +
  labs(
    subtitle = "Errors \n(per 100 miles)",
    y = NULL, x = NULL
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid = element_blank(),
    panel.grid.major.x = element_line(
      linetype = 2,
      colour = text_hil,
      linewidth = 1
    ),
    axis.text.x = element_text(
      hjust = 0.5,
      size = 4 * ts,
      family = "body_font",
      colour = text_col,
      margin = margin(0, 0, 0, 0,
                      unit = "cm"),
      lineheight = 0.35
    ),
    plot.subtitle = element_text(
      hjust = 0.5,
      size = 4 * ts,
      family = "body_font",
      colour = text_col,
      margin = margin(2, 0, 0, 0,
                      unit = "cm"
      ),
      lineheight = 0.25
    ),
    legend.position = "none"
  )
# Colours for third plot
g3col <- c("#43B48DFF", "#F5773AFF")

g3 <- plot1df1 |> 
  left_join(plotdf2) |> 
  mutate(n = n / total_miles) |> 
  filter(manufacturer %in% common_manufacturers) |> 
  filter(manufacturer %in% top_manufacturers) |> 
  ggplot(
    mapping = aes(
      y = manufacturer,
      x = n,
      fill = disengagement_initiate,
      label = disengagement_initiate,
      colour = disengagement_initiate
    )
  ) +
  geom_col(
    position = "fill",
    col = "white"
  ) +
  geom_bar_text(
    position = "fill",
    hjust = 0.5,
    vjust = 0.5,
    reflow = TRUE,
    place = "center",
    min.size = 1,
    grow = TRUE,
    padding.y = unit(25, "mm"),
    lineheight = 0.25
  ) +
  scale_x_continuous(
    breaks = c(0, 1),
    labels = label_percent()
  ) +
  scale_fill_manual(values = g3col |> lighten(0.7)) +
  scale_colour_manual(values = g3col |> darken(0.5)) +
  labs(
    subtitle = "Who stopped\nthe AV?",
    x = NULL, y = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    axis.text.y = element_blank(),
    axis.text.x = element_blank(),
    plot.subtitle = element_text(
      hjust = 0.5,
      size = 4 * ts,
      family = "body_font",
      colour = text_col,
      margin = margin(2, 0, 0, 0,
                      unit = "cm"
      ),
      lineheight = 0.25
    )
  )

g4 <- plot2df1 |> 
  left_join(plotdf2) |> 
  mutate(snag_p_100m = snag / total_miles) |> 
  mutate(snag_fill = snag_p_100m / sum(snag_p_100m)) |> 
  filter(manufacturer %in% common_manufacturers) |> 
  filter(manufacturer %in% top_manufacturers) |> 
  ggplot(
    mapping = aes(
      y = manufacturer,
      x = snag_p_100m,
      fill = short_description,
      label = short_description,
      color = short_description
    )
  ) +
  geom_col(
    position = "fill",
    colour = "darkgrey"
  ) +
  geom_bar_text(
    position = "fill",
    hjust = 0.5,
    vjust = 0.5,
    reflow = TRUE,
    place = "center",
    min.size = 1,
    lineheight = 0.25,
    grow = TRUE,
    padding.x = unit(15, "mm"),
    padding.y = unit(15, "mm")
  ) +
  paletteer::scale_fill_paletteer_d("palettesForR::Lights", 
                                    direction = -1) +
  scale_color_manual(
    values = paletteer::paletteer_d("palettesForR::Lights",
                                    direction = -1) |> darken(0.4)
  ) +
  scale_x_continuous(
    breaks = c(0, 0.5, 1),
    labels = label_percent()
  ) +
  labs(
    subtitle = "Reasons for AV\ndisengagement",
    x = NULL, y = NULL
  ) +
  theme_void() +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    axis.text.y = element_blank(),
    axis.text.x = element_text(
      colour = text_col,
      hjust = 0,
      family = "body_font",
      size = 4 * ts,
      margin = margin(0,0,0,0)
      ),
    plot.subtitle = element_text(
      hjust = 0.5,
      size = 4 * ts,
      family = "body_font",
      colour = text_col,
      margin = margin(2, 0, 0, 0,
                      unit = "cm"
      ),
      lineheight = 0.25
    )
    )

# Composing the plots
plot_design = "AAABCDDD"

g <- g1 + g2 + g3 + g4 +
  plot_layout(design = plot_design)


g_final <- g  +
  plot_annotation(
    title = plot_title,
    subtitle = plot_subtitle,
    caption = plot_caption,
    theme = theme(
      plot.subtitle = element_text(
        hjust = 0.5,
        size = 4.8 * ts,
        family = "body_font",
        colour = text_col,
        margin = margin(2, 0, 0, 0,
                        unit = "cm"
        ),
        lineheight = 0.3
      )
    )
  ) &
  theme(
    plot.caption = element_textbox(
      family = "caption_font",
      hjust = 0.5,
      colour = text_hil,
      size = 4 * ts,
      margin = margin(1, 0, 2, 0,
                      unit = "cm"
      )
    ),
    plot.title = element_text(
      hjust = 0.5,
      size = 10 * ts,
      family = "title_font",
      face = "bold",
      colour = text_hil,
      margin = margin(2, 0, 0, 0,
                      unit = "cm"
      ),
      lineheight = 0.35
    ),
    plot.background = element_rect(
      fill = "transparent",
      color = "transparent",
      linewidth = 0
    ),
    plot.margin = margin(0, 0, 0, 0),
    legend.background = element_rect(
      fill = "transparent",
      color = "transparent"
    ),
    panel.background = element_rect(
      fill = "transparent",
      colour = "transparent"
    )
  )

# =============================================================================#
# Image Saving-----------------------------------------------------------------
# =============================================================================#

ggsave(
  filename = here::here("docs", "dip_self_driving_cars.png"),
  plot = g_final,
  width = 75,
  height = 90,
  units = "cm",
  bg = bg_col
)


```

![A graphical analysis of Autonomous Vehicles’ (AV) Testing Data (released by the State of California's Department of Motor Vehicles) reveals the performance of various AV Manufacturers. The number of total miles driven, disengagement rates (per 100 miles driven), and common reasons for autonomous mode exits (termed “disengagements”) indicate dominance & error-free tech of Google’s Waymo, and error-prone nature of Apple’s AV.](/docs/dip_self_driving_cars.png){#fig-3}

## D.I.P. 2024.02.28: Climate Funding

Exploring the dataset from the [Global Landscape of Climate Finance 2023](https://www.climatepolicyinitiative.org/publication/global-landscape-of-climate-finance-2023/) report by the [Climate Policy Initiative](https://www.climatepolicyinitiative.org/) reg. sources of “Climate Funds” – funds for combating climate change, its mitigation, reversal; and, the regions where these go to in @fig-4 .

```{r}
#| eval: false

# =============================================================================#
# About the Dataset-------------------------------------------------------------
# =============================================================================#

# Credit: Climate Policy Initiative
# Global Landscape of Climate Finance 2023
# Barbara Buchner, Baysa Naran, Rajashree Padmanabhi, Sean Stout, Costanza 
# Strinati, Dharshan Wignarajah, Gaoyi Miao, Jake Connolly and Nikita Marini
# November 2, 2023
# https://www.climatepolicyinitiative.org/publication/global-landscape-of-climate-finance-2023/

# Climate Policy Initiative collected data to produce its "Global Landscape of 
# Climate Finance 2023" report, examining various forms of primary financing 
# aimed at reducing greenhouse gas emissions and enhancing climate resilience in 
# real economy sectors. Released in November, the report disclosed approximately 
# $1.3 trillion in such financing worldwide during 2021–2022. Accompanying the 
# report is a spreadsheet detailing estimates by year, region, sector, focus on 
# mitigation versus adaptation, financial instrument type, funder sector (public 
# versus private), and funder type (development bank, corporation, institutional 
# investors, etc.). Previous reports offer downloadable data covering 2019–2020 
# and 2017–2018, with earlier coverage on national climate funds 
# (DIP 2022.02.09) and climate finance projects (DIP 2023.06.14).

# =============================================================================#
# Findings ---------------------------------------------------------------------
# =============================================================================#

# Where the money comes from:
# The share of public and private sources in the funding for climate change 
# mitigation activities has stayed almost the same. Both have increased 
# together, in same proportion. Within the various sources of funding, 
# largest increases in funding have come from “Public Funds” and “State-Owned 
# Enterprises”. Amongst private sources of funds, Commercial Institutions and 
# Individual Households provide bulk of the funding.

# Where the money goes:
# The East Asia and Pacific region continue to get an ever-increasing share of 
# total funds dedicated to Climate Change. However, importantly, the Western 
# Europe region has increased its allotment by the maximum, a staggering 152%.

# Global-Landscape-of-Climate-Finance-2023
# GLCF 2023 – Data Download
url1 <- "https://www.climatepolicyinitiative.org/wp-content/uploads/2023/11/GLCF-2023-Data-Download.xlsx"

# =============================================================================#
# Library Load-in---------------------------------------------------------------
# =============================================================================#
# Data Wrangling Tools
library(tidyverse)
library(openxlsx)
library(janitor)

# Final plot (ggplot2) tools
library(scales)
library(fontawesome)
library(ggtext)
library(showtext)
library(treemapify)
library(colorspace)
library(gganimate)

# =============================================================================#
# Data Load-in & Data Wrangling-------------------------------------------------
# =============================================================================#

# Breakdown of global climate finance by public and private actors (USD billion)
finance <- read.xlsx(
  url1,
  sheet = 3,
  colNames = TRUE,
  rowNames = FALSE,
  rows = c(4, 6:11, 13:21),
  cols = 1:7
  ) |> 
  remove_empty() |> 
  mutate(
    funding_type = c(
      rep("Private", 6),
      rep("Public", 9)
    )
  ) |> 
  rename(actors = Actors) |> 
  as_tibble() |> 
  pivot_longer(
    cols = 2:7,
    names_to = "year",
    values_to = "value"
  )

# Breakdown of global climate finance by Use and Sector (USD billion)
usage <- read.xlsx(
  url1,
  sheet = 3,
  colNames = TRUE,
  rowNames = FALSE,
  rows = c(56, 58:66, 68:77, 79:88, 90:91),
  cols = 1:5
  ) |> 
  remove_empty() |> 
  mutate(
    usage_type = c(
      rep("Adaptation", 9),
      rep("Mitigation", 10),
      rep("Dual Benefits", 10),
      rep("Unknown", 2)
    )
  ) |> 
  rename(sector = `Use/Sector`) |> 
  as_tibble() |> 
  pivot_longer(
    cols = 2:5,
    names_to = "year",
    values_to = "value"
  )

# Breakdown of global climate finance by region of destination (USD billion)

regions <- read.xlsx(
  url1,
  sheet = 3,
  colNames = TRUE,
  rowNames = FALSE,
  rows = 167:177,
  cols = 1:7
) |> 
  remove_empty() |> 
  rename(region = `Region`) |> 
  as_tibble() |> 
  pivot_longer(
    cols = 2:7,
    names_to = "year",
    values_to = "value"
  ) 

# Create a common tibble to join all data to use a faceted treemap

df <- bind_rows(
  regions |> 
    rename(fill_var = region) |> 
    mutate(
      group_var = " ",
      table_type = "Destination for funds"
    ),
  finance |> 
    rename(
      fill_var = actors,
      group_var = funding_type
    ) |> 
    mutate(table_type = "Source of funds")
  ) |> 
  mutate(year = as.numeric(year))

# Get levels of categories fixed for nicer colours later on
fill_var_levels <- df |> 
  group_by(table_type, group_var, fill_var) |> 
  summarise(total_val = sum(value)) |> 
  arrange(desc(total_val)) |> 
  pull(fill_var)

plotdf <- df |> 
  mutate(fill_var = fct(fill_var, levels = fill_var_levels)) |> 
  mutate(table_type = fct(table_type,
                          levels = c(
                            "Source of funds",
                            "Destination for funds"
                          ))) |> 
  ungroup()

# Some EDA Plots to write the messages in actual plot
plotdf |> 
  filter(table_type == "Usage of funds") |> 
  ggplot(aes(x = year, y = value, col = fill_var)) +
  geom_line(linewidth = 2) +
  scale_color_brewer(palette = "Dark2")

plotdf |> 
  filter(table_type == "Usage of funds") |> 
  group_by(fill_var) |> 
  summarise(increase = (100 * (max(value) - min(value)))/min(value))

plotdf |> 
  filter(table_type != "Usage of funds") |> 
  group_by(group_var, year) |> 
  summarise(value = sum(value, na.rm = TRUE)) |> 
  ggplot(aes(x = year, y = value, col = group_var)) +
  geom_line(linewidth = 2)

plotdf |> 
  filter(table_type != "Usage of funds") |> 
  group_by(group_var, fill_var, year) |>
  summarise(value = sum(value, na.rm = TRUE)) |> 
  ggplot(aes(x = year, y = value, 
             col = fill_var,
             linetype = group_var)) +
  geom_line(linewidth = 2) +
  scale_color_brewer(palette = "Dark2")

plotdf |> 
  filter(table_type != "Usage of funds") |> 
  group_by(group_var, fill_var) |> 
  summarise(increase = (100 * (max(value) - min(value)))/min(value)) |> 
  group_by(group_var) |> 
  arrange(desc(increase))

# =============================================================================#
# Options & Visualization Parameters--------------------------------------------
# =============================================================================#

# Load fonts
# Font for titles
font_add_google("Fjalla One",
  family = "title_font"
) 

# Font for the caption
font_add_google("Saira Extra Condensed",
  family = "caption_font"
) 

# Font for plot text
font_add_google("Anton",
  family = "body_font"
) 

showtext_auto()

# Define colours
bg_col <- "white"   # Background Colour
text_col <- "#009270FF" |> darken(0.5) # Colour for the text
text_hil <- "#009270FF" # Colour for higlighted text

# Add text to plot--------------------------------------------------------------
plot_title <- "Flow of Global Climate Funds"
plot_caption <- paste0("Data: Climate Policy Initiative | Code & Graphics: GitHub @aditya-dahiya")
subtitle_text <- "Exploring the sources of “Climate Funds” – funds for combating climate change, its mitigation, reversal; and, the regions where these go to. From 2017 to 2022, share of public and private sources in the funding has stayed constant. Within the various sources of funding, largest increases in funding have come from “Public Funds” and “State-Owned Enterprises”. Further, the East Asia and Pacific region continue to get an ever-increasing share of total funds dedicated to Climate Change. However, importantly, the Western Europe region has increased its allotment by the maximum, a staggering 152%, from 2017 to 2022."
plot_subtitle <- str_wrap(subtitle_text, width = 100)

# ==============================================================================#
# Data Visualization------------------------------------------------------------
# ==============================================================================#

g <- ggplot(plotdf, 
  aes(
    label = fill_var,
    area = value,
    subgroup = group_var,
    fill = fill_var
  )) +
  geom_treemap(
    layout = "fixed"
  ) +
  geom_treemap_subgroup_border(
    layout = "fixed",
    colour = "white",
    alpha = 0.5
  ) +
  geom_treemap_subgroup_text(
    layout = "fixed", 
    place = "centre",
    colour = "white",
    family = "body_font"
  ) +
  geom_treemap_text(
    layout = "fixed", 
    place = "center", 
    grow = FALSE, 
    colour = text_col,
    family = "caption_font",
    reflow = TRUE
  ) +
  facet_wrap(~ table_type) +
  scale_fill_manual(
    values = paletteer::paletteer_d("khroma::stratigraphy")[(115):(115 + 25)]
  ) +
  labs(
    title = paste0(plot_title, ": {frame_time}"),
    subtitle = plot_subtitle,
    caption = plot_caption
  ) +
  theme_minimal() +
  theme(
    legend.position = "none",
    strip.text.x = element_text(
      colour = text_col,
      family = "body_font",
      size = 18,
      margin = margin(5, 0, 5, 0)
    ),
    plot.title = element_text(
      hjust = 0.5,
      family = "title_font",
      size = 32,
      colour = text_hil, 
      margin = margin(15, 0, 5, 0)
    ),
    plot.subtitle = element_text(
      hjust = 0.5,
      family = "caption_font",
      size = 14,
      colour = text_col,
      lineheight = 1.1,
      margin = margin(5, 0, 5, 0)
    ),
    plot.caption = element_text(
      hjust = 0.5,
      colour = text_hil,
      size = 9,
      family = "caption_font",
      margin = margin(5, 0, 10, 0)
    )
  ) +
  transition_time(as.integer(year)) +
  ease_aes('linear')

# =============================================================================#
# Image Saving-----------------------------------------------------------------
# =============================================================================#

anim_save(
  filename = here::here("docs", "dip_climate_funding.gif"),
  animation = g,
  fps = 10,
  duration = 20,
  start_pause = 5,
  end_pause = 10,
  height = 650,
  width = 600,
  units = "px"
)

ggview::ggview(
  device = "png",
  plot = g,
  width = 23,
  height = 30,
  units = "cm",
  bg = bg_col
)


```

![From 2017 to 2022, share of public and private sources in the funding has stayed constant. Within the various sources of funding, largest increases in funding have come from “Public Funds” and “State-Owned Enterprises”. Further, the East Asia and Pacific region continue to get an ever-increasing share of total funds dedicated to Climate Change. However, importantly, the Western Europe region has increased its allotment by the maximum, a staggering 152%, from 2017 to 2022.](/docs/dip_climate_funding.gif){#fig-4}
