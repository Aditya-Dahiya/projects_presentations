---
title: "Year-end review: 2024"
author: "Aditya Dahiya"
date: "2024-12-31"
subtitle: "Graphing out the habits I tried to form, and the daily tasks I aimed at completing during 2024."
categories:
  - "Data Visualization"
image: "images/my_year_2024.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/projects_presentations/data_vizs.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
bibliography: references.bib
comments:
  giscus: 
    repo: Aditya-Dahiya/projects_presentations
---

Analysing my achievements for the year 2024 in my different habits.

```{r}
#| label: setup

# Loading the relevant packages
library(tidyverse)          # Data Wrangling
library(gt)                 # Displaying beautiful tables
library(ggiraph)            # Interactive Graphics
library(showtext)           # Display fancy text in ggplot2
library(fontawesome)        # Icons and Fonts 
library(janitor)            # Cleaning tidying raw data

 
# Setting font defaults
font_add_google("Monda", "body_font")
showtext_auto()

# Set the default theme with a custom font family
theme_set(theme_minimal(base_family = "body_font"))

# Setting default options for the interactive graphics
set_girafe_defaults(
  opts_hover = opts_hover(
    css = "fill:yellow;stroke:black;stroke-width:1px"
    ),
  opts_tooltip = opts_tooltip(
    css = "padding:3px;color:black;background-color:white;"
    )
)
```

Visualization Parameters

```{r}
#| eval: false

# Font for titles
font_add_google("Roboto Condensed",
  family = "title_font"
) 

# Font for the caption
font_add_google("Saira Extra Condensed",
  family = "caption_font"
) 

# Font for plot text
font_add_google("Jost",
  family = "body_font"
) 

showtext_auto()

# Extract a colour palette from the Cover of Book: 
# Can't Hurt Me  by David Goggins
# url <- "https://m.media-amazon.com/images/I/81gTRv2HXrL._UF1000,1000_QL80_.jpg"
# logo1 <- magick::image_read(url)
# set.seed(42)
# magick::image_write(
#   logo1,
#   path = here::here("data", "temp_my_year_2024.jpg")
# )
# mypal <- imgpalr::image_pal(
#   file = here::here("data", "temp_my_year_2024.jpg"),
#   type = "qual",
#   n = 10
# )
# mypal |> seecolor::print_color()
# unlink(here::here("data", "temp_my_year_2024.jpg"))
# Manually write it down to avoid randomness and re-run time
mypal <- c(
  "#E2E3E9", "#7A8162", "#75555C", "#3D302A",
  "#292326", "#B98E2D", "#7A6981", "#7C8C66",
  "#ACA2BB", "#BED0CF"
)

# A base Colour
bg_col <- "white"
seecolor::print_color(bg_col)

# Colour for highlighted text
text_hil <- mypal[6]
seecolor::print_color(text_hil)

# Colour for the text
text_col <- colorspace::darken(mypal[3], 0.3)
seecolor::print_color(text_col)


# Define Base Text Size
bts <- 50 

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
plot_caption <- paste0(
  " |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )
rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)

# Add text to plot-------------------------------------------------
plot_title <- "My Year 2024 - targets and habits"

plot_subtitle <- "........................."
```

Loading the data, studying and understanding it. Cleaning the names.

```{r}

# Set the working directory (I didnt want to host raw data on GitHub)
list.files("loop_habits")

# Define the directory containing the CSV files
directory <- "loop_habits"

# List all CSV files in the directory
csv_files <- list.files(
  path = directory, 
  pattern = "\\.csv$", 
  full.names = TRUE
  )

# Extract base names (without file extension) to use as object names
file_names <- tools::file_path_sans_ext(basename(csv_files)) |>
  tolower()

# Read each CSV file and assign it to an object with the corresponding name
purrr::walk2(
  csv_files, 
  file_names, 
  ~ assign(.y, read_csv(.x), 
           envir = .GlobalEnv)
  )

# Apply janitor::clean_names() to all created objects
purrr::walk(
  file_names, ~
    {
      cleaned_data <- get(.x) |>  clean_names() 
      # Retrieve object, clean names
      
      assign(.x, cleaned_data, envir = .GlobalEnv) 
      # Reassign cleaned data back to the same object
    }
  )

# Remove the temporary files
rm(csv_files, directory, file_names)


```

Cleaning up the data and keeping only the relevant variables, adding date, day of week, week number, month and year for each row separately to aid in GitHub style plot

```{r}

habits <- habits |> 
  select(
    position,
    name,
    question,
    num_repetitions,
    interval
  ) |> 
  mutate(
    position = as.numeric(position),
    interval = case_when(
      interval == 1 ~ "Daily",
      interval == 7 ~ "Weekly",
      .default = NA
    )
  ) |> 
  rename(description = question) |> 
  mutate(
    description = case_when(
      name == "Office Goals" ~ "Did you work towards your long term office goals today?",
      name == "Walk/Cycle" ~ "Did you do strength training today?",
      name == "Slept 8 hr?" ~ "Did you sleep early / enough last night?",
      name == "Aryan Studies" ~ "How much time did you spend studying with kids today?",
      name == "Aryan Junk Food" ~ "Did you give junk food to kids today?",
      .default = description
    )
  )


checkmarks <- checkmarks |> 
  mutate(
    day_of_week = fct_rev(wday(date, label = T, abbr = F)),
    day_number = yday(date),
    week_number = week(date),
    month_year = month(date, label = TRUE),
    walk_cycle = walk_cycle / 1000,
    date = format(date, "%d %B"),
    id = row_number()
  )
```

Exploring the raw data in the root folder - the overall habits - to make a beautiful table in {gt} tables

```{r}
#| label: tbl-root1
#| tbl-cap: "The different habits that I tracked"

habits |> 
  gt() |> 
  cols_label(
    position = "S. No.",
    name = "Name of the Habit",
    description = "Description / Question",
    num_repetitions = "Target number of repetitions",
    interval = "Frequency"
  ) |> 
  tab_header(
    title = "My Atomic Habits (2024)",
    subtitle = "The list of habits I tracked for myself in the year 2024",
  ) |> 
  gtExtras::gt_theme_espn()
```

Next, exploring any one habit - an attempt at Github Contributions style chart

```{r}
# Custom functions: creating a geom_rtile()
# Credits: https://stackoverflow.com/questions/64355877/round-corners-in-ggplots-geom-tile-possible


`%||%` <- function(a, b) {
  if(is.null(a)) b else a
}

GeomRtile <- ggproto("GeomRtile", 
                     statebins:::GeomRrect, # 1) only change compared to ggplot2:::GeomTile
                     
  extra_params = c("na.rm"),
  setup_data = function(data, params) {
    data$width <- data$width %||% params$width %||% resolution(data$x, FALSE)
    data$height <- data$height %||% params$height %||% resolution(data$y, FALSE)

    transform(data,
      xmin = x - width / 2,  xmax = x + width / 2,  width = NULL,
      ymin = y - height / 2, ymax = y + height / 2, height = NULL
    )
  },
  default_aes = aes(
    fill = "grey20", colour = NA, size = 0.1, linetype = 1,
    alpha = NA, width = NA, height = NA
  ),
  required_aes = c("x", "y"),

  # These aes columns are created by setup_data(). They need to be listed here so
  # that GeomRect$handle_na() properly removes any bars that fall outside the defined
  # limits, not just those for which x and y are outside the limits
  non_missing_aes = c("xmin", "xmax", "ymin", "ymax"),
  draw_key = draw_key_polygon
)

geom_rtile <- function(mapping = NULL, data = NULL,
                       stat = "identity", position = "identity",
                       radius = grid::unit(6, "pt"), # 2) add radius argument
                       ...,
                       linejoin = "mitre",
                       na.rm = FALSE,
                       show.legend = NA,
                       inherit.aes = TRUE) {
  layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomRtile, # 3) use ggproto object here
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = rlang::list2(
      radius = radius,
      linejoin = linejoin,
      na.rm = na.rm,
      ...
    )
  )
}
```

```{r}

checkmarks |> 
  
  # Temp Code during trial phase, can remove later
  select(date, day_of_week, day_number, week_number, month_year, id,
         walk_cycle) |> 
  drop_na() |> 
  
  # Start the plot
  ggplot(
    mapping = aes(
      group = id,
      x = week_number,
      # x_min = week_number - 0.4,
      # x_max = week_number + 0.4,
      
      y = day_of_week,
      # y_min = as.numeric(day_of_week) - 0.4,
      # y_max = as.numeric(day_of_week) + 0.4,
      fill = walk_cycle
    )
  ) +
  # ggchicklet::geom_chicklet() +
  geom_rtile(
    radius = unit(3, "pt"),
    colour = "white"
  ) +
  # geom_tile(colour = "white") +
  coord_fixed() +
  scale_x_continuous(
    limits = c(15, 52),
    expand = expansion(0),
    breaks = c(15, 25, 35, 45, 52)
  ) +
  scale_y_discrete(
    breaks = checkmarks$day_of_week |> levels(),
    limits = checkmarks$day_of_week |> levels(),
    labels = checkmarks$day_of_week |> levels(),
    expand = expansion(0)
  ) +
  scale_fill_gradient2(
    low = "white", high = "red",
    na.value = bg_col
  ) +
  labs(
    x = NULL, y = NULL,
    fill = NULL
  ) +
  theme(
    legend.position = "bottom"
  )
```

Attempt at an interactive Chart

```{r}

plot1 <- checkmarks |> 
  ggplot(
    mapping = aes(
      x = week_number,
      y = day_of_week, 
      fill = walk_cycle,
      data_id = id,
      tooltip = paste0(date, "\n", 
                       day_of_week, "\n",
                       round(walk_cycle, 2), 
                       " hours")
    )
  ) +
  geom_tile_interactive(
    colour = "white",
    linewidth = 1
  ) +
  scale_x_continuous(
    limits = c(0, 52),
    breaks = seq(from = 0, to = 52, length.out = 5),
    labels = c("Jan", "Mar", "Jun", "Sep", "Dec")
  ) +
  coord_fixed() +
  paletteer::scale_fill_paletteer_c(
    "grDevices::Blues 3", 
    direction = -1
  ) +
  labs(
    title = "Walking (number of hours per day)",
    y = NULL, x = NULL,
    fill = "Hours (per day)"
  ) +
  theme(
    legend.title = element_text(vjust = 0.5, hjust = 0.5),
    panel.grid = element_blank(),
    legend.position = "bottom",
    legend.title.position = "top"
  )

girafe(
  ggobj = plot1
)
```

```{r}

facet_labels <- c("Number of days walked during the month", "Average duration walked per day")
names(facet_labels) <- c("walk_days", "walk_mean")
checkmarks |> 
  group_by(month_year) |> 
  summarize(
    walk_mean = round(mean(walk_cycle), 1),
    walk_days = sum(walk_cycle > 0)
  ) |> 
  pivot_longer(
    cols = -month_year,
    names_to = "facet_var",
    values_to = "value"
  ) |> 
  ggplot(
    mapping = aes(
      x = value,
      y = month_year
    )
  ) +
  geom_col(
    alpha = 0.5
  ) +
  geom_text(
    mapping = aes(
      label = value
    ),
    hjust = -0.1
  ) +
  facet_wrap(
    ~facet_var, 
    scales = "free_x",
    labeller = labeller(facet_var = facet_labels)
  ) +
  labs(
    x = NULL, y = NULL
  ) +
  theme(
    panel.grid = element_blank()
  )
```
