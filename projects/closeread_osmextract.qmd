---
title: "A Closeread Scroll-story: Exploring open-source Geographic and Climate Data in R"
author: "Aditya Dahiya"
date: "2025-02-12"
subtitle: "A scrollytelling journey through R’s open-source geospatial data ecosystem—exploring terrain, climate, and boundaries with {ggplot2} and friends."
categories:
  - "Quarto"
  - "StoryTelling"
  - "Closeread"
  - "Maps"
  - "Geocomputation"
image: "images/closeread-quarto.png"
format: 
  closeread-html:
    cr-section:
      layout: "overlay-left"
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/projects_presentations/projects/closeread_osmextract.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
bibliography: references.bib
comments:
  giscus: 
    repo: Aditya-Dahiya/projects_presentations
---

This story showcases how to access and visualize open-source vector and raster data using [{ggplot2}](https://github.com/tidyverse/ggplot2), [{sf}](https://github.com/r-spatial/sf), [{terra}](https://github.com/rspatial/terra), and [{tidyterra}](https://github.com/Dieghernan/tidyterra). We retrieve elevation, land cover, and climate data from [{elevatr}](https://github.com/jhollist/elevatr), [{geodata}](https://github.com/rspatial/geodata), [{climateR}](https://github.com/mikejohnson51/climateR), and enhance terrain with [{hillshader}](https://github.com/Chrisjb/hillshader) and [{whitebox}](https://github.com/giswqs/whiteboxR). For global boundaries, we tap into [{rnaturalearth}](https://github.com/ropensci/rnaturalearth) and extract OpenStreetMap data with [{osmdata}](https://github.com/ropensci/osmdata) and [{osmextract}](https://github.com/ropensci/osmextract).

::::: {.cr-section layout="sidebar-right"}
::: {focus-on="cr-fig1"}
This faceted map visualizes Greenland’s monthly average temperatures using open climate data from {geodata} and spatial operations from {terra} and {sf}. Temperature rasters are cropped, masked, and projected into a North Pole Stereographic CRS, then mapped with {ggplot2} using `geom_spatraster()` and a Viridis color scale.
:::

::: {#cr-fig1 .scale-to-fill}
![](images/geodata_package_1.png)
:::
:::::

::::: {.cr-section layout="sidebar-left"}
::: {focus-on="cr-fig2"}
This visualization simulates global sea level rise scenarios using elevation data from `{elevatr}` and raster manipulation with `{terra}`. The data is reprojected (ESRI:54030) and plotted with `{ggplot2}` using `geom_spatraster()`, with `facet_wrap()` displaying different rise levels. The color scale highlights submerged areas, emphasizing potential landmass loss.
:::

::: {#cr-fig2 .scale-to-fill}
![](images/geodata_package_2.png)
:::
:::::

::::: {.cr-section layout="overlay-left"}
::: {focus-on="cr-fig3"}
This visualization maps cropland distribution across Haryana’s subdistricts using ESA WorldCover data accessed via [{geodata}](https://github.com/rspatial/geodata). The raster is processed with [{terra}](https://github.com/rspatial/terra) and overlaid with district boundaries from [{sf}](https://github.com/r-spatial/sf).

An inset bar chart ranks subdistricts by cropland percentage, enhancing the spatial analysis.
:::

::: {#cr-fig3 .scale-to-fill}
![](images/geodata_package_4.png)
:::
:::::

::::: {.cr-section layout="sidebar-left"}
::: {focus-on="cr-fig4"}
This faceted map visualizes monthly rainfall in India (2018–2023) using {climateR} to fetch TerraClimate data, processed with {terra} and {sf}. The raster data is cropped, masked, and mapped with {ggplot2} using geom_spatraster() and styled with {paletteer} and {ggthemes::theme_map()}.
:::

::: {#cr-fig4 .scale-to-fill}
![](images/climateR_package_3.png)
:::
:::::

:::::: {.cr-section layout="sidebar-left"}
::: {focus-on="cr-fig5" scale-by="0.5"}
This faceted visualization of India's Palmer Drought Severity Index (PDSI) from 2010 to 2023 is created using `{ggplot2}`, `{tidyterra}`, `{sf}`, and `{terra}`. Climate data from the TerraClimate dataset is accessed via `{climateR}`, while administrative boundaries are sourced from the Survey of India.
:::

::: {focus-on="cr-fig5" scale-by="1.2" pan-to="10%,-80%"}
The color scale highlights drought and wetness patterns over time.
:::

::: {#cr-fig5}
![](images/climateR_package_2.png)
:::
::::::

:::::: {.cr-section layout="sidebar-left"}
::: {focus-on="cr-fig6"}
A stepwise exploration of Sikkim’s elevation, this composite plot of data from {elevatr} showcases terrain analysis using {terra}, with **hillshade** (terra::shade), **slope**, and **aspect** layers.
:::

::: {focus-on="cr-fig6" pan-to="50%,-60%" scale-by="2"}
{ggblend} enhances visualization by merging grayscale relief with elevation colors, while roads overlay the final blended map.
:::

::: {#cr-fig6 .scale-to-fill}
![](images/whitebox_terra_7.png)
:::
::::::

:::::: {.cr-section layout="sidebar-left"}
::: {focus-on="cr-fig7"}
This composite plot showcases different techniques for visualizing elevation and terrain shading in Sikkim, India. Using **{terra}**, grayscale hillshades and blended reliefs are created, while **{whitebox}** generates multi-directional and hypsometrically tinted hillshades.
:::

::: {focus-on="cr-fig7" pan-to="-70%,-60%" scale-by="1.5"}
**{ggblend}** merges elevation and shading for enhanced topographic clarity, with roads overlaid for context.
:::

::: {#cr-fig7 .scale-to-fill}
![](images/whitebox_terra_11.png)
:::
::::::

::::: {.cr-section layout="sidebar-right"}
::: {focus-on="cr-fig8"}
This world map uses {rnaturalearth} to download the 50m Cross Blended Hypsometric Tints with Shaded Relief dataset, enhancing terrain visualization. The raster is processed with {terra}, re-projected, and plotted in {ggplot2} using {tidyterra}’s `geom_spatraster_rgb()` for smooth, high-resolution rendering.
:::

::: {#cr-fig8 .scale-to-fill}
![](images/rnaturalearth_package_5.png)
:::
:::::

::::: {.cr-section layout="sidebar-left"}
::: {focus-on="cr-fig9"}
This map visualizes the International Date Line using an azimuthal equal-area projection centered at (0°, 180°). The raster background is processed with [{terra}](https://github.com/rspatial/terra), while vector boundaries are styled with [{ggplot2}](https://github.com/tidyverse/ggplot2). Line thickness and transparency vary based on data attributes.
:::

::: {#cr-fig9 .scale-to-fill}
![](images/rnaturalearth_package_6.png)
:::
:::::

::::: {.cr-section layout="sidebar-left"}
::: {focus-on="cr-fig10"}
This map visualizes Haryana’s irrigation canal network using {osmextract} to retrieve OpenStreetMap line data, with spatial processing handled by {sf}. Elevation data is sourced from {elevatr}, and administrative boundaries from {geodata}. The final visualization overlays canals on an elevation raster using {ggplot2} and {tidyterra}.
:::

::: {#cr-fig10 .scale-to-fill}
![](images/osm_packages_1.png)
:::
:::::

```{r}
#| label: tbl-session-info
#| tbl-cap: "R Packages and their versions used in the creation of this page and graphics"
#| eval: eval

# Data Import and Wrangling Tools
library(tidyverse)            # All things tidy

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text support for ggplot2
library(showtext)             # Display fonts in ggplot2
library(colorspace)           # Lighten and Darken colours
library(patchwork)            # Compiling Plots

# Mapping Tools
library(sf)                   # Simple Features in R
library(terra)                # Rasters in R
library(tidyterra)            # Plotting rasters with ggplot2
library(geodata)
library(elevatr)
library(climateR)
library(hillshader)
library(whitebox)
library(osmdata)
library(osmextract)


sessioninfo::session_info()$packages |> 
  as_tibble() |> 
  select(package, 
         version = loadedversion, 
         date, source) |> 
  arrange(package) |> 
  janitor::clean_names(
    case = "title"
  ) |> 
  gt::gt() |> 
  gt::opt_interactive(
    use_search = TRUE
  ) |> 
  gtExtras::gt_theme_espn()
```

Making logo for this page

```{r}
library(magick)
image_read(
  here::here(
    "projects", "images", 
    "closeread-quarto.png"
    )
  ) |>
  image_resize("x400") |> 
  image_crop("550x400+85") |> 
  image_write(
    here::here(
      "projects", "images", 
      "closeread-quarto.png"
    )
  )
  
```
