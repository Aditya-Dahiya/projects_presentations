---
title: "tidy_scottish_munros"
author: "Aditya Dahiya"
date: "2025-08-22"
subtitle: "tidy_scottish_munros"
categories:
  - "#TidyTuesday"
image: "thumbnails/tidy_scottish_munros.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - linkate
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/projects_presentations/data_vizs.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
bibliography: references.bib
comments:
  giscus: 
    repo: Aditya-Dahiya/projects_presentations
---

# About the Data

This dataset contains information about Scottish Munros, mountains with elevations exceeding 3,000 feet (914 meters), sourced from [The Database of British and Irish Hills](https://www.hills-database.co.uk/) v18.2 and made available under a [Creative Commons Attribution 4.0 International Licence](https://creativecommons.org/licenses/by/4.0/). Originally catalogued by Sir Hugh Munro in 1891, these peaks differ from other Scottish mountain classifications by lacking rigid prominence requirements, making the list subject to periodic revisions as new surveys are conducted. The dataset tracks the classification status of each peak across multiple revisions from 1891 to 2021, documenting whether summits were designated as full Munros, subsidiary Munro Tops, or excluded entirely during different time periods. Each entry includes precise coordinates using the British National Grid projection system, enabling geographic analysis of these iconic Scottish highlands. This data was curated by [Nicola Rennie](https://github.com/nrennie) as part of the [TidyTuesday](https://github.com/rfordatascience/tidytuesday) weekly data project, providing researchers and enthusiasts with a comprehensive historical record of how Scotland's most celebrated peaks have been classified over more than a century.

![.............................](tidy_scottish_munros.png){#fig-1}

# How the Graphic Was Created

### Loading required libraries

```{r}
#| label: setup

pacman::p_load(
  tidyverse,            # All things tidy
  
  scales,               # Nice Scales for ggplot2
  fontawesome,          # Icons display in ggplot2
  ggtext,               # Markdown text support for ggplot2
  showtext,             # Display fonts in ggplot2
  colorspace,           # Lighten and Darken colours

  patchwork,            # Composing Plots
  sf
)

# Read in the Data
scottish_munros <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-08-19/scottish_munros.csv') |> 
  janitor::clean_names()
```

### Visualization Parameters

```{r}
#| label: viz-params

# Font for titles
font_add_google("Saira",
  family = "title_font"
) 

# Font for the caption
font_add_google("Saira Condensed",
  family = "body_font"
) 

# Font for plot text
font_add_google("Saira Extra Condensed",
  family = "caption_font"
) 

showtext_auto()

# A base Colour
bg_col <- "white"
seecolor::print_color(bg_col)

# Colour for highlighted text
text_hil <- "grey20"
seecolor::print_color(text_hil)

# Colour for the text
text_col <- "grey20"
seecolor::print_color(text_col)

line_col <- "grey30"

# Custom Colours for dots
custom_dot_colours <- paletteer::paletteer_d("nbapalettes::cavaliers_retro")

# Custom size for dots
size_var <- 14

# Define Base Text Size
bts <- 80

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
plot_caption <- paste0(
  "**Data:** Joe Hasell at Our World in Data", 
  " |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )
rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)

# Add text to plot-------------------------------------------------
plot_title <- "tidy_scottish_munros"

plot_subtitle <- "tidy_scottish_munros" |> str_wrap(110)

str_view(plot_subtitle)
```

### Exploratory Data Analysis and Wrangling

```{r}
#| label: eda

# How many distinct munors are there
scottish_munros |> 
  distinct(do_bih_number)

scottish_munros |> 
  distinct(name)

# Convert into sf object for British National Grid (OSGB36) projection
df1 <- scottish_munros |> 
  distinct(do_bih_number, name, xcoord, ycoord, height_m) |> 
  drop_na() |> 
  st_as_sf(coords = c("xcoord", "ycoord"), crs = 27700)

scottish_munros |> 
  select(height_m) |> 
  ggplot(aes(height_m)) +
  geom_boxplot()

df1 |> 
  ggplot() +
  geom_sf(
    aes(colour = height_m),
    size = 0.8
  ) +
  paletteer::scale_colour_paletteer_c(
    "grDevices::Purple-Yellow",
    direction = -1
  )

df2 <- scottish_munros |> 
  filter(!is.na(xcoord) & !is.na(ycoord)) |> 
  st_as_sf(coords = c("xcoord", "ycoord"), crs = 27700) |> 
  st_drop_geometry() |> 
  pivot_longer(
    cols = starts_with("x"),
    names_to = "year",
    values_to = "value"
  ) |> 
  mutate(
    year = parse_number(year)
  ) |> 
  filter(value == "Munro")


# Code help : Clause Sonnet 4

# Define the chronological order of years
year_order <- c(1891, 1921, 1933, 1953, 1969, 1974, 1981, 1984, 1990, 1997, 2021)

# Create a helper function to get previous and next years
get_prev_year <- function(year) {
  idx <- which(year_order == year)
  if (idx == 1) return(NA) else return(year_order[idx - 1])
}

get_next_year <- function(year) {
  idx <- which(year_order == year) |> 
  if (idx == length(year_order)) return(NA) else return(year_order[idx + 1])
}

# Create the label_var
plotdf <- df2 |> 
  arrange(do_bih_number, year) |>
  group_by(do_bih_number) |>
  mutate(
    # Get the years this munro appears in
    munro_years = list(year),
    # For each year, check previous and next
    prev_year = map_dbl(year, get_prev_year),
    next_year = map_dbl(year, get_next_year)
  ) |>
  ungroup() |>
  mutate(
    # Check if munro was present in previous year
    was_in_prev = case_when(
      is.na(prev_year) ~ FALSE, # First year, so can't be continued
      TRUE ~ map2_lgl(do_bih_number, prev_year, ~{
        .x %in% (df2 |> filter(year == .y) |> pull(do_bih_number))
      })
    ),
    # Check if munro will be present in next year
    will_be_in_next = case_when(
      is.na(next_year) ~ TRUE, # Last year, so can't be dropped
      TRUE ~ map2_lgl(do_bih_number, next_year, ~{
        .x %in% (df2 |> filter(year == .y) |> pull(do_bih_number))
      })
    ),
    # Create the label
    label_var = case_when(
      !was_in_prev ~ "Newly added in this Survey",
      !will_be_in_next ~ "Dropped in the next Survey",
      TRUE ~ "Unchanged"
    )
  ) |>
  # Clean up helper columns
  select(-munro_years, -prev_year, -next_year, -was_in_prev, -will_be_in_next)

plotdf1 <- plotdf |> 
  left_join(
    scottish_munros |> 
      select(do_bih_number, xcoord, ycoord) |> 
      filter(!is.na(xcoord) & !is.na(ycoord)) |> 
      st_as_sf(coords = c("xcoord", "ycoord"), crs = 27700)
  ) |> 
  st_as_sf()

# A summary table for labels in the facet
plotdf2 <- plotdf |>
  count(year, label_var) |>
  pivot_wider(names_from = label_var, values_from = n, values_fill = 0) |>
  arrange(year) |> 
  filter(year != 1891)

scotland <- geodata::gadm(
  country = "United Kingdom",
  level = 1,
  path = tempdir(),
  resolution = 2
  ) |> 
  janitor::clean_names() |> 
  st_as_sf() |> 
  filter(name_1 == "Scotland") |> 
  st_transform(crs = 27700)
  

```

### The Plot

```{r}
#| label: base-plot

g <- plotdf1 |> 
  ggplot() +
  geom_sf(
    data = scotland,
    fill = "lightgrey"
  ) +
  geom_sf(
    data = 
  )


  labs(
    title = plot_title,
    subtitle = plot_subtitle,
    x = "Gini Coefficient (0 = Perfect Equality, 1 = Maximum Inequality)",
    y = NULL,
    caption = plot_caption
  ) +
  theme_minimal(
    base_family = "body_font",
    base_size = bts
  ) +
  theme(
    
    # Legend: Not needed as colour does not convey any additional information
    legend.position = "none",
    
    # Overall
    text = element_text(
      margin = margin(0,0,0,0, "mm"),
      colour = text_col,
      lineheight = 0.3
    ),
    
    # Labels and Strip Text
    plot.title = element_text(
      margin = margin(5,0,5,0, "mm"),
      hjust = 0.5,
      vjust = 0.5,
      colour = text_hil,
      size = 2 * bts,
      family = "body_font",
      face = "bold"
      ),
    plot.subtitle = element_text(
      margin = margin(2,0,5,0, "mm"),
      vjust = 0.5,
      colour = text_hil,
      size =  bts,
      hjust = 0.5,
      family = "body_font",
      lineheight = 0.3
      ),
    plot.caption = element_textbox(
      margin = margin(8,0,5,0, "mm"),
      hjust = 0.5,
      halign = 0.5,
      colour = text_hil,
      size = bts * 0.8,
      family = "caption_font"
    ),
    plot.caption.position = "plot",
    plot.title.position = "plot",
    plot.margin = margin(5,5,5,5, "mm"),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.major.x = element_line(
      colour = alpha(text_hil, 0.7),
      linewidth = 0.3,
      linetype = 3
    ),
    
    # Axes Lines, Ticks, Text and labels
    axis.line.x = element_line(
      colour = text_hil,
      linewidth = 0.3,
      arrow = arrow(length = unit(5, "mm"))
    ),
    axis.line.y = element_blank(),
    axis.ticks.x = element_line(
      colour = text_hil,
      linewidth = 0.3,
    ),
    axis.ticks.length = unit(5, "mm"),
    axis.ticks.length.y = unit(0, "mm"),
    axis.ticks.y = element_blank(),
    axis.text.x = element_text(
      margin = margin(1,1,1,1, "mm"),
      colour = text_hil
    ),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_text(
      colour = text_hil,
      margin = margin(2,0,0,0, "mm"),
      size = bts
    )
    
  )

ggsave(
  filename = here::here(
    "data_vizs",
    "tidy_scottish_munros.png"
  ),
  plot = g,
  width = 400,
  height = 500,
  units = "mm",
  bg = bg_col
)
```

### Savings the thumbnail for the webpage

```{r}
#| label: save-image

# Saving a thumbnail

library(magick)

# Saving a thumbnail for the webpage
image_read(here::here("data_vizs", 
                      "tidy_scottish_munross.png")) |> 
  image_resize(geometry = "x400") |> 
  image_write(
    here::here(
      "data_vizs", 
      "thumbnails", 
      "tidy_scottish_munros.png"
    )
  )

```

### Session Info

```{r}
#| label: tbl-session-info
#| tbl-cap: "R Packages and their versions used in the creation of this page and graphics"
#| eval: true


pacman::p_load(
  tidyverse,            # All things tidy
  
  scales,               # Nice Scales for ggplot2
  fontawesome,          # Icons display in ggplot2
  ggtext,               # Markdown text support for ggplot2
  showtext,             # Display fonts in ggplot2
  colorspace,           # Lighten and Darken colours

  patchwork             # Composing Plots
)

sessioninfo::session_info()$packages |> 
  as_tibble() |> 
  dplyr::select(package, 
         version = loadedversion, 
         date, source) |> 
  dplyr::arrange(package) |> 
  janitor::clean_names(
    case = "title"
  ) |> 
  gt::gt() |> 
  gt::opt_interactive(
    use_search = TRUE
  ) |> 
  gtExtras::gt_theme_espn()
```
