---
title: "Worldwide Bureaucracy Indicators"
author: "Aditya Dahiya"
date: "last-modified"
subtitle: "Comparison of the salaries of the Government Doctors in different countries"
categories:
  - "#TidyTuesday"
  - "Governance"
image: "tidy_wbi.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/session_presentations/data_vizs.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
---

# All the places (Work in-progress)

For these visualization(s), we are examining the [Worldwide Bureaucracy Indicators](https://datacatalog.worldbank.org/search/dataset/0038132) (WWBI) [dataset](https://blogs.worldbank.org/en/developmenttalk/introducing-worldwide-bureaucracy-indicators) provided by the [World Bank](https://www.worldbank.org/en/home). The WWBI database offers a comprehensive cross-national dataset on public sector employment and wages. Its goal is to bridge an information gap, aiding researchers, development practitioners, and policymakers in gaining a deeper insight into various aspects such as the personnel dimensions of state capability, the public sector's role within the labor market, and the fiscal implications of the public sector wage bill. The dataset is compiled from administrative data and household surveys, complementing existing expert perception-based approaches.

![](tidy_wbi.png){width="1500"}

### **How I made this graphic?**

Loading required libraries, data import & creating custom functions

```{r}
#| label: setup

# Data Import and Wrangling Tools
library(tidyverse)            # All things tidy
library(janitor)              # Cleaning names etc.

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text support for ggplot2
library(showtext)             # Display fonts in ggplot2
library(colorspace)           # Lighten and Darken colours
library(patchwork)            # Combining plots
library(ggbeeswarm)           # For beeswarm plots

# library(ggfx)                 # Outer glow in the map
# library(magick)               # Adding images to plot
# library(ggthemes)             # Themes for ggplot2
# 
# # Mapping tools
# library(rnaturalearth)        # Maps of the World   
# library(sf)                   # All spatial objects in R
# library(geojsonio)            # To read geojson files into R

# Load Data
wwbi_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-04-30/wwbi_data.csv')
wwbi_series <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-04-30/wwbi_series.csv')
wwbi_country <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-04-30/wwbi_country.csv')
```

Exploratory Data Analysis & Data Wrangling

```{r}
#| label: eda

# The indicator we want to display is Public Doctors salary
selected_indicator <- wwbi_series |> 
  filter(str_detect(indicator_name, "Pay compression ratio in public sector, by occupation: Hospital doctor")) |> 
  select(indicator_code) |> 
  pull(indicator_code)

# Names of Countries to display in the graphic
display_countries <- c("India", "United States", "China", 
                       "United Kingdom", "United States", 
                       "Nigeria", "Qatar", "Costa Rica", "Thailand",
                       "Nicaragua", "The Gambia")

df <- wwbi_data |>
  filter(indicator_code == selected_indicator) |> 
  left_join(
    wwbi_country |> 
      select(country_code, 
             short_name, 
             code2 = x2_alpha_code,
             region,
             income_group) |> 
      mutate(code2 = str_to_lower(code2))
  ) |> 
  left_join(wwbi_series) |> 
  select(-indicator_code) |> 
  mutate(
    display_name = if_else(
      short_name %in% display_countries,
      short_name,
      NA
    )
  )

# List of countries with flags in ggflags
flag_cons <- ggflags::lflags |> names()

# Creating a custom y-axis variable and an interval x-axis variable to plot flags

levels_income <- c(
  "Low income",
  "Lower middle income",
  "Upper middle income",
  "High income"
  )

# An intermediate step
df1 <- df |>
  select(-indicator_name) |> 
  filter(code2 %in% flag_cons) |> 
  
  # Roudning to make it easier to plot flags nicely
  mutate(value = round_to_fraction(value, 4)) |> 
  mutate(income_group = fct(income_group, levels = levels_income))
  
df2 <- df1 |> 
  group_by(income_group, value) |> 
  slice_head(n = 6) |> 
  # Geting number of countries in each interval
  count() |> 
  rename(gp_nos = n)
```

**Manually positioning in a sort-of *bee-swarm*:**

I have a vector c(1,2,3,4,5,6). I want to convert it into c(0.08, -0.08, 0.24, 0.24, 0.4, -0.4). You can achieve this transformation manually for now.

```{r}
#| label: manual-positioning

# A position multiplication Factor (to manually create a beeswarm)
position_vector <- seq(-0.4, +0.4, length.out = 6)
position_vector

plotdf <- df1 |> 
  left_join(df2) |> 
  group_by(income_group, value) |>
  arrange(income_group, value) |> 
  mutate(group_num = row_number()) |> 
  mutate(y_jizz = case_when(
    group_num == 1 ~ +0.08,
    group_num == 2 ~ -0.08,
    group_num == 3 ~ +0.24,
    group_num == 4 ~ -0.24,
    group_num == 5 ~ +0.40,
    group_num == 6 ~ -0.40,
  )) |> 
  mutate(y_var = as.numeric(income_group) + y_jizz)

# Labelling income groups - a tibble
df_labels <- tibble(
  x_var = 8.5,
  y_var = (1:4 + 0.25),
  label = paste0(levels_income, " countries"),
  income_group = levels_income
)

```

Visualization Parameters

```{r}
#| label: viz-params


# Font for titles
font_add_google("Bevan",
  family = "title_font"
) 

# Font for the caption
font_add_google("Stint Ultra Condensed",
  family = "caption_font"
) 

# Font for plot text
font_add_google("Josefin Slab",
  family = "body_font"
) 

showtext_auto()

# Background Colour
bg_col <- "grey90"

# Colour for the text
text_col <- "grey20" 

# Colour for highlighted text
text_hil <- "grey30" 

# Annotation colour
ann_col <- "red"

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
```

Annotation Text for the Plot

```{r}
#| label: text-for-plot

plot_title <- "Public Doctors' Salaries"

plot_caption <- paste0(
  "Data: **World Bank:** Worldwide Bureaucracy Indicators", 
  " |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )

plot_subtitle <- glue::glue("Salaries of Government doctors in different countries, compared to a clerk.<br>
Compared to clerks, <b style='color:{ann_col}'>Qatar</b> pays its doctors the least, while <b style='color:{ann_col}'>The Gambia</b> pays the most.
")
```

*Previous Plot / Graphic attempt - using `geom_beeswarm()` - it doesn't work for `geom_flag()`*

```{r}
#| label: beeswarm-plot-not-to-implement

ts = 80

g_base <- ggplot(
  data = df |> filter(!is.na(income_group)),
  mapping = aes(
    x = value,
    y = income_group,
    colour = income_group,
    fill = income_group)
  ) +
  
  # Actual points for the Countries
  geom_point(
    size = 8,
    pch = 1,
    stroke = 1,
    position = position_beeswarm(
      cex = 2.5,
      method = "hex",
      priority = "density",
      corral = "omit",
      corral.width = 1.2
    ),
    alpha = 0.4
  ) +
  
  scale_x_continuous(
    limits = c(0, 8),
    breaks = c(2,3,4,6,7,8)
  ) +
  
  # Labels for the countries and their values
  geom_text(
    aes(
      label = display_name
      ),
    position = position_beeswarm(
      cex = 2.5,
      method = "hex",
      priority = "density",
      corral = "omit",
      corral.width = 1.2
    ),
    lineheight = 0.35,
    size = ts / 5
  ) +
  
  # Basic annotations for the background
  annotate(
    geom = "text",
    label = "Public Doctor's salary is equal to a clerk",
    x = 0.95, 
    y = 4.5,
    angle = 90,
    hjust = 1,
    vjust = 0,
    colour = ann_col,
    alpha = 0.5,
    family = "caption_font",
    size = ts / 3
  ) +
  geom_vline(
    xintercept = 1,
    colour = ann_col,
    linetype = 1,
    linewidth = 0.5,
    alpha = 0.5
  ) +
  annotate(
    geom = "text",
    label = "Public Doctor's salary is 4 times that of a clerk",
    x = 5.05, 
    y = 4.5,
    angle = -90,
    hjust = 0,
    vjust = 0,
    colour = ann_col,
    alpha = 0.5,
    family = "caption_font",
    size = ts / 3
  ) +
  geom_vline(
    xintercept = 5,
    colour = ann_col,
    linetype = 1,
    linewidth = 0.5,
    alpha = 0.5
  ) +
  
  geom_text(
    aes(
      label = paste0(income_group, " countries"),
      x = 8.5
    ),
    hjust ="inward",
    nudge_y = +0.2,
    family = "caption_font",
    size = ts/1.5
  ) +
  
  # Labels
  labs(
    x = "Ratio of Salary of a public sector (Government Doctor) to a clerk in the country",
    y = NULL,
    title = plot_title,
    subtitle = plot_subtitle,
    caption = plot_caption
  ) +
  
  # Themeing customization
  theme_minimal(
    base_family = "body_font",
    base_size = ts
  ) +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    legend.position = "none",
    panel.grid.minor.x = element_blank(),
    plot.caption = element_textbox(
      family = "caption_font",
      colour = text_hil,
      hjust = 0.5
    ),
    plot.title = element_markdown(
      family = "title_font",
      colour = text_hil,
      hjust = 0.5,
      size = 3*ts
    ),
    plot.subtitle = element_markdown(
      family = "body_font",
      colour = text_col,
      hjust = 0.5,
      lineheight = 0.35
    ),
    panel.grid.major.x = element_line(
      linetype = 3,
      linewidth = 0.5,
      colour = "grey75"
    ),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.text.x = element_text(
      colour = text_col,
      hjust = 1, 
      margin = margin(0,0,0,0,"mm")
    ),
    plot.title.position = "plot"
  )



#   
#   geom_flag(
#     mapping = aes(country = code2),
#     size = 4,
#     # pch = 1,
#     position = position_beeswarm(
#       cex = 3,
#       method = "hex",
#       priority = "density",
#       corral = "omit",
#       corral.width = 1.2
#     )
#   )
# 
#   
#   
# 
# 
# # An example label in markdown: Not to use for now
# label = glue::glue("<span style='font-size:9pt; color:black'>{short_name}</span><br><span style='color:{text_col}'>{value}</span>")

```

The Actual Base Plot / Graphic

```{r}
#| label: base-plot


ts = 90

g_base <- ggplot(
  data = plotdf,
  mapping = aes(
    x = value,
    y = y_var,
    colour = income_group)
  ) +
  
  # Points for countries
  ggflags::geom_flag(
    aes(country = code2),
    size = 12
  ) +
  # while building plot, I use geom_point() as a replacement
  # to geom_flag to save plot rendering time
  # geom_point(
  #   size = 8
  # ) +
  
  scale_x_continuous(
    limits = c(0.5, 8.3),
    breaks = 1:8,
    expand = expansion(0)
  ) +
  
  scale_y_continuous(
    limits = c(0.8,  4.5),
    expand = expansion(0)
  ) +
  
  # Labels for the countries and their values
  geom_text(
    aes(label = display_name, 
        y = y_var - 0.1),
    lineheight = 0.35,
    size = ts / 3,
    vjust = 0,
    colour = text_col,
    alpha = 0.7,
    family = "body_font"
  ) +
  
  # Basic annotations for the background
  annotate(
    geom = "text",
    label = "Public Doctor's salary is equal to a clerk",
    x = 0.95, 
    y = 0.9,
    angle = 90,
    hjust = 0,
    vjust = 0,
    colour = ann_col,
    alpha = 0.5,
    family = "caption_font",
    size = ts / 3
  ) +
  geom_vline(
    xintercept = 1,
    colour = ann_col,
    linetype = 1,
    linewidth = 0.5,
    alpha = 0.5
  ) +
  # annotate(
  #   geom = "text",
  #   label = "Public Doctor's salary is 4 times that of a clerk",
  #   x = 5.05, 
  #   y = 4.5,
  #   angle = -90,
  #   hjust = 0,
  #   vjust = 0,
  #   colour = ann_col,
  #   alpha = 0.5,
  #   family = "caption_font",
  #   size = ts / 3
  # ) +
  # geom_vline(
  #   xintercept = 5,
  #   colour = ann_col,
  #   linetype = 1,
  #   linewidth = 0.5,
  #   alpha = 0.5
  # ) +
  
  # Names / Labels for the income groups
  geom_text(
    data = df_labels,
    mapping = aes(
      x = 8.15,
      y = y_var,
      label = label
    ),
    hjust = "inward",
    vjust = 0,
    family = "caption_font",
    size = ts / 1.5,
    colour = text_col,
    alpha = 0.7
  ) +
  
  # Labels
  labs(
    x = "Ratio of Salary of a public sector (Government Doctor) to a clerk in the country",
    y = NULL,
    title = plot_title,
    subtitle = plot_subtitle,
    caption = plot_caption
  ) +
  
  # Themeing customization
  theme_minimal(
    base_family = "body_font",
    base_size = ts
  ) +
  
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    legend.position = "none",
    panel.grid.minor.x = element_blank(),
    plot.caption = element_textbox(
      family = "caption_font",
      colour = text_hil,
      hjust = 0.5
    ),
    plot.title = element_markdown(
      family = "title_font",
      colour = text_hil,
      hjust = 0.5,
      size = 2.5 * ts,
      margin = margin(5,0,2,0, "mm")
    ),
    plot.subtitle = element_markdown(
      family = "body_font",
      colour = text_col,
      hjust = 0.5,
      lineheight = 0.35,
      margin = margin(0,0,0,0, "mm")
    ),
    panel.grid.major.x = element_line(
      linetype = 3,
      linewidth = 0.5,
      colour = "grey75"
    ),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks = element_blank(),
    axis.text.x = element_text(
      colour = text_col,
      hjust = 1, 
      margin = margin(0,0,0,0,"mm")
    ),
    plot.title.position = "plot"
  )



#   
#   geom_flag(
#     mapping = aes(country = code2),
#     size = 4,
#     # pch = 1,
#     position = position_beeswarm(
#       cex = 3,
#       method = "hex",
#       priority = "density",
#       corral = "omit",
#       corral.width = 1.2
#     )
#   )
# 
#   
#   
# 
# 
# # An example label in markdown: Not to use for now
# label = glue::glue("<span style='font-size:9pt; color:black'>{short_name}</span><br><span style='color:{text_col}'>{value}</span>")


```

Savings the graphics

```{r}
#| label: save-image

ggsave(
  filename = here::here("data_vizs", "tidy_wbi.png"),
  plot = g_base,
  width = 400,    # Best Twitter Aspect Ratio = 4:5
  height = 500,   
  units = "mm",
  bg = "white"
)
```
