---
title: "American Idol Data"
author: "Aditya Dahiya"
date: "2024-07-25"
subtitle: "#TidyTuesday American Idol Data"
categories:
  - "#TidyTuesday"
image: "thumbnails/tidy_american_idol.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/session_presentations/data_vizs.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
bibliography: references.bib
---

![........................](tidy_american_idol.png)

### **How I made this graphic?**

Loading libraries & data

```{r}
#| label: setup

# Data Import and Wrangling Tools
library(tidyverse)            # All things tidy

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text support for ggplot2
library(showtext)             # Display fonts in ggplot2
library(colorspace)           # Lighten and Darken colours
library(patchwork)            # Combining plots

# Getting the data
auditions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-23/auditions.csv')
eliminations <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-23/eliminations.csv')
finalists <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-23/finalists.csv')
ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-23/ratings.csv')
seasons <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-23/seasons.csv')
songs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-23/songs.csv')
```

Data Wrangling

```{r}
#| label: eda

plotdf <- ratings |> 
  arrange(season, show_number) |> 
  mutate(id = row_number()) |> 
  select(id, season, show_number, viewers_in_millions,
         weekrank) |> 
  mutate(weekrank = as.numeric(weekrank))

xaxis_df <- plotdf |> 
  group_by(season) |> 
  summarise(
    x_min = min(id),
    x_max = max(id),
    x_mean = (min(id) + max(id)) / 2
  )

  
  
  ggshadow::geom_glowline() +
  ggshadow::geom_glowpoint()

```

Visualization Parameters

```{r}
#| label: viz-params

# Font for titles
font_add_google("Bangers",
  family = "title_font"
) 

# Font for the caption
font_add_google("Saira Extra Condensed",
  family = "caption_font"
) 

# Font for plot text
font_add_google("Martel Sans",
  family = "body_font",
  regular.wt = 300,
  bold.wt = 900
) 

showtext_auto()

# Credits for coffeee palette
mypal 
mypal |> seecolor::print_color()

bg_col <- "white"
text_col <-  "grey10"
text_hil <- "grey25"

bts <- 80

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")

plot_title <- "American Idol viewership"

plot_subtitle <- str_wrap("The popularity of American Idol has been declining over the seasons, and Seasons 4-6 enjoyed highest viewership.", 60)
str_view(plot_subtitle)

plot_caption <- paste0(
  "**Data:** _#TidyTuesday_ &  ", 
  " |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )

rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)
```

The static plot:

```{r}
#| label: static-plot

g <- plotdf |> 
  ggplot(
    mapping = aes(
      x = id, 
      y = viewers_in_millions,
      colour = as_factor(season)
    )
  ) +
  geom_line() +
  geom_point() +
  geom_segment(
    data = xaxis_df,
    mapping = aes(
      x = x_min,
      xend = x_max,
      y = 0
    ),
    arrow = arrow(
      ends = "both", 
      angle = 90,
      length = unit(2, "mm")
    )
  ) +
  geom_text(
    data = xaxis_df,
    mapping = aes(
      y = -2,
      x = x_mean,
      label = season
    ),
    vjust = 1
  ) +

    # Labels for the plot
  labs(
    title = plot_title,
    subtitle = plot_subtitle,
    caption = plot_caption,
    x = NULL, y = NULL
  ) +

  # Theme Elements
  theme_minimal(
    base_size = bts,
    base_family = "body_font"
  ) +
  
  theme(
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    axis.text.x.bottom = element_blank(),
    axis.text.x.top = element_blank(),
    axis.title = element_text(
      colour = text_hil,
      margin = margin(0,0,0,0, "mm")
    ),
    axis.text.y = element_text(
      size = bts * 1.5,
      colour = text_hil,
      margin = margin(0,0,0,0, "mm"),
      face = "bold"
    ),
    plot.background = element_rect(
      fill = bg_col,
      colour = "transparent"
    ),
    panel.background = element_rect(
      fill = "transparent",
      colour = "transparent"
    ),
    plot.caption = element_textbox(
      colour = text_hil,
      family = "caption_font",
      hjust = 0.5
    ),
    plot.title = element_text(
      hjust = 0.5,
      size = 4.2 * bts,
      colour = text_hil,
      margin = margin(10,0,0,0, "mm"),
      family = "title_font"
    ),
    plot.subtitle = element_text(
      colour = text_hil,
      size = 1.7 * bts,
      hjust = 0.5, 
      lineheight = 0.3,
      margin = margin(7,0,3,0, "mm"),
      face = "italic"
    ),
    plot.margin = margin(10,10,10,10, "mm")
  )
```

Annotation

```{r}
#| label: annotate

g_full <- g +
  inset_element(
    p = g_inset,
    left = 0.2, right = 0.4,
    top = 0.3, bottom = 0,
    clip = FALSE,
    align_to = "panel"
  ) +
  plot_annotation(
    theme = theme(
      plot.background = element_rect(
        fill = "transparent", colour = "transparent"
      ),
      panel.background = element_rect(
        colour = "transparent", fill = "transparent"
      )
    )
  )
```

Savings the graphics

```{r}
#| label: save-image
ggsave(
  filename = here::here("data_vizs", "tidy_american_idol.png"),
  plot = g_full,
  width = 400,    # Best Twitter Aspect Ratio = 5:4
  height = 500,   
  units = "mm",
  bg = bg_col
)

library(magick)
# Saving a thumbnail for the webpage
image_read(here::here("data_vizs", "tidy_american_idol.png")) |> 
  image_resize(geometry = "400") |> 
  image_write(here::here("data_vizs", "thumbnails", "tidy_english_football.png"))

```
