---
title: "Beeswarm plot on Age Profile of 2025 Papal Conclave"
author: "Aditya Dahiya"
date: "2025-04-25"
subtitle: "Delving into the demographics of the 2025 Papal Conclave electors, this visualization, crafted with the elegant aesthetics of {ggplot2} and the non-overlapping precision of {ggbeeswarm}, paired with image integration via {ggimage} and web scraping powered by {rvest}, offers a unique perspective on the ages and global representation of the cardinals poised to shape the Catholic Church's future."
categories:
  - "Geopolitics"
  - "Images"
  - "Web Scraping"
  - "{rvest}"
  - "{ggbeeswarm}"
  - "{ggimage}"
image: "thumbnails/viz_papal_conclave_2025_2.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/projects_presentations/data_vizs.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
bibliography: references.bib
comments:
  giscus: 
    repo: Aditya-Dahiya/projects_presentations
---

### Who Will Choose the Next Pope?

![A visual snapshot of the College of Cardinals eligible to elect the next Pope in the 2025 conclave. This beeswarm plot beautifully arranges each cardinal by age, preventing overlap while clearly displaying the distribution. Each circle represents a cardinal, colored by their ecclesiastical order (bishop, priest, or deacon), and is accompanied by their portrait, name, and country. The clustering effect of the beeswarm layout, powered by the ggbeeswarm package and its position_beeswarm() function, reveals a predominantly older demographic within the electors, highlighting the age range from 45 to 79.](viz_papal_conclave_2025_2.png){#fig-1}

### About the Data

The data for this visualization originates from the Wikipedia article [*Cardinal electors in the 2025 papal conclave*](https://en.wikipedia.org/wiki/Cardinal_electors_in_the_2025_papal_conclave), which provides a comprehensive and up-to-date list of the 135 cardinal electors eligible to participate in the upcoming conclave following the death of Pope Francis on April 21, 2025. This resource compiles information from official Vatican sources, including the Holy See Press Office and the *Annuarium Statisticum Ecclesiae*, and details each cardinal's name, country, date of birth, ecclesiastical order (bishop, priest, or deacon), date of appointment (consistory), and the pope who appointed them. Notably, it also tracks changes in eligibility, such as Cardinal Antonio Ca√±izares Llovera's decision not to attend due to health reasons, reducing the number of expected participants to 134. The dataset reflects the global composition of the College of Cardinals, with representation from 71 countries across six continents, and highlights that Pope Francis appointed 108 of the 135 electors, underscoring his significant influence on the Church's future leadership. ([Cardinal electors in the 2025 papal conclave](https://en.wikipedia.org/wiki/Cardinal_electors_in_the_2025_papal_conclave?utm_source=chatgpt.com))

### How I made this graphic?

To craft this graphic illustrating the age profile of the 2025 Papal Conclave electors, I leveraged the power of several R packages within the **tidyverse** ecosystem. First, I used the `rvest` package, specifically the `read_html()` and `html_table()` functions, to scrape the crucial data on cardinal electors directly from the linked [Wikipedia article](https://en.wikipedia.org/wiki/Cardinal_electors_in_the_2025_papal_conclave). After cleaning and transforming this data using functions from `dplyr` and `lubridate`, the core visualization was built with `ggplot2`. To arrange the cardinal portraits and age points in a visually appealing and non-overlapping manner, I employed the `ggbeeswarm` package, utilizing its `geom_beeswarm()` function with a custom `position_beeswarm()` function set to the `"center"` method and a small `cex` value for fine-tuned spacing. Each cardinal's image, sourced using a custom function involving Google's Custom Search API and processed with the `magick` and `ggimage` packages, was then layered onto the plot using `geom_image()`. The ecclesiastical order of each cardinal was represented by color, managed through `scale_colour_manual()` with a custom palette from `paletteer`. Finally, textual elements, including names, countries, titles, and captions with linked social media handles, were added using standard `ggplot2` geoms and the `ggtext` package for enhanced formatting, while custom fonts were incorporated via the `showtext` package.

### Loading required libraries

```{r}
#| label: setup

pacman::p_load(
  tidyverse,            # All things tidy
  
  scales,               # Nice Scales for ggplot2
  fontawesome,          # Icons display in ggplot2
  ggtext,               # Markdown text support for ggplot2
  showtext,             # Display fonts in ggplot2
  colorspace,           # Lighten and Darken colours
  
  magick,               # Download images and edit them
  ggimage,              # Display images in ggplot2
  patchwork,            # Composing Plots
  rvest,                # Web-Scraping
  ggbeeswarm            # Beeswarm Plots
)


# URL of the Wikipedia page
# Read the HTML content of the page
page <- read_html("https://en.wikipedia.org/wiki/Cardinal_electors_in_the_2025_papal_conclave")

# Extract the first table (which contains the list of cardinals)
table_df <- page |> 
  html_table(fill = TRUE)
table_df <- table_df[[1]]

rm(page)

```

### Visualization Parameters

```{r}
#| label: viz-params


# Font for titles
font_add_google("Saira",
  family = "title_font"
) 

# Font for the caption
font_add_google("Saira Extra Condensed",
  family = "caption_font"
) 

# Font for plot text
font_add_google("Saira Condensed",
  family = "body_font"
) 

showtext_auto()

# cols4all::c4a_gui()

mypal <- paletteer::paletteer_d("NineteenEightyR::sunset2")[c(5,3,1)]

# A base Colour
bg_col <- "white"
seecolor::print_color(bg_col)

# Colour for highlighted text
text_hil <- "grey30"
seecolor::print_color(text_hil)

# Colour for the text
text_col <- "grey30"
seecolor::print_color(text_col)

line_col <- "grey30"

# Define Base Text Size
bts <- 90

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
plot_caption <- paste0(
  "**Data:** Wikipedia", 
  " |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )
rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)

# Add text to plot-------------------------------------------------
plot_title <- "Age Profile of the 2025 Papal Conclave Electors" |> str_wrap(12)
str_view(plot_title)

plot_subtitle <- "Cardinals eligible to vote in the 2025 conclave span from age 45 to 79, but skew older. Each circle is a cardinal, colored by ecclesiastical order, with names and countries below." |> 
  str_wrap(25)
str_view(plot_subtitle)
```

### Get temporary files on images of each Cardinal

```{r}
# Get a custom google search engine and API key
# Tutorial: https://developers.google.com/custom-search/v1/overview
# Tutorial 2: https://programmablesearchengine.google.com/

# From:https://developers.google.com/custom-search/v1/overview
# google_api_key <- "LOAD YOUR GOOGLE API KEY HERE"

# From: https://programmablesearchengine.google.com/controlpanel/all
# my_cx <- "GET YOUR CUSTOM SEARCH ENGINE ID HERE"


# Improved function to download and save food images
download_cardinal_potrait <- function(i) {
  
  google_api_key <- google_api_key
  my_cx <- my_cx
  
  # Build the API request URL with additional filters
  url <- paste0(
    "https://www.googleapis.com/customsearch/v1?q=",
    URLencode(paste0("Cardinal ", cardinals$name[i], 
                     " photo")),
    "&cx=", my_cx,
    "&searchType=image",
    "&key=", google_api_key,
    # "&imgSize=large",       # Restrict to medium-sized images
    # "&imgType=photo",
    "&num=1"                 # Fetch only one result
  )
  
  # Make the request
  response <- httr::GET(url)
  # if (response$status_code != 200) {
  #   warning("Failed to fetch data for Cardinal: ", 
  #           cardinals$name[i])
  #   return(NULL)
  # }
  
  # Parse the response
  result <- httr::content(response, "parsed")
  
  # Extract the image URL
  image_url <- result$items[[1]]$link
  
  # Process the image
  magick::image_read(image_url) |> 
    image_resize("x300") |> 
    
    # Crop the image into a circle 
    # (Credits: https://github.com/doehm/cropcircles)
    cropcircles::circle_crop(
      border_colour = "black",
      border_size = 0
    ) |>
    
    image_read() |> 
    image_background(color = "transparent") |> 
    
    image_resize("x300") |> 
    
    # Save or display the result
    image_write(
      here::here(
        "data_vizs", 
        paste0("temp_cardinals_", i, ".png")
        )
    )
}

# Iterate and download images
for (i in 1:nrow(cardinals)) {
  download_cardinal_potrait(i)
}

problem_numbers <- c(5, 6,  7, 16, 32, 36, 73)
```

### Exploratory Data Analysis and Wrangling

```{r}
#| label: eda

# Ensure the table is a tibble
cardinals <- as_tibble(table_df) |> 
  janitor::clean_names() |> 
  mutate(
    # Extract the date string from raw data
    born = str_extract(born, "^\\d{1,2} \\w+ \\d{4}"),
    # Convert to Date format
    born = dmy(born),  
    
    # Calculate age for each cardinal in years
    age = time_length(
      interval(
        start = born, 
        end = today()), 
        unit = "years") |> 
      floor()

  ) |> 
  mutate(
    date_consistory = str_extract(
      consistory, "^\\d{1,2} \\w+ \\d{4}"
      ) |>  dmy(),
    pope_consistory = str_remove(
      consistory, "^\\d{1,2} \\w+ \\d{4}"
      ) |>  str_trim(),
    pope_consistory = paste0("Pope ", pope_consistory),
    .keep = "unused"
  ) |> 
  select(-ref) |> 
  mutate(
    country = str_remove_all(country, "\\[.*?\\]"),
    order = fct(order, levels = c("CB", "CP", "CD"))
  )

# A temporary tibble for nice y-axis

labels_y <- cardinals |> 
  distinct(age) |> 
  arrange(age) |> 
  mutate(labels_age = row_number())

labels_col <- c("cardinal bishops", "cardinal priests", "cardinal deacons") |> 
  str_to_title()

plotdf1 <- cardinals |> 
  mutate(
    x_var = ((rank - 1) %% 12) + 1,
    y_var = 12 - ((rank - 1) %/% 12),
    image_var = paste0("data_vizs/temp_cardinals_", rank, ".png")
  ) |> 
  left_join(labels_y)


```

### The Plot

```{r}
#| label: base-plot

custom_position <- function(...){
  position_beeswarm(
    method = "center",
    cex = 0.01
  )
}

g <- plotdf1 |> 
  ggplot(
    mapping = aes(
      x = 1, 
      y = labels_age,
      group = 1
    )
  ) +
  ggimage::geom_image(
    mapping = aes(image = image_var),
    size = 0.02,
    position = custom_position()
  ) +
  geom_point(
    size = 11.5,
    mapping = aes(colour = order),
    position = custom_position(),
    pch = 21,
    fill = NA,
    stroke = 2.5
  ) +
  geom_text(
    mapping = aes(
      colour = order, 
      label = paste0(
        str_extract(name, "^\\S+(?:\\s+\\S+)?"), 
        "\n(", country, ") "
      ),
      y = labels_age - 0.32
    ),
    position = custom_position(),
    family = "caption_font",
    hjust = 0.5,
    vjust = 1,
    lineheight = 0.25,
    size = bts / 10,
    colour = text_col
  ) +
  annotate(
    geom = "label",
    label = plot_title,
    x = Inf,
    y = labels_y |> filter(age == 72) |> pull(labels_age),
    family = "body_font",
    size = bts * 0.9,
    hjust = 1,
    vjust = 1,
    lineheight = 0.3,
    colour = text_hil,
    label.padding = unit(0.2, "lines"),
    label.size = NA,
    fill = NA
  ) +
  annotate(
    geom = "label",
    label = plot_subtitle,
    x = Inf,
    y = labels_y |> filter(age == 62) |> pull(labels_age),
    family = "body_font",
    size = bts / 2.2,
    hjust = 1,
    vjust = 1,
    lineheight = 0.35,
    colour = text_hil,
    label.padding = unit(0.2, "lines"),
    label.size = NA,
    fill = NA
  ) +
  scale_y_continuous(
    breaks = labels_y$labels_age,
    labels = labels_y$age,
    oob = scales::squish,
    expand = expansion(c(0.02, 0.03))
  ) +
  scale_colour_manual(
    values = mypal,
    labels = labels_col
    ) +
  coord_cartesian(
    clip = "off"
  ) +
  labs(
    caption = plot_caption,
    colour = str_wrap("The College of Cardinals is divided into three orders, with precedence in that sequence:", 25),
    y = "Age of the Cardinal"
  ) +
  theme_minimal(
    base_family = "body_font",
    base_size = bts
  ) +
  theme(
    
    # Overall
    plot.margin = margin(5,5,10,5, "mm"),
    plot.title.position = "plot",
    panel.background = element_rect(
      fill = NA, colour = NA
    ),
    
    text = element_text(
      colour = text_hil,
      lineheight = 0.3,
      hjust = 0.5
    ),
    
    # Labels and Strip Text
    plot.title = element_text(
      colour = text_hil,
      margin = margin(5,0,2,0, "mm"),
      size = bts * 2.2,
      lineheight = 0.3,
      hjust = 0.5,
      face = "bold"
    ),
    plot.caption = element_textbox(
      margin = margin(-10,0,0,0, "mm"),
      hjust = 1,
      colour = text_hil,
      size = 0.6 * bts,
      family = "caption_font"
    ),
    plot.caption.position = "plot",
    
    # Legend
    legend.position = "inside",
    legend.position.inside = c(0.02, 0.02),
    legend.justification = c(0, 0),
    legend.direction = "vertical",
    legend.margin = margin(1,1,1,1, "mm"),
    legend.box.margin = margin(0,0,0,0, "mm"),
    legend.title.position = "top",
    legend.title = element_text(
      margin = margin(0,0,7,0, "mm"),
      hjust = 0
    ),
    legend.text = element_text(
      margin = margin(4,4,4,2, "mm"),
      size = bts * 1.2,
      hjust = 0
    ),
    legend.text.position = "right",
    legend.background = element_rect(
      fill = alpha(bg_col, 0.7),
      colour = NA
    ),
    
    # Grid
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.major.y = element_line(
      linewidth = 0.3,
      colour = darken(bg_col, 0.5),
      linetype = 3
    ),
    panel.grid.minor.y = element_blank(),
    
    # Axes
    axis.text.x = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.length.x = unit(0, "mm"),
    axis.ticks.length.y = unit(0, "mm"),
    axis.line.y = element_line(
      colour = text_hil,
      linewidth = 0.8,
      arrow = arrow(length = unit(5, "mm"))
    ),
    axis.text.y = element_text(
      margin = margin(0,2,0,0, "mm")
    ),
    axis.title.y = element_text(
      hjust = 0.5,
      margin = margin(0,2,0,0, "mm")
    )
  )

ggsave(
  filename = here::here(
    "data_vizs",
    "viz_papal_conclave_2025_2.png"
  ),
  plot = g,
  width = 400,
  height = 500,
  units = "mm",
  bg = bg_col
)
```

### Savings the thumbnail for the webpage

```{r}
#| label: save-image

# Saving a thumbnail

library(magick)

# Saving a thumbnail for the webpage
image_read(here::here("data_vizs", 
                      "viz_papal_conclave_2025_2.png")) |> 
  image_resize(geometry = "x400") |> 
  image_write(
    here::here(
      "data_vizs", 
      "thumbnails", 
      "viz_papal_conclave_2025_2.png"
    )
  )

```

### Session Info

```{r}
#| label: tbl-session-info
#| tbl-cap: "R Packages and their versions used in the creation of this page and graphics"
#| eval: true


pacman::p_load(
  tidyverse,            # All things tidy
  
  scales,               # Nice Scales for ggplot2
  fontawesome,          # Icons display in ggplot2
  ggtext,               # Markdown text support for ggplot2
  showtext,             # Display fonts in ggplot2
  colorspace,           # Lighten and Darken colours
  
  magick,               # Download images and edit them
  ggimage,              # Display images in ggplot2
  patchwork,            # Composing Plots
  rvest,                # Web-Scraping
  ggbeeswarm            # Beeswarm Plots
)


sessioninfo::session_info()$packages |> 
  as_tibble() |> 
  select(package, 
         version = loadedversion, 
         date, source) |> 
  arrange(package) |> 
  janitor::clean_names(
    case = "title"
  ) |> 
  gt::gt() |> 
  gt::opt_interactive(
    use_search = TRUE
  ) |> 
  gtExtras::gt_theme_espn()
```
