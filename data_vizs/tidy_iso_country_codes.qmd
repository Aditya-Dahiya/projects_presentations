---
title: "tidy_iso_country_codes"
author: "Aditya Dahiya"
date: "2024-11-07"
subtitle: "................................."
categories:
  - "#TidyTuesday"
  - "Governance"
  - "Geocomputation"
image: "thumbnails/tidy_iso_country_codes.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/projects_presentations/data_vizs.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
bibliography: references.bib
comments:
  giscus: 
    repo: Aditya-Dahiya/projects_presentations
---

The dataset focuses on the ISO 3166 standard, which assigns codes to countries, their subdivisions, and former territories. The ISO 3166 standard, developed by the International Organization for Standardization (ISO), defines codes that help standardize country names, administrative divisions, and historical country names across databases and applications. This dataset, derived from the {[`ISOcodes`](https://cran.r-project.org/package=ISOcodes)} R package, comprises three tables:

1.  `countries` (ISO 3166-1),

2.  `country_subdivisions` (ISO 3166-2), and

3.  `former_countries` (ISO 3166-3).

These tables facilitate the exploration of country and subdivision identifiers, such as 2- and 3-letter country codes, subdivision types (e.g., provinces or states), and details on formerly recognized countries and their withdrawal dates. By using functions like the `quick_map()` from the [{`countries`}](https://fbellelli.github.io/countries/reference/quick_map.html) package, one can visualize country codes and subdivisions on maps.

The dataset offers a valuable resource for understanding global administrative regions, analyzing patterns in subdivisions, and historical changes in geopolitical entities (ISO, 2024; Wikipedia, n.d.)

![...................................................](tidy_iso_country_codes.png)

### **How I made this graphic?**

Loading required libraries, data import & creating custom functions.

```{r}
#| label: setup

# Data Import and Wrangling Tools
library(tidyverse)            # All things tidy

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text support for ggplot2
library(showtext)             # Display fonts in ggplot2
library(colorspace)           # Lighten and Darken colours

# Geocomputation
library(sf)                   # Simple Features in R

# Load the data

countries <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-11-12/countries.csv')
# country_subdivisions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-11-12/country_subdivisions.csv')
# former_countries <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-11-12/former_countries.csv')
```

Visualization Parameters

```{r}
#| label: viz-params


# Font for titles
font_add_google("Saira",
  family = "title_font"
) 

# Font for the caption
font_add_google("Saira Extra Condensed",
  family = "caption_font"
) 

# Font for plot text
font_add_google("Saira Condensed",
  family = "body_font"
) 

showtext_auto()

# A base Colour
base_col <- "white"
bg_col <- darken(base_col, 0.2)
seecolor::print_color(bg_col)

# Colour for the text
text_col <- darken(bg_col, 0.9)
seecolor::print_color(text_col)

# Colour for highlighted text
text_hil <- darken(bg_col, 0.7)
seecolor::print_color(text_hil)

# Define Base Text Size
bts <- 90 

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")

# Add text to plot--------------------------------------------------------------
plot_title <- "......................."


plot_subtitle <- str_wrap("............................", 130)

plot_caption <- paste0(
  "**Data:** ............................", 
  " |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )

rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)
```

Exploratory Data Analysis and Wrangling

```{r}
#| label: data-wrangling

df <- rnaturalearth::ne_countries(
  returnclass = "sf",
  scale = "small"
  ) |> 
  select(admin, iso_a2, iso_a3, geometry) |> 
  left_join(
    countries |> 
      rename(
        iso_a2 = alpha_2,
        iso_a3 = alpha_3
      ) |> 
      select(iso_a2, iso_a3)
  )

ggplot(df) +
  geom_sf() +
  geom_sf_text(
    mapping = aes(
      label = iso_a3
    ),
    size = 2
  ) 
```

The Base Plot

```{r}
#| label: base-plot



ggsave(
  filename = here::here(
    "data_vizs",
    "tidy_iso_country_codes.png"
  ),
  plot = g,
  width = 400,
  height = 500,
  units = "mm",
  bg = bg_col
)

```

Savings the thumbnail for the webpage

```{r}
#| label: save-image

# Saving a thumbnail

library(magick)
# Saving a thumbnail for the webpage
image_read(here::here("data_vizs", 
                      "tidy_iso_country_codes.png")) |> 
  image_resize(geometry = "400") |> 
  image_write(
    here::here(
      "data_vizs", 
      "thumbnails", 
      "tidy_iso_country_codes.png"
    )
  )
```

Session Info

```{r}
#| label: tbl-session-info
#| tbl-cap: "R Packages and their versions used in the creation of this page and graphics"
#| eval: true


sessioninfo::session_info()$packages |> 
  as_tibble() |> 
  select(package, 
         version = loadedversion, 
         date, source) |> 
  arrange(package) |> 
  janitor::clean_names(
    case = "title"
  ) |> 
  gt::gt() |> 
  gt::opt_interactive(
    use_search = TRUE
  ) |> 
  gtExtras::gt_theme_espn()
```
