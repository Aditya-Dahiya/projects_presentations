---
title: "Global Airports and Flights"
author: "Aditya Dahiya"
date: "2024-06-19"
subtitle: "Global Airports, Busiest Airports, Longest Flights"
categories:
  - "Maps"
  - "A4 Size Viz"
image: "thumbnails/airports_flights.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/session_presentations/data_vizs.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
---

### **How I made this graphic?**

Loading required libraries, data import & creating custom functions.

```{r}
#| label: setup

# Data Import and Wrangling Tools
library(tidyverse)            # All things tidy

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text support for ggplot2
library(showtext)             # Display fonts in ggplot2
library(colorspace)           # Lighten and Darken colours
library(ggthemes)             # Themes for ggplot2
library(patchwork)            # Combining plots

# Mapping tools
library(sf)                   # All spatial objects in R
library(airportr)             # Airports Data for the world
library(rnaturalearth)        # World Map

# Data on Airports: R Package airportr
# https://cran.r-project.org/web/packages/airportr/vignettes/Introduction_to_Airportr.html  


```

Get World Map and Map of India

```{r}
#| label: world-and-india-map


```

Data Analysis, Wrangling and web-scraping for additional datapoints

```{r}
#| label: eda-finalize-data


# Names of airports around the world
df <- airportr::airports |> 
  janitor::clean_names() |> 
  select(name, iata, city, country, 
         cc2 = country_code_alpha_2, latitude,
         lat = latitude, lon = longitude) |> 
  rename(airport = name) |> 
  mutate(latitude = lat, longitude = lon) |> 
  st_as_sf(coords = c("lon", "lat"), crs = 4326)


# List of 10 longest flights in the world
longest_flights <- tibble(
  from = c("JFK", "EWR", "AKL", "LHR", "DFW",
           "AKL", "AKL", "LAX", "BLR", "IAH"),
  to = c("SIN", "SIN", "DOH", "PER", "MEL",
         "JFK", "DXB", "SIN", "SFO", "SYD"),
  airlines = c("Singapore Airlines", "Singapore Airlines",
               "Qatar Airways", "Qantas Airways",
               "Qantas Airways", "Air New Zealand",
               "Emirates", "Singapore Airlines", 
               "Air India", "United Airlines"),
  distance = c(15332, 15329, 14526, 14499, 14468,
               14209, 14193, 14096, 13982, 13829)
)


# Extracting the busiest airports in the world
library(rvest)
# Define the URL of the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_busiest_airports_by_passenger_traffic"
# Read the HTML content of the page and
# Extract the table with the 2023 statistics
busiest_airports <- read_html(url) |> 
  html_node(xpath = '//*[@id="mw-content-text"]/div[1]/table[1]') %>% 
  html_table(fill = TRUE) |> 
  as_tibble() |> 
  janitor::clean_names() |> 
  separate_wider_delim(
    cols = code_iata_icao,
    delim = "/",
    names = c("iata", "icao")
  ) |> 
  select(-rankchange, -percent_change) |> 
  mutate(totalpassengers = parse_number(totalpassengers))


# Plotting the longest routes in the world
longest_routes <- longest_flights |> 
  left_join(df |> select(from = iata, 
                         from_lat = latitude, 
                         from_lon = longitude) |> 
              as_tibble() |> 
              select(-geometry)) |> 
  left_join(df |> select(to = iata, 
                         to_lat = latitude, 
                         to_lon = longitude) |> 
              as_tibble() |> 
              select(-geometry))

longest_route_airports <- unique(longest_routes$from, longest_routes$to)


# Technique Credits: https://github.com/xmc811/flightplot/blob/master/R/main.R
# Credits: Mingchu Xu
# https://www.linkedin.com/in/mingchu-xu-467a0946/
# On Twitter: @xmc811
routes <- geosphere::gcIntermediate(
  p1 = longest_routes |> select(from_lon, from_lat),
  p2 = longest_routes |> select(to_lon, to_lat),
  n = 1000,
  breakAtDateLine = TRUE,
  addStartEnd = TRUE,
  sp = TRUE) |> 
  sf::st_as_sf()

# Test Plot
# ggplot() +
#   geom_sf(
#     data = ne_countries(returnclass = "sf") |> 
#       filter(sovereignt != "Antarctica"),
#     fill  = "white"
#   ) +
#   geom_sf(
#     data = routes
#   ) +
#   coord_sf(crs = "ESRI:54030") +
#   ggthemes::theme_map()

# Joining Airports Dataset with the busiest airports dataset
plotdf <- df |> 
  left_join(busiest_airports) |> 
  mutate(
    busiest = iata %in% busiest_airports$iata,
    longest = iata %in% longest_route_airports,
    alpha_var = iata %in% c(busiest_airports$iata,
                        longest_route_airports)
  ) |> 
  mutate(totalpassengers = replace_na(totalpassengers, 1e7))
```

Visualization Parameters

```{r}
#| label: viz-params


# Font for titles
font_add_google("Cormorant Upright",
  family = "title_font"
) 

# Font for the caption
font_add_google("Saira Extra Condensed",
  family = "caption_font"
) 

# Font for plot text
font_add_google("Marcellus",
  family = "body_font"
) 

showtext_auto()

# Background Colour
bg_col <- "white"

# Colour for the text using FAA's offical website colour
text_col <- "#09283c"  

# Colour for highlighted text
text_hil <- "#15396c"

# Define Base Text Size
ts <- 40 

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
```

Plot Text

```{r}
#| label: plot-text

plot_title <- ""

plot_caption <- paste0(
  "**Data:** ", 
  " |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )

plot_subtitle <- str_wrap(
  "", 
  width = 110
  )

text_annotation_1 <- "About the Datasets: "
```

Base Plot

```{r}
#| label: main-dataviz

g_base

# Final Plot: A Composite world map with all Airports and 
# the busiest Airports in big size (with name and annual passengers)
# And, in a different colour, the 10 longest flights



ggplot() +
  geom_sf(
    data = ne_countries(returnclass = "sf") |> 
      filter(sovereignt != "Antarctica"),
    fill  = "white"
  ) +
  geom_sf(
    data = plotdf,
    mapping = aes(
      colour = busiest,
      size = alpha_var,
      alpha = alpha_var
    ),
    pch = 20
  ) +
  geom_sf(
    data = routes,
    alpha = 0.5,
    linewidth = 1,
    colour = "darkgrey"
  ) +
  scale_alpha_manual(values = c(0.2, 0.5)) +
  scale_size_manual(values = c(1, 3)) +
  scale_colour_manual(values = c("black", "red")) +
  coord_sf(crs = "ESRI:54030") +
  ggthemes::theme_map()

```

Add-ons: Insets and annotations

```{r}
#| label: insets


# QR Code for the plot
url_graphics <- paste0(
  "https://aditya-dahiya.github.io/projects_presentations/data_vizs/",
  # The file name of the current .qmd file
  "nyc_air_obstacles",         
  ".html"
)
# remotes::install_github('coolbutuseless/ggqr')
# library(ggqr)
plot_qr <- ggplot(
  data = NULL, 
  aes(x = 0, y = 0, label = url_graphics)
  ) + 
  ggqr::geom_qr(
    colour = text_hil, 
    fill = bg_col,
    size = 0.65
    ) +
  coord_fixed() +
  theme_void() +
  theme(plot.background = element_rect(
    fill = NA, 
    colour = NA
    )
  )

```

Compiling Final Plot

```{r}
#| label: patchwork

g <- g_base +
  
  # Add inset to the plot
  inset_element(
    p = g2, 
    left = -0.12, 
    right = 0.22,
    bottom = 0.75,
    top = 1, 
    align_to = "plot",
    clip = TRUE
  ) +
  
  # Add QR Code to the plot
  inset_element(
    p = plot_qr, 
    left = 0.9, 
    right = 1,
    bottom = -0.33,
    top = 0.02, 
    align_to = "plot",
    clip = TRUE
  ) +
  
  # Basix Plot Annotations
  plot_annotation(
    theme = theme(
      plot.background = element_rect(
        fill = bg_col, 
        colour = NA, 
        linewidth = 0
      )
    )
  )

```

Savings the graphics

```{r}
#| label: save-image

ggsave(
  filename = here::here("data_vizs", "a4_airports_flights.png"),
  plot = g,
  width = 210,    # Default A4 size page
  height = 297,   # Default A4 size page
  units = "mm",
  bg = bg_col
)


library(magick)
# Saving a thumbnail for the webpage
image_read(here::here("data_vizs", "a4_airports_flights.png")) |> 
  image_resize(geometry = "400") |> 
  image_write(here::here("data_vizs", "thumbnails", 
                         "airports_flights.png"))

```
