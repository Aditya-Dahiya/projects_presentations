---
title: "Exploring Chess Game Dataset on Lichess.org"
author: "Aditya Dahiya"
date: "2024-09-17"
subtitle: "Exploring Chess Game Dataset on Lichess.org"
categories:
  - "#TidyTuesday"
image: "thumbnails/tidy_li_chess.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/projects_presentations/data_vizs.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
bibliography: references.bib
---

![tidy_li_chess](tidy_li_chess.png){#fig-1}

### **How I made this graphic?**

Loading libraries & data

```{r}
#| label: setup

# Data Import and Wrangling Tools
library(tidyverse)            # All things tidy

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text support for ggplot2
library(showtext)             # Display fonts in ggplot2
library(colorspace)           # Lighten and Darken colours
library(seecolor)             # To print and view colours
library(patchwork)            # Combining plots
library(waffle)               # Waffle Charts in R

# Getting the data
chess <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-10-01/chess.csv')
```

Data Wrangling and EDAgeom_abline( slope = 1, intercept = 0, linetype = 3 ) +

```{r}
#| label: eda-data

# object.size(chess) / 1e6
# 
# chess |> 
#   mutate(duration = end_time - start_time) |>
#   ggplot(aes(duration)) +
#   geom_histogram(bins = 500) +
#   scale_x_log10()
# 
# most_common_openings <- chess |> 
#   count(opening_name, sort = T) |> 
#   slice_max(order_by = n, n = 10) |> 
#   # filter(n > 100) |> 
#   pull(opening_name)
# 
# chess |> 
#   filter(opening_name %in% most_common_openings) |> 
#   group_by(opening_name) |> 
#   count(victory_status) |> 
#   ggplot(
#     mapping = aes(
#       x = n,
#       y = opening_name,
#       fill = victory_status
#     )
#   ) +
#   geom_col(
#     position = "fill"
#   )
# 
# 
# chess |> 
#   filter(opening_name %in% most_common_openings) |> 
#   ggplot(
#     aes(
#       x = turns,
#       colour = opening_name
#     )
#   ) +
#   geom_density()
# 
# chess |> 
#   filter(opening_name %in% most_common_openings) |> 
#   filter(winner %in% c("black", "white")) |> 
#   mutate(
#     rating_diff = case_when(
#       winner == "black" ~ black_rating - white_rating,
#       winner == "white" ~ white_rating - black_rating,
#       .default = NA
#     )
#   ) |> 
#   ggplot(
#     mapping = aes(
#       x = rating_diff,
#       colour = opening_name
#     )
#   ) +
#   geom_density()
#   
# 
# chess |> 
#   # filter(opening_name %in% most_common_openings) |> 
#   filter(winner %in% c("black", "white")) |> 
#   mutate(
#     rating_diff = case_when(
#       winner == "black" ~ black_rating - white_rating,
#       winner == "white" ~ white_rating - black_rating,
#       .default = NA
#     )
#   ) |> 
#   group_by(opening_name) |> 
#   summarise(
#     rating_diff = mean(rating_diff > 0),
#      n = n()
#   ) |> 
#   filter(n > 50) |> 
#   arrange(rating_diff)
# 
# chess |> 
#   pull(turns) |> 
#   summary()



df1 <- chess |> 
  filter(rated == TRUE) |> 
  mutate(
    winner_rating = case_when(
      winner == "black" ~ black_rating,
      winner == "white" ~ white_rating,
      .default = NA
    ),
    loser_rating = case_when(
      winner == "black" ~ white_rating,
      winner == "white" ~ black_rating,
      .default = NA
    )
  )

df2 <- df1 |> 
  mutate(
    quadrant = case_when(
      (winner_rating > 1500 & loser_rating < 1500) ~ "a",
      (winner_rating > 1500 & loser_rating > 1500) ~ "b",
      (winner_rating < 1500 & loser_rating > 1500) ~ "c",
      (winner_rating < 1500 & loser_rating < 1500) ~ "d",
      .default = NA
    )
  ) |> 
  group_by(quadrant) |> 
  summarise(
    total_games = n(),
    avg_turns = round(mean(turns, na.rm = T), 1)
  ) |> 
  drop_na() |> 
  mutate(
    percentage_games = round(100 * total_games / sum(total_games), 
                             2),
    x_var = c(1450, 1550, 1550, 1450),
    y_var = c(2520, 2520, 750, 750),
    hjust_var = c(1, 0, 0, 1)
  )
```

Visualization Parameters

```{r}
#| label: viz-params

# Font for titles
font_add_google("Sofia",
  family = "title_font"
) 

# Font for the caption
font_add_google("Barlow Condensed",
  family = "caption_font"
) 

# Font for plot text
font_add_google("Iceberg",
  family = "body_font"
) 

showtext_auto()

bg_col <- "white"
mypal <- paletteer::paletteer_d("beyonce::X39")
mypal1 <- paletteer::paletteer_d("LaCroixColoR::Lemon")

text_col <- "grey15"
text_hil <- "grey15"

bts <- 80

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")

plot_title <- "Parents' Incomes & College Admissions"

plot_subtitle <- str_wrap("For similar test scores and profile, kids of richer parents are more likely to end up in the prestigious Ivy Leagues and elite schools in the USA. The data collected from NY Times, shows a sample of 100 kids from each income slab, and where they end up.", 110)

# plot_subtitle <- glue::glue("................")

plot_subtitle |> str_view()

plot_caption <- paste0(
  "**Data:** New York Times (The Upshot) & Havisha Khurana", 
  " |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )

rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)
```

The static plot

```{r}
#| label: static-plot

df1 |> 
  ggplot(
    mapping = aes(
      x = loser_rating, 
      y = winner_rating,
      colour = turns
    )
  ) + 
  geom_hline(
    yintercept = 1500,
    linetype = "longdash"
  ) +
  geom_vline(
    xintercept = 1500,
    linetype = "longdash"
  ) +
  # geom_abline(
  #   slope = 1,
  #   intercept = 0,
  #   linetype = "longdash"
  # ) +
  geom_jitter(
    alpha = 0.4,
    size = 1.2
  ) +
  geom_text(
    data = df2,
    mapping = aes(
      x = x_var,
      y = y_var,
      label = paste0(
        "Average moves: ",
        avg_turns, "\n",
        percentage_games,
        "% of total games"
      ),
      hjust = hjust_var
    ),
    lineheight = 0.3,
    vjust = 0,
    colour = "black"
  ) +
  # Scales and Coordinates
  scale_x_continuous(
    limits = c(750, 2600),
    expand = expansion(0)
  ) +
  scale_y_continuous(
    limits = c(750, 2600),
    expand = expansion(0)
  ) +
  paletteer::scale_colour_paletteer_c(
    "grDevices::Temps",
    limits = c(30, 80),
    oob = squish,
    breaks = seq(40, 70, 10)
  ) +
  coord_fixed(ratio = 1) +
  
  # Themes and Labels
  labs(
    x = "Loser's Rating",
    y = "Winner's Rating",
    colour = "Number of turns in the Chess Game"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.title.position = "top"
  )
```

Savings the graphics

```{r}
#| label: save-image

ggsave(
  filename = here::here("data_vizs", "tidy_li_chess.png"),
  plot = g,
  width = 400,    # Best Twitter Aspect Ratio = 5:4
  height = 500,   
  units = "mm",
  bg = "white"
)


library(magick)
# Saving a thumbnail for the webpage
image_read(here::here("data_vizs", "tidy_li_chess.png")) |> 
  image_resize(geometry = "400") |> 
  image_write(
    here::here(
      "data_vizs", 
      "thumbnails", 
      "tidy_li_chess.png"
    )
  )
```
