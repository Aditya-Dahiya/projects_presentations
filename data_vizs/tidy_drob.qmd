---
title: "Tidy Tuesday Datasets"
author: "Aditya Dahiya"
date: "2024-07-10"
subtitle: ""
categories:
  - "#TidyTuesday"
image: "thumbnails/tidy_drob.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/session_presentations/data_vizs.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
bibliography: references.bib
---

![....................................](tidy_drob.png)

### **How I made this graphic?**

Loading required libraries, data import & creating custom functions

```{r}
#| label: setup

# Data Import and Wrangling Tools
library(tidyverse)            # All things tidy

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text support for ggplot2
library(showtext)             # Display fonts in ggplot2
library(colorspace)           # Lighten and Darken colours
library(patchwork)            # Combining plots

# Load data
drob_funs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-09/drob_funs.csv')
```

Exploratory Data Analysis & Data Wrangling

```{r}
#| label: eda

# Cleaned data
df0 <- drob_funs |> 
  filter(!in_multiple_pkgs) |> 
  count(pkgs, funs, sort = T) |> 
  arrange(pkgs, funs)

# Cleaned data on top 100 functions (only to display top 100)
df1 <- drob_funs |> 
  filter(!in_multiple_pkgs) |> 
  count(pkgs, funs, sort = T) |> 
  arrange(pkgs, funs) |> 
  slice_max(order_by = n, n = 100)

library(igraph)           # Underlying node edges library
library(ggraph)           # Grpahics and ggplot2 with igraph
library(tidygraph)        # to manuipulate graph objects

# Make an edges dataframe from outr data df1
edges1 <- df1 |> 
  rename(
    from = pkgs,
    to = funs
  ) |> 
  select(-n) |> 
  arrange(from)

# Make a vertices dataframe
vertices1 <- df1 |> 
  select(
    name = funs,
    n
  ) |> 
  # add rows for package sizes also by functions
  bind_rows(
    df0 |>
      group_by(pkgs) |> 
      summarize(n = sum(n)) |> 
      rename(name = pkgs) |> 
      # Remove duplication in some package and function names
      mutate(
        name = case_when(
          name == "ggplot" ~ "{ggplot}",
          name == "glue" ~ "{glue}",
          name == "tune" ~ "{tune}",
          .default = name
        )
      )
  )

plotdf <- graph_from_data_frame(
  d = edges1,
  vertices = vertices1,
  directed = TRUE
)
```

```{r}
#| label: eda-2

df1 <- drob_funs |> 
  filter(!in_multiple_pkgs) |> 
  count(pkgs, funs, sort = T) |> 
  arrange(pkgs, funs) |> 
  slice_max(order_by = n, n = 200) |> 
  mutate(
    funs = paste0(funs, "\n{", pkgs, "}")
  )

library(packcircles)
# Create the layout using circleProgressiveLayout()
# This function returns a dataframe with a row for each bubble.
# It includes the center coordinates (x and y) and the radius, which is proportional to the value.
packing1 <- circleProgressiveLayout(
  df1$n,
  sizetype = "area"
)
plotdf1 <- bind_cols(
  df1,
  packing1
)
plotdf_circle <- circleLayoutVertices(
  packing1,
  npoints = 100
  ) |> 
  as_tibble()

ggplot() +
  geom_polygon(
    data = plotdf_circle,
    mapping = aes(x, y, group = id, fill = as_factor(id))
  ) +
  # Add text at center of each bubble
  geom_text(
    data = plotdf1,
    mapping = aes(
      x, y, label = funs, size = n
    )
  ) +
  theme_void() +
  theme(
    legend.position = "none"
  )
```

Visualization Parameters

```{r}
#| label: viz-params

# Font for titles
font_add_google("Xanh Mono",
  family = "title_font"
) 

# Font for the caption
font_add_google("Saira Extra Condensed",
  family = "caption_font"
) 

# Font for plot text
font_add_google("M PLUS 1 Code",
  family = "body_font"
) 

showtext_auto()

# Credits for coffeee palette
mypal <- paletteer::paletteer_d("nbapalettes::cavaliers_retro")

bg_col <- "white"
text_col <-  mypal[2]
text_hil <- mypal[2]

bts <- 80

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
```

Annotation Text for the Plot

```{r}
#| label: text-for-plot

plot_title <- "........................"

plot_subtitle <- "........................"

plot_caption <- paste0(
  "**Data:** #TidyTuesday Datasets", 
  " |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )

rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)
```

The static plot: Inspiration - [this article](https://r-graph-gallery.com/circle-packing.html) at [R Graph gallery](https://r-graph-gallery.com/) by [Yan Holtz](https://www.yan-holtz.com/)

```{r}
#| label: static-plot

ggraph(
  graph = plotdf,
  layout = "circlepack",
  circular = F,
  weight = n
) +
  geom_node_circle(
    mapping = aes(
      fill = name
    )
  ) +
  coord_equal() +
  theme_void() +
  theme(legend.position = "none")
```

Savings the graphics

```{r}
#| label: save-image

ggsave(
  filename = here::here("data_vizs", "tidy_drob.png"),
  plot = g_full,
  width = 400,    # Best Twitter Aspect Ratio = 5:4
  height = 500,   
  units = "mm",
  bg = bg_col
)


library(magick)
# Saving a thumbnail for the webpage
image_read(here::here("data_vizs", "tidy_drob.png")) |> 
  image_resize(geometry = "400") |> 
  image_write(here::here("data_vizs", "thumbnails", "tidy_drob.png"))

```
