---
title: "tidy_animal_shelter"
author: "Aditya Dahiya"
date: "2025-03-01"
subtitle: "tidy_animal_shelter."
categories:
  - "#TidyTuesday"
  - "Donut Chart"
image: "thumbnails/tidy_acad_lit_med.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/projects_presentations/data_vizs.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
bibliography: references.bib
comments:
  giscus: 
    repo: Aditya-Dahiya/projects_presentations
---

The [Long Beach Animal Shelter Data](https://data.longbeach.gov/explore/dataset/animal-shelter-intakes-and-outcomes/information/) provides a comprehensive dataset detailing the intake and outcome records of animals at the [City of Long Beach Animal Care Services](https://www.longbeach.gov/acs/), made accessible through the [{animalshelter}](https://emilhvitfeldt.github.io/animalshelter/) R package. Curated by [Lydia Gibson](https://github.com/lgibson7) for the TidyTuesday challenge on March 4, 2025, this dataset allows enthusiasts to explore trends such as how pet adoptions have evolved over time and which types of pets—ranging from cats and dogs to other species—are most frequently adopted.

![.............](tidy_animal_shelter.png){#fig-1}

## **How I made this graphic?**

### Loading required libraries

```{r}
#| label: setup

# Data Import and Wrangling Tools
library(tidyverse)            # All things tidy

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text support for ggplot2
library(showtext)             # Display fonts in ggplot2
library(colorspace)           # Lighten and Darken colours

# Geocomputation
library(sf)                   # Simple features / maps in R
library(osmdata)              # Getting Open Street Maps data
library(ggmap)                # Get background maps

longbeach <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-04/longbeach.csv')
```

### Visualization Parameters

```{r}
#| label: viz-params

# Font for titles
font_add_google("Dosis",
  family = "title_font"
) 

# Font for the caption
font_add_google("Saira Extra Condensed",
  family = "caption_font"
) 

# Font for plot text
font_add_google("Dosis",
  family = "body_font"
) 

showtext_auto()

mypal <- c("#6388B4", "#FFAE34", "#EF6F6A", "#8CC2CA", "#55AD89")
# cols4all::c4a_gui()

# A base Colour
bg_col <- "white"
seecolor::print_color(bg_col)

# Colour for highlighted text
text_hil <- "grey30"
seecolor::print_color(text_hil)

# Colour for the text
text_col <- "grey30"
seecolor::print_color(text_col)

# Define Base Text Size
bts <- 90 

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
plot_caption <- paste0(
  "**Data:** Lydia Gibson & City of Long Beach Animal Care Services", 
  " |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )
rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)

# Add text to plot-------------------------------------------------
plot_title <- "................."

plot_subtitle <- str_wrap("...............", 30)

str_view(plot_subtitle)
```

### Exploratory Data Analysis and Wrangling

Get City of Long Beach district boundaries from [official website](https://data.longbeach.gov/explore/dataset/colb-council-districts/export/).

```{r}
#| label: get-city-districts

# Try {geodata} to get district boundaries
# longbeach_counties <- geodata::gadm(
#   country = "USA",
#   path = tempdir()
# )

# Trying {tigris} to get districts boundaries  
# library(tigris)
# temp1 <- school_districts(
#   year = 2020, 
#   state = "CA",
#   filter_by = longbeach_bb
#   )

# Try {osmdata} to get district boundaries
longbeach_bb <- osmdata::getbb("Long Beach")
# 
# longbeach_districts <- opq(bbox = longbeach_bb) |> 
#   add_osm_feature(
#     key = "boundary",
#     value = c("administrative")
#   ) |> 
#   osmdata_sf()

library(httr)

# Define the URL
shapefile_url <- "https://data.longbeach.gov/api/explore/v2.1/catalog/datasets/colb-council-districts/exports/shp?lang=en&timezone=Asia%2FKolkata"

# Create a temporary directory
temp_dir <- tempdir()
zip_file <- file.path(tempdir(), "shapefile.zip")

# Download the ZIP file
GET(shapefile_url, write_disk(zip_file, overwrite = TRUE))

# Unzip the downloaded file
unzip(zip_file, exdir = temp_dir)

# Identify the .shp file (assuming it is named 'colb-council-districts.shp')

# Identify the .shp file (assuming it is named 'colb-council-districts.shp')
shp_file <- file.path(temp_dir, "colb-council-districts.shp")

# Read the shapefile into an sf object
council_districts <- st_read(shp_file)

rm(temp_dir, shapefile_url, shp_file, zip_file)

longbeach_districts <- council_districts |>
  mutate(
    district = council_num,
    pop = population,
    area = shape_area,
    geometry = geometry,
    .keep = "none"
  )


```

```{r}
#| label: eda-data-wrangling

# library(summarytools)

# longbeach |> 
#   dfSummary() |> 
#   view()
# 
# longbeach |> names()

# gEt only few types of animals which we can plot
df1 <- longbeach |> 
  mutate(
    animal_type = case_when(
      animal_type == "cat" ~ "Cat",
      animal_type == "dog" ~ "Dog",
      animal_type == "bird" ~ "Bird",
      animal_type == "wild" ~ "Wild",
      .default = "Others"
    ),
    animal_type = fct(
      animal_type,
      levels = c(
        "Cat", "Dog", "Bird", "Wild", "Others"
    ))
  ) |>
  st_as_sf(
    coords = c("longitude", "latitude"),
    crs = "EPSG:4326"
  ) |> 
  select(animal_type, geometry) |> 
  st_join(longbeach_districts)

# Animal Type per district
df2 <- df1 |> 
  st_drop_geometry() |> 
  group_by(district) |> 
  count(animal_type) |> 
  filter(!is.na(district))

# A comparison chart
df2 |> 
  ggplot(
    aes(
      x = district, y = n, fill = animal_type
    )
  ) +
  geom_col(
    position = "fill"
  )

# Convert df2 into a tibble that {scatterpie} can understand
df3 <- df2 |> 
  pivot_wider(
    id_cols = district,
    names_from = animal_type,
    values_from = n
  ) |> 
  mutate(
    total  = Cat + Dog + Bird + Wild + Others
  ) |> 
  
  # Add latitude and longitude from centroids of districts
  left_join(
    council_districts |> 
      mutate(district = council_num) |> 
      select(district, geometry) |> 
      st_centroid() |> 
      mutate(
        longitude = st_coordinates(geometry)[,1],
        latitude = st_coordinates(geometry)[,2]
        ) |> 
      st_drop_geometry()

  )


ggplot() +
   +
  coord_equal()


```

```{r}
#| label: get-base-map-from-ggmap


# Required packages
library(ggmap)
library(terra)
library(ggplot2)
library(tidyterra)

# Get the map from ggmap
register_stadiamaps("YOUR-API-KEY-HERE")

# Define the bounding box (assuming longbeach_bb is defined elsewhere)
# Example: longbeach_bb <- c(left = -118.25, bottom = 33.75, right = -118.10, top = 33.85)
longbeach_basemap <- get_stadiamap(
  bbox = longbeach_bb,
  zoom = 10,
  maptype = "stamen_toner_lines"
)

# Plot the basemap
ggmap(longbeach_basemap)

# Get the map from ggmap
longbeach_basemap <- get_stadiamap(
  bbox = longbeach_bb,
  zoom = 10,
  maptype = "stamen_toner_lines"
)

# Extract the raster data (RGB) and coordinates from the ggmap object
raster_data <- as.raster(longbeach_basemap)  # Convert ggmap object to raster
bbox <- attr(longbeach_basemap, "bb")        # Get bounding box attributes

# Convert the raster to a matrix of RGB values
rgb_matrix <- as.array(raster_data)

# Create a SpatRaster from the RGB matrix
spat_raster <- rast(rgb_matrix)

# Set the extent of the SpatRaster using the bounding box
ext(spat_raster) <- c(bbox$left, bbox$right, bbox$bottom, bbox$top)

# Set the coordinate reference system (CRS) - Stadia Maps typically uses WGS84 (EPSG:4326)
crs(spat_raster) <- "EPSG:4326"

# Name the layers for RGB channels
names(spat_raster) <- c("red", "green", "blue")

# Plot with ggplot2 and tidyterra
ggplot() +
  geom_spatraster_rgb(data = spat_raster) +  # Use tidyterra to plot RGB
  coord_sf(crs = "EPSG:4326") +                      # Ensure correct CRS for plotting
  labs(title = "Long Beach Stamen Toner Lines Map") +
  theme_minimal()

```

### The Base Plots

Using {[scatterpie](https://cran.r-project.org/web/packages/scatterpie/vignettes/scatterpie.html)} package [@scatterpie] for pie-charts.

```{r}
#| label: base-plot

g <- ggplot(df1) +
  geom_sf(
    aes(colour = animal_type),
    alpha = 0.1,
    size = 0.2
  ) +
  geom_sf(
    data = longbeach_districts,
    colour = "grey20",
    fill = NA
  ) +
  scatterpie::geom_scatterpie(
    data = df3,
    aes(
      x = longitude, 
      y = latitude, 
      group = district
    ),
    cols = c(
      "Cat", "Dog", "Bird", "Wild", "Others"
    ),
    colour = bg_col,
    alpha = 0.8
  ) +
  scale_fill_manual(values = mypal) +
  coord_sf(
    xlim = c(-118.22, -118.06),
    ylim = c(33.74, 33.88),
    expand = TRUE,
    default_crs = "EPSG:4326"
  ) +
  guides(
    alpha = "none",
    colour = "none"
  ) +
  labs(
    x = NULL,
    y = NULL,
    colour = NULL,
    subtitle = plot_subtitle,
    title = plot_title,
    caption = plot_caption,
    fill = "Type of animal"
  ) +
  theme_minimal(
    base_family = "body_font",
    base_size = bts
  ) +
  theme(
    
    # Overall Plot
    plot.title.position = "plot",
    text = element_text(
      margin = margin(0,0,0,0, "mm"),
      colour = text_hil,
      hjust = 0.5,
      vjust = 0.5
    ),
    plot.title = element_text(
        margin = margin(0,0,15,0, "mm"),
        colour = text_hil,
        hjust = 0.5,
        size = bts * 1.75,
        family = "title_font",
        face = "bold",
        lineheight = 0.3
      ),
    plot.subtitle = element_text(
      colour = text_hil,
      size = bts,
      hjust = 0.5, 
      vjust = 0.5,
      lineheight = 0.3,
      margin = margin(0,0,0,0, "mm"),
      family = "caption_font"
    ),
    plot.caption = element_textbox(
      halign = 0,
      hjust = 0.5,
      family = "caption_font",
      margin = margin(0,0,0,0, "mm"),
      size = 0.75 * bts
    ),
    plot.margin = margin(5,0,5,0, "mm"),
    panel.background = element_rect(
      fill = "transparent",
      colour = "transparent"
    ),
    plot.background = element_rect(
      fill = "transparent",
      colour = "transparent"
    ),
    
    # Axis and Strips
    axis.text = element_text( 
      size = 0.5 * bts,
      margin = margin(0,0,0,0, "mm")
      ),
    axis.ticks = element_blank(),
    axis.ticks.length = unit(0, "mm"),
    
    # Legend
    legend.position = "bottom",
    legend.text = element_text(
      margin = margin(0,0,0,0, "mm"),
      size = bts
    ),
    legend.key.height = unit(5, "mm"),
    legend.key.width = unit(25, "mm"),
    legend.margin = margin(0,0,0,0, "mm"),
    legend.box.margin = margin(0,0,0,0, "mm"),
    legend.title = element_text(
      lineheight = 0.3,
      margin = margin(0,0,0,0, "mm")
    )
    
  )

ggsave(
  filename = here::here(
    "data_vizs",
    "tidy_animal_shelter.png"
  ),
  plot = g,
  width = 400,
  height = 500,
  units = "mm",
  bg = bg_col
)
```

### Savings the thumbnail for the webpage

```{r}
#| label: save-image

# Saving a thumbnail

library(magick)

# Saving a thumbnail for the webpage
image_read(here::here("data_vizs", 
                      "tidy_animal_shelter.png")) |> 
  image_resize(geometry = "x400") |> 
  image_write(
    here::here(
      "data_vizs", 
      "thumbnails", 
      "tidy_animal_shelter.png"
    )
  )
```

### Session Info

```{r}
#| label: tbl-session-info
#| tbl-cap: "R Packages and their versions used in the creation of this page and graphics"
#| eval: true

sessioninfo::session_info()$packages |> 
  as_tibble() |> 
  select(package, 
         version = loadedversion, 
         date, source) |> 
  arrange(package) |> 
  janitor::clean_names(
    case = "title"
  ) |> 
  gt::gt() |> 
  gt::opt_interactive(
    use_search = TRUE
  ) |> 
  gtExtras::gt_theme_espn()
```
