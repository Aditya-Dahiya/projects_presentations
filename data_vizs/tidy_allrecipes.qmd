---
title: "tidy_allrecipes"
author: "Aditya Dahiya"
date: "2025-09-14"
subtitle: "tidy_allrecipes"
categories:
  - "#TidyTuesday"
image: "thumbnails/tidy_allrecipes.png"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - linkate
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/projects_presentations/data_vizs.html"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
bibliography: references.bib
comments:
  giscus: 
    repo: Aditya-Dahiya/projects_presentations
---

# About the Data

This week's dataset explores a comprehensive collection of recipes from [Allrecipes.com](https://www.allrecipes.com/), curated through the [tastyR package](https://cran.r-project.org/package=tastyR) and prepared for analysis. The collection includes two complementary datasets: `all_recipes` containing 14,426 general recipes, and `cuisines` featuring 2,218 recipes categorized by country of origin. Both datasets provide rich recipe information including ingredients, comprehensive nutritional data (calories, fat, carbohydrates, protein), cooking logistics (preparation and cooking times), user engagement metrics (ratings and reviews), and serving sizes. All data has been systematically cleaned and standardized to facilitate straightforward comparisons and visual exploration. The datasets open up numerous analytical opportunities, from identifying the most successful recipe authors and exploring relationships between cooking time and ratings, to discovering which cuisines achieve the highest user satisfaction and finding the most "actionable" recipes that balance high ratings with minimal time investment. This curated collection was assembled by [Brian Mubia](https://github.com/owlzyseyes) and represents a valuable resource for exploring culinary trends, user preferences, and recipe performance patterns across diverse cooking traditions and styles.

![..............](tidy_allrecipes.png){#fig-1}

## How I Made This Graphic

### Loading required libraries

```{r}
#| label: setup
#| eval: true

pacman::p_load(
  tidyverse, # All things tidy

  scales, # Nice Scales for ggplot2
  fontawesome, # Icons display in ggplot2
  ggtext, # Markdown text support for ggplot2
  showtext, # Display fonts in ggplot2
  colorspace, # Lighten and Darken colours

  patchwork  # Composing Plots
)

all_recipes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-16/all_recipes.csv')
cuisines <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-16/cuisines.csv')
```

### Visualization Parameters

```{r}
#| label: viz-params

# Font for titles
font_add_google("Saira",
  family = "title_font"
)

# Font for the caption
font_add_google("Saira Condensed",
  family = "body_font"
)

# Font for plot text
font_add_google("Saira Extra Condensed",
  family = "caption_font"
)

showtext_auto()

# A base Colour
bg_col <- "white"
seecolor::print_color(bg_col)

# Colour for highlighted text
text_hil <- "grey40"
seecolor::print_color(text_hil)

# Colour for the text
text_col <- "grey30"
seecolor::print_color(text_col)

line_col <- "grey30"

# Define Base Text Size
bts <- 80

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
plot_caption <- paste0(
  "**Data:**  Brian Mubia, www.allrecipes.com",
  " |  **Code:** ",
  social_caption_1,
  " |  **Graphics:** ",
  social_caption_2
)
rm(
  github, github_username, xtwitter,
  xtwitter_username, social_caption_1,
  social_caption_2
)

# Add text to plot-------------------------------------------------
plot_title <- "Nutritional Composition by Cuisine"

plot_subtitle <- "Countries ordered by carbohydrate proportion (highest to lowest)\nPie size reflects average calories per recipe." |> str_wrap(60)

str_view(plot_subtitle)
```

### Exploratory Data Analysis and Wrangling

```{r}
#| label: eda

all_recipes

cuisines |> 
  count(country, sort = T) |> 
  print(n = 30)

pacman::p_load(summarytools)
cuisines |> 
  dfSummary() |> 
  view()

all_recipes |> 
  dfSummary() |> 
  view()
pacman::p_unload(summarytools)

# Clause Sonnet 4.0

# Calculate summary statistics and carbs proportion for sorting
df1 <- cuisines |> 
  group_by(country) |> 
  summarise(
    n = n(),
    calories = mean(calories, na.rm = T),
    fat = mean(fat, na.rm = TRUE),
    carbs = mean(carbs, na.rm = TRUE),
    protein = mean(protein, na.rm = TRUE),
    avg_rating = mean(avg_rating, na.rm = TRUE),
    .groups = 'drop'
  ) |> 
  
  # Calculate carbs proportion for sorting
  mutate(
    total_macros = fat + carbs + protein,
    carbs_prop = carbs / total_macros
  ) |> 
  arrange(desc(n)) |> 
  filter(n > 10) |> 
  
  # Sort by carbs proportion (descending)
  arrange(desc(carbs_prop)) |> 
  
  # Create radius scale based on calories (normalize between 0.1 and 0.4)
  mutate(
    radius = scales::rescale(
      calories, to = c(0.1, 0.4), 
      from = range(calories, na.rm = TRUE)
      )
  ) |> 
  mutate(country_code = c("au", "no", "us", "nl", "at", "br", "dk", "fi", "za", "se", 
                         "il", "pr", "ca", "il", "tr", "lb", "ir", "pe", "jp", "ru", 
                         "cl", "se", "vn", "us", "pl", "ar", "th", "es", "co", "de", 
                         "cn", "kr", "jm", "pk", "pt", "cu", "mx", "in", "ph", "id", 
                         "bd", "it", "fr", "us", "gr", "my", "us"))

df1 |> 
  pull(country) |> 
  paste0(collapse = ", ")

plot_data <-  df1 |> 
  pivot_longer(
    cols = c(fat, carbs, protein),
    names_to = "nutrient",
    values_to = "value"
  ) |> 
  # Reorder country factor to maintain the carbs proportion order
  mutate(
    country = factor(country, levels = unique(df1$country))
  )


```

### The Plot

```{r}
#| label: base-plot

library(ggplot2)
library(ggpattern)

g <- plot_data |> 
  ggplot(
    mapping = aes(
      x = 1,
      y = value,
      fill = nutrient,
      pattern = nutrient,
      pattern_filename = nutrient
    )
  ) +
  geom_col(
    mapping = aes(width = calories),
    position = position_fill(),
    colour = "white",
    size = 0.5
  ) +
  facet_wrap(
    ~country
  ) +
  coord_radial(
    theta = "y",
    inner.radius = 0.1,  # Small inner radius for better visibility
    expand = FALSE
  ) +
  scale_fill_manual(
    name = "Nutrient",
    labels = c("Carbohydrates", "Fat", "Protein"),
    values = c("carbs" = "#FFA726", "fat" = "#FF7043", "protein" = "#42A5F5")
  ) +
  theme_minimal() +
  theme(
    axis.text = element_blank(),
    axis.title = element_blank(),
    axis.ticks = element_blank(),
    panel.grid = element_blank(),
    strip.text = element_text(size = 8, face = "bold"),
    legend.position = "bottom",
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 10),
    legend.key.size = unit(1, "cm")  # Make legend keys larger to show patterns
  ) +
  labs(
    title = plot_title,
    subtitle = plot_subtitle,
    caption = plot_caption,
    x = "Change in Rankings (2025 rank - 2006 rank)",
    y = NULL,
    colour = NULL,
    fill = NULL
  ) +
  theme_minimal(
    base_family = "body_font",
    base_size = bts
  ) +
  theme(
    legend.position = "none",
    
    # Overall
    text = element_text(
      margin = margin(0, 0, 0, 0, "mm"),
      colour = text_col,
      lineheight = 0.3
    ),
    
    # Axes
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.ticks.length.y = unit(0, "mm"),
    
    axis.text.x = element_text(
      margin = margin(2,2,2,2, "mm")
    ),
    axis.ticks.length.x = unit(5, "mm"),
    axis.ticks.x = element_line(
      colour = text_hil,
      linewidth = 0.4
    ),
    axis.line.x = element_line(
      arrow = arrow(
        ends = "both"
      ),
      colour = text_hil,
      linewidth = 0.4
    ),
    axis.title.x = element_text(
      margin = margin(2,2,2,2, "mm")
    ),
    panel.grid = element_blank(),
    panel.grid.major.x = element_line(
      linewidth = 0.3,
      linetype = 3,
      colour = alpha(text_col, 0.7)
    ),


    # Labels and Strip Text
    plot.title = element_text(
      margin = margin(5, 0, 5, 0, "mm"),
      hjust = 0.5,
      vjust = 0.5,
      colour = text_hil,
      size = 3.2 * bts,
      family = "body_font",
      face = "bold"
    ),
    plot.subtitle = element_text(
      margin = margin(5, 0, 0, 0, "mm"),
      vjust = 0.5,
      colour = text_hil,
      size = 1.3 * bts,
      hjust = 0.5,
      family = "caption_font",
      lineheight = 0.3
    ),
    plot.caption = element_textbox(
      margin = margin(5, 0, 2, 0, "mm"),
      hjust = 0.5,
      halign = 0.5,
      colour = text_hil,
      size = bts * 0.8,
      family = "caption_font"
    ),
    plot.caption.position = "plot",
    plot.title.position = "plot",
    plot.margin = margin(5, 5, 5, 5, "mm")
  )

ggsave(
  filename = here::here(
    "data_vizs",
    "tidy_allrecipes.png"
  ),
  plot = g,
  width = 400,
  height = 500,
  units = "mm",
  bg = bg_col
)
```

### Savings the thumbnail for the webpage

```{r}
#| label: save-image

# Saving a thumbnail

library(magick)

# Saving a thumbnail for the webpage
image_read(here::here(
  "data_vizs",
  "tidy_allrecipes.png"
)) |>
  image_resize(geometry = "x400") |>
  image_write(
    here::here(
      "data_vizs",
      "thumbnails",
      "tidy_allrecipes.png"
    )
  )
```

### Session Info

```{r}
#| label: tbl-session-info
#| tbl-cap: "R Packages and their versions used in the creation of this page and graphics"
#| eval: true


sessioninfo::session_info()$packages |>
  as_tibble() |>
  dplyr::select(package,
    version = loadedversion,
    date, source
  ) |>
  dplyr::arrange(package) |>
  janitor::clean_names(
    case = "title"
  ) |>
  gt::gt() |>
  gt::opt_interactive(
    use_search = TRUE
  ) |>
  gtExtras::gt_theme_espn()
```
