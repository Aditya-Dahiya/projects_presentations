[
  {
    "objectID": "data_vizs/owid_fertility.html",
    "href": "data_vizs/owid_fertility.html",
    "title": "Global Fertility Decline: A 70-Year Trend",
    "section": "",
    "text": "Source of the Data: The fertility rate data is sourced from the United Nations’ World Population Prospects (2022) and has been processed and presented by Our World in Data. The dataset provides the average number of live births a hypothetical cohort of women would have at the end of their reproductive period, assuming they experienced the fertility rates of a specific period throughout their lives without mortality impact. The data covers the period from 1950 to 2021 and is measured in live births per woman. Age-specific fertility rates are included, indicating the number of births to women in particular age groups, divided by the number of women in those groups, across annual civil calendar years. This dataset, part of the 27th edition of the official global population estimates, is based on extensive data on population size, fertility, mortality, and international migration for 237 countries or areas. For more information, visit the UN’s World Population Prospects page here and here. The data was retrieved on September 9, 2022. Our World in Data processes the data through various steps to ensure accuracy, including standardizing country names, converting units, and calculating derived indicators. Detailed information on their data processing can be found here. For citation purposes, use: UN, World Population Prospects (2022) – processed by Our World in Data.\n\n\n\n\n\n\nFigure 1: This graphic shows the changes in global fertility rates from the 1950s to the 2010s. The X-axis represents the proportion of the world population (0% to 100%), while the Y-axis shows the fertility rate levels (number of births per woman). The lines, colored by decade, illustrate the shift from highest to lowest fertility rate countries over time.\n\n\n\n\nHow I made these graphics?\nGetting the data\n\n\nCode\n# Data Import and Wrangling Tools\nlibrary(tidyverse)            # All things tidy\nlibrary(owidR)                # Get data from Our World in R\n\n# Final plot tools\nlibrary(scales)               # Nice Scales for ggplot2\nlibrary(fontawesome)          # Icons display in ggplot2\nlibrary(ggtext)               # Markdown text support\nlibrary(showtext)             # Display fonts in ggplot2\nlibrary(colorspace)           # To lighten and darken colours\nlibrary(patchwork)            # Combining plots\n\nsearch1 &lt;- owidR::owid_search(\"fertility\")\n\ndf1 &lt;- owid(\"children-per-woman-un\")\n\npopdf &lt;- owid(\"population-with-un-projections\")\n\n\nVisualization Parameters\n\n\nCode\n# Font for titles\nfont_add_google(\"Chakra Petch\",\n  family = \"title_font\"\n) \n\n# Font for the caption\nfont_add_google(\"Saira Semi Condensed\",\n  family = \"caption_font\"\n) \n\n# Font for plot text\nfont_add_google(\"Changa\",\n  family = \"body_font\"\n) \n\nshowtext_auto()\n\n# Colour Palette\nmypal &lt;- rev(paletteer::paletteer_d(\"LaCroixColoR::Lime\")[c(1,2,4:6)])\n\n# Background Colour\nbg_col &lt;- \"grey98\"\ntext_col &lt;- \"grey10\"\ntext_hil &lt;- \"grey25\"\n\n# Base Text Size\nbts &lt;- 80\n\nplot_title &lt;- \"Declining Global Fertility Rates (1950-2020)\"\n\nplot_subtitle &lt;- \"The fertility rate, representing the average number of live births per woman, has notably declined from 1950 to 2020, driven largely by reductions in middle-income countries such as India and China. This graphic highlights this global trend, while also showing that the poorest and war-torn nations have experienced minimal decline in fertility rates. Nearly half of the world's population now has fertility rates below the replacement level.\"\n\ndata_annotation &lt;- \"About the Data: This data on fertility rates, sourced from the United Nations' World Population Prospects (2022) and processed by Our World in Data, spans from 1950 to 2021. It reflects the average number of live births per woman, with age-specific rates, providing insights into global fertility trends across decades.\"\n\n# Caption stuff for the plot\nsysfonts::font_add(\n  family = \"Font Awesome 6 Brands\",\n  regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\")\n)\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nsocial_caption_1 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_hil}'&gt;{github_username}  &lt;/span&gt;\")\nsocial_caption_2 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_hil}'&gt;{xtwitter_username}&lt;/span&gt;\")\n\nplot_caption &lt;- paste0(\n  \"**Data:** United Nations & Our World in Data  |  \",\n  \"**Code:** \", \n  social_caption_1, \n  \" |  **Graphics:** \", \n  social_caption_2\n  )\nrm(github, github_username, xtwitter, \n   xtwitter_username, social_caption_1, social_caption_2)\n\n\nData Wrangling\n\n\nCode\n# A tibble for the fertility levels in each decade\ndf2 &lt;- df1 |&gt; \n  as_tibble() |&gt; \n  janitor::clean_names() |&gt; \n  rename(fertility = fertility_rate_sex_all_age_all_variant_estimates) |&gt; \n  filter(!is.na(code)) |&gt; \n  filter(entity != \"World\")\n\n\n# A tibble of populations for each coutnry in each decade\npopdf1 &lt;- popdf |&gt; \n  as_tibble() |&gt; \n  janitor::clean_names() |&gt; \n  filter(!is.na(code)) |&gt; \n  filter(entity != \"World\") |&gt; \n  mutate(\n    population = ifelse(\n      is.na(population_sex_all_age_all_variant_estimates),\n      population_sex_all_age_all_variant_medium,\n      population_sex_all_age_all_variant_estimates\n    )\n  ) |&gt; \n  select(-c(population_sex_all_age_all_variant_estimates,\n            population_sex_all_age_all_variant_medium))\n\n# Creating a separate data frame for each decade by a common function so \n# that we can create descending order of fertility for beautiful plotting.\n# Creating a factor levels of Countries sorted by fertility levels\n# in descending order of fertility levels in each decade.\n\nmake_decade_df &lt;- function(years_to_select, to_label){\n\n    temp_df_fertility &lt;- df2 |&gt; \n      filter(year %in% years_to_select) |&gt; \n      group_by(entity, code) |&gt; \n      summarize(fertility = mean(fertility, na.rm = T)) |&gt; \n      arrange(desc(fertility)) |&gt; \n      ungroup()\n    \n    temp_df_pop &lt;- popdf1 |&gt; \n      filter(year %in% years_to_select) |&gt; \n      group_by(entity, code) |&gt; \n      summarise(population = mean(population, na.rm = TRUE)) |&gt; \n      ungroup()\n      \n    levels_con &lt;- temp_df_fertility |&gt; \n      arrange(fertility) |&gt; \n      pull(entity)\n    \n    # labels_con &lt;- temp_df_pop |&gt; \n    #   ungroup() |&gt; \n    #   slice_max(order_by = population, n = to_label) |&gt; \n    #   pull(entity)\n    \n    temp_df_fertility |&gt; \n      left_join(temp_df_pop) |&gt; \n      arrange(desc(fertility)) |&gt; \n      # mutate(entity = fct(entity, levels = levels_con)) |&gt; \n      mutate(population = replace_na(population, 0)) |&gt; \n      mutate(cum_population = cumsum(population)) |&gt; \n      mutate(cum_pop_perc = cum_population / max(cum_population)) |&gt;\n      arrange(fertility) |&gt; \n      mutate(\n        label_entity = if_else(\n          entity %in% to_label,\n          paste0(entity, \" (\", round(fertility, 1), \")\"),\n          NA\n        )\n      )\n      \n\n}\n\ndf1950s &lt;- make_decade_df(\n  1950:1959, \n  c(\"India\", \"China\", \"Rwanda\", \"Philippines\", \"Thailand\", \"Brazil\", \"United States\",\n    \"Norway\")\n  )\ndf1970s &lt;- make_decade_df(\n  1970:1979, \n  c(\"India\", \"China\")\n  )\ndf1990s &lt;- make_decade_df(\n  1990:1999, \n  c(\"China\", \"India\")\n  )\ndf2010s &lt;- make_decade_df(\n  2010:2019, \n  c(\"Saudi Arabia\", \"India\", \"China\")\n  )\n\n\nglobal_mean &lt;- function(decadedf) {\n  decadedf |&gt; \n    summarise(global = weighted.mean(x = fertility, w = population)) |&gt; \n    pull(global) |&gt; \n    round(2)\n}\n\n\nVisualization\n\n\nCode\ntext_annotate &lt;- function(label_val, y_val, temp_col, vjust = 0){\n  annotate(\n    geom = \"text\",\n    x = -0.01,\n    y = y_val,\n    hjust = 1,\n    vjust = vjust,\n    label = label_val,\n    lineheight = 0.25,\n    colour = temp_col,\n    family = \"caption_font\",\n    size = bts / 3.5\n  )\n}\n  \n  \ng &lt;- ggplot(\n    mapping = aes(\n      x = cum_pop_perc,\n      y = fertility,\n      label = label_entity\n    )\n  ) +\n  \n  # Annotations\n  geom_hline(\n    yintercept = 2.1,\n    colour = text_col,\n    linetype = 2,\n    linewidth = 0.4,\n    alpha = 0.75\n  ) +\n  text_annotate(\n    paste0(\"(Decade: 1950-1959)\\nGlobal Average: \", global_mean(df1950s)), \n    global_mean(df1950s), mypal[1]) +\n  text_annotate(\n    paste0(\"(Decade: 1970-1979)\\nGlobal Average: \", global_mean(df1970s)), \n    global_mean(df1970s), mypal[2]) +\n  text_annotate(\n    paste0(\"(Decade: 1990-1999)\\nGlobal Average: \", global_mean(df1990s)), \n    global_mean(df1990s), mypal[3]) +\n  text_annotate(\n    paste0(\"(Decade: 2010-2019)\\nGlobal Average: \", global_mean(df2010s)), \n    global_mean(df2010s), mypal[4]) +\n  text_annotate(\"Global Replacement\\nFertility Level: 2.10\\n(At this level, the\\npopulation stays\\nconstant)\", 2.3, text_col, vjust = 1) +\n  \n  # Decade 1950s\n  geom_line(\n    data = df1950s,\n    colour = mypal[1],\n    linewidth = 0.75\n  ) +\n  geom_text(\n    data = df1950s,\n    hjust = 0,\n    nudge_y = 0.2,\n    colour = mypal[1],\n    family = \"caption_font\",\n    size = bts / 3\n  ) +\n  geom_point(\n    data = df1950s,\n    colour = mypal[1],\n    size = 2,\n    pch = 3\n  ) +\n  \n  # Decade 1970s\n  geom_line(\n    data = df1970s,\n    colour = mypal[2],\n    linewidth = 0.75\n  ) +\n  geom_text(\n    data = df1970s,\n    hjust = 0.5,\n    nudge_y = 0.2,\n    colour = mypal[2],\n    family = \"caption_font\",\n    size = bts / 3\n  ) +\n  geom_point(\n    data = df1970s,\n    colour = mypal[2],\n    size = 2,\n    pch = 3\n  ) +\n  \n  # Decade 1990s\n  geom_line(\n    data = df1990s,\n    colour = mypal[3],\n    linewidth = 0.75\n  ) +\n  geom_text(\n    data = df1990s,\n    hjust = 1,\n    nudge_y = 0.2,\n    nudge_x = -0.075,\n    colour = mypal[3],\n    family = \"caption_font\",\n    size = bts / 3\n  ) +\n  geom_point(\n    data = df1990s,\n    colour = mypal[3],\n    size = 2,\n    pch = 3\n  ) +\n  \n  # Decade 2010s\n  geom_line(\n    data = df2010s,\n    colour = mypal[4],\n    linewidth = 0.75\n  ) +\n  geom_text(\n    data = df2010s,\n    hjust = 1,\n    vjust = 1,\n    nudge_x = -0.02,\n    nudge_y = - 0.1,\n    colour = mypal[4],\n    family = \"caption_font\",\n    size = bts / 3\n  ) +\n  geom_point(\n    data = df2010s,\n    colour = mypal[4],\n    size = 2,\n    pch = 3\n  ) +\n  \n  # Scales and Coordinates\n  scale_x_continuous(\n    labels = label_percent(),\n    expand = expansion(0)\n  ) +\n  scale_y_continuous(\n    expand = expansion(0),\n    position = \"right\",\n    limits = c(0.5, 8.4),\n    breaks = 1:8,\n    labels = 1:8\n  ) +\n  coord_cartesian(\n    xlim = c(0, 1),\n    clip = \"off\"\n  ) +\n  labs(\n    title = plot_title,\n    subtitle = str_wrap(plot_subtitle, 125),\n    caption = plot_caption,\n    x = \"Share of the total Global Population\",\n    y = \"Fertility Rate (average number of babies per woman)\"\n  ) +\n  theme_minimal(\n    base_family = \"body_font\",\n    base_size = bts\n  ) +\n  theme(\n    panel.grid.major = element_line(\n      linetype = 3,\n      linewidth = 0.25,\n      colour = \"grey70\"\n    ),\n    panel.grid.minor = element_line(\n      linetype = 3,\n      linewidth = 0.25,\n      colour = \"grey70\"\n    ),\n    axis.line.y = element_line(\n      linetype = 1,\n      linewidth = 0.6,\n      colour = text_col,\n      arrow = arrow(length = unit(5, \"mm\"))\n    ),\n    axis.ticks.length = unit(0, \"mm\"),\n    axis.line.x = element_line(\n      linetype = 1,\n      linewidth = 0.6,\n      colour = text_col,\n      arrow = arrow(\n        angle = 90,\n        ends = \"both\",\n        length = unit(7, \"mm\")\n      )\n    ),\n    plot.margin = margin(10,10,10,80, \"mm\"),\n    plot.title = element_text(\n      colour = text_hil,\n      size = 2.7 * bts,\n      family = \"title_font\",\n      margin = margin(10,0,0,0, \"mm\")\n    ),\n    plot.subtitle = element_text(\n      colour = text_hil,\n      size = bts * 0.9, \n      family = \"title_font\",\n      margin = margin(5,0,5,0, \"mm\"),\n      lineheight = 0.3\n    ),\n    plot.caption = element_textbox(\n      hjust = 0.5,\n      family = \"caption_font\",\n      colour = text_hil\n    ),\n    axis.title = element_text(\n      colour = text_col,\n      margin = margin(0,0,0,0, \"mm\")\n    ),\n    plot.title.position = \"plot\"\n  )\n\n\nAdding insets and annotations using (Pedersen 2024)\n\n\nCode\n# QR Code for the plot\nurl_graphics &lt;- paste0(\n  \"https://aditya-dahiya.github.io/projects_presentations/projects/\",\n  # The file name of the current .qmd file\n  \"owid_fertility\",\n  \".qmd\"\n)\n# remotes::install_github('coolbutuseless/ggqr')\n# library(ggqr)\nplot_qr &lt;- ggplot(\n  data = NULL, \n  aes(x = 0, y = 0, label = url_graphics)\n  ) + \n  ggqr::geom_qr(\n    colour = text_hil, \n    fill = bg_col,\n    size = 2.2\n    ) +\n  # labs(caption = \"Scan for the Interactive Version\") +\n  coord_fixed() +\n  theme_void() +\n  theme(plot.background = element_rect(\n    fill = NA, \n    colour = NA\n    ),\n    plot.caption = element_text(\n      hjust = 0.5,\n      margin = margin(0,0,0,0, \"mm\"),\n      family = \"caption_font\",\n      size = bts/1.8\n    )\n  )\n\nplot_data &lt;- ggplot() +\n  annotate(\n    geom = \"text\",\n    x = 0, y = 0,\n    label = str_wrap(data_annotation, 30),\n    family = \"caption_font\",\n    colour = text_hil,\n    lineheight = 0.3, \n    size = bts / 6,\n    hjust = 0\n  ) +\n  theme_void()\n\ng_full &lt;- g +\n  inset_element(\n    p = plot_data,\n    left = -0.07, right = 0.12,\n    top = 0.8, bottom = 0.6,\n    align_to = \"full\",\n    clip = FALSE\n  ) +\n  inset_element(\n    p = plot_qr,\n    left = 0.025, right = 0.12,\n    top = 0.98, bottom = 0.77,\n    align_to = \"full\",\n    clip = FALSE\n  ) +\n  plot_annotation(\n    theme = theme(\n      plot.background = element_rect(\n        fill = \"transparent\", colour = \"transparent\"\n      ),\n      panel.background = element_rect(\n        fill = \"transparent\", colour = \"transparent\"\n      )\n    )\n  )\n\n\nSave the graphic and a thumbnail\n\n\nCode\nggsave(\n  filename = here::here(\"data_vizs\", \"a4_owid_fertility.png\"),\n  plot = g_full,\n  width = 297 * 2,\n  height = 210 * 2,\n  units = \"mm\",\n  bg = bg_col\n)\n\nlibrary(magick)\n# Saving a thumbnail for the webpage\nimage_read(here::here(\"data_vizs\", \n                      \"a4_owid_fertility.png\")) |&gt; \n  image_resize(geometry = \"400\") |&gt; \n  image_write(here::here(\"data_vizs\", \"thumbnails\", \n                         \"owid_fertility.png\"))\n\n\n\n\n\n\n\nReferences\n\nPedersen, Thomas Lin. 2024. “Patchwork: The Composer of Plots.” https://CRAN.R-project.org/package=patchwork."
  },
  {
    "objectID": "data_vizs/ind_airports_voronoi.html",
    "href": "data_vizs/ind_airports_voronoi.html",
    "title": "Navigating India: Closest International Airports",
    "section": "",
    "text": "Navigating India: Closest International Airports\nThe map of India illustrates the locations of international airports and the regions nearest to each, highlighted with distinct colors using Voronoi tessellation. The size of the dots represents the annual passenger traffic for each airport in 2023, with larger dots indicating busier airports. The geographical boundaries of India are sourced from the Survey of India. Airport locations are obtained from the OpenFlights database, accessed through the {airportr} package in R. Passenger traffic data is retrieved from Wikipedia using the {rvest} package in R. For more details, refer to Survey of India, OpenFlights, and Wikipedia.\n\n\n\nThis map of India shows the locations of international airports and the areas closest to each one, highlighted in different colors. The size of each airport’s dot represents how many passengers used it in 2023, with larger dots indicating busier airports.\n\n\n\nAn interactive version\n\n\n\n\n\n\n\n\nFigure 1: Sources of Data: The map of India is based on official data from the Survey of India. International airports are plotted using data from the OpenFlights database, accessed via the {airportr} package in R. Voronoi tessellation is applied to depict areas closest to each airport, with the method highlighting regions by nearest airport proximity. Airport dot sizes, representing annual passenger traffic for 2023, are sourced from Wikipedia through the {rvest} package in R.\n\n\n\n\n\n\nHow I made this graphic?\nGetting the data\n\n\nCode\n# Data Import and Wrangling Tools\nlibrary(tidyverse)            # All things tidy\n\n# Final plot tools\nlibrary(scales)               # Nice Scales for ggplot2\nlibrary(fontawesome)          # Icons display in ggplot2\nlibrary(ggtext)               # Markdown text support for ggplot2\nlibrary(showtext)             # Display fonts in ggplot2\n# library(colorspace)         # To lighten and darken colours\n\n# Maps related packages\nlibrary(sf)                   # Geomteric objects manipulation\n\n# Get country map of India\n# Credits: Survey of India; and Anuj Tiwari @\n# https://github.com/AnujTiwari/India-State-and-Country-Shapefile-Updated-Jan-2020\nindia_map &lt;- read_sf(here::here(\"data\", \"india_map\", \n                                \"India_Country_Boundary.shp\")) |&gt; \n  # During interations, using lower resolution for quick plotting\n  # st_simplify(dTolerance = 1000) |&gt; \n  st_transform(crs = 4326)\n\n\n# Get State Map of India\nindia_state_map &lt;- read_sf(here::here(\n  \"data\", \"india_map\", \"India_State_Boundary.shp\"\n)) |&gt; \n  # During interations, using lower resolution for quick plotting\n  # st_simplify(dTolerance = 1000) |&gt; \n  st_transform(crs = 4326)\n\n# Get locations of Airports in India\nind_airports &lt;- airportr::airports |&gt; \n  janitor::clean_names() |&gt; \n  rename(lat = latitude, lon = longitude, airport = name) |&gt; \n  filter(country == \"India\") |&gt; \n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326) |&gt; \n  # Remove Air Force run airports\n  filter(!str_detect(airport, \"Air Force\")) |&gt; \n  # Only international airports\n  filter(str_detect(airport, \"International\"))\n\n# Check the data: it works!\nggplot() +\n  geom_sf(data = india_map) +\n  geom_sf(data = ind_airports)\n\n# Get passenger traffic data in International airports of India\n# Load necessary libraries\nlibrary(rvest)\n# Wikipedia URL for India's busiest airports\nurl &lt;- \"https://en.wikipedia.org/wiki/List_of_the_busiest_airports_in_India\"\n# Read the HTML content from the webpage\nwebpage &lt;- read_html(url)\n# Extract the table containing the airport data\nairport_table &lt;- webpage |&gt; \n  html_nodes(xpath = '//*[@id=\"mw-content-text\"]/div[1]/table[2]') |&gt; \n  html_table()\n# Convert the list to a data frame\nairport_df &lt;- as.data.frame(airport_table[[1]])\n# Clean the data frame\nairport_data &lt;- airport_df |&gt; \n  select(name_of_airport = Name, \n         iata = `IATA Code`, \n         passengers_2023 = `Passengers  2022–23`) |&gt; \n  mutate(\n    passengers_2023 = as.numeric(gsub(\",\", \"\", passengers_2023))\n  )\nrm(airport_df, webpage, airport_table, url)\n\n\nVisualization Parameters\n\n\nCode\n# Font for titles\nfont_add_google(\"Merienda\",\n  family = \"title_font\"\n) \n\n# Font for the caption\nfont_add_google(\"Saira Extra Condensed\",\n  family = \"caption_font\"\n) \n\n# Font for plot text\nfont_add_google(\"Fjalla One\",\n  family = \"body_font\"\n) \n\nshowtext_auto()\n\n# Background Colour\nbg_col &lt;- \"#fffee6\"\ntext_col &lt;- \"#400600\"\ntext_hil &lt;- \"#630b01\"\n\n# Base Text Size\nbts &lt;- 80\n\nplot_title &lt;- \"India's Airport Proximity Map\"\n\nplot_subtitle &lt;- str_wrap(\"Locations of India's international airports and the areas closest to each one. The size of each airport's dot represents passenger traffic in 2023 - larger dots mean busier airports. The number in brackets are the passengers handled by the airport in the year 2023.\", 72)\nstr_view(plot_subtitle)\n\n# Caption stuff for the plot\nsysfonts::font_add(\n  family = \"Font Awesome 6 Brands\",\n  regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\")\n)\nsocial_caption_1 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;&#xf09b;&lt;/span&gt; &lt;span style='color: {text_col}'&gt;aditya-dahiya  &lt;/span&gt;\")\nsocial_caption_2 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;&#xe61b;&lt;/span&gt; &lt;span style='color: {text_col}'&gt;@adityadahiyaias &lt;/span&gt;\")\nplot_caption &lt;- paste0(\n  \"**Data:** Survey of India; Open Flights Database  |  \",\n  \"**Code:** \", social_caption_1, \n  \" |  **Graphics:** \", social_caption_2\n  )\n\ndata_source &lt;- str_wrap(\"Sources of Data: The map of India is based on official data from the Survey of India. International airports are plotted using data from the OpenFlights database, accessed via the {airportr} package in R. Voronoi tessellation is applied to depict areas closest to each airport, with the method highlighting regions by nearest airport proximity. Airport dot sizes, representing annual passenger traffic for 2023, are sourced from Wikipedia through the {rvest} package in R.\", 80)\n\ndata_source |&gt; str_view()\n\n\nData Wrangling\n\n\nCode\n# Credits: https://stackoverflow.com/questions/76856625/perimeter-of-voronoi-cells\n\nvoronoi_lines &lt;- ind_airports |&gt; \n  st_union() |&gt; \n  st_voronoi() |&gt;\n  st_collection_extract(\"POLYGON\") |&gt; \n  st_sf(geometry = _) |&gt; \n  st_crop(st_bbox(india_map)) |&gt; \n  st_intersection(india_map) \n\n# Set seed for reproducability  \nset.seed(42)\nvoronoi_lines &lt;- voronoi_lines |&gt; \n  mutate(fill_var = sample(\n  x = letters[1:20],\n  size = nrow(voronoi_lines),\n  replace = T\n  )\n)\n\n\nVisualization\n\n\nCode\ng_base &lt;- ggplot() +\n  geom_sf(\n    data = india_map,\n    colour = text_col,\n    fill = \"transparent\",\n    linewidth = 1\n  ) +\n  geom_sf(data = voronoi_lines,\n          mapping = aes(fill = fill_var),\n          alpha = 0.5,\n          colour = bg_col) +\n  geom_sf(\n    data = ind_airports |&gt; left_join(airport_data),\n    mapping = aes(size = passengers_2023),\n    colour = text_col,\n    alpha = 0.75\n  ) +\n  geom_sf(\n    data = india_state_map,\n    colour = \"grey50\",\n    fill = \"transparent\"\n  ) +\n  \n  # Using ggrepel to label the airports with geom_sf_text\n  # Technique Credits:https://github.com/slowkow/ggrepel/issues/111\n  ggrepel::geom_text_repel(\n    data = ind_airports |&gt; left_join(airport_data),\n    mapping = aes(\n      geometry = geometry,\n      label = paste0(\n        airport, \n        \"\\n\", city, \" (\",\n        number(passengers_2023, big.mark = \",\"), \n        \")\"\n      )\n    ),\n    stat = \"sf_coordinates\",\n    min.segment.length = 0,\n    family = \"caption_font\",\n    size = bts / 5,\n    lineheight = 0.3,\n    force = 10,\n    force_pull = 0.5\n  ) +\n  labs(\n    title = plot_title,\n    subtitle = plot_subtitle,\n    caption = plot_caption\n  ) +\n  paletteer::scale_fill_paletteer_d(\"palettesForR::Windows\") +\n  \n  # Scales and Coordinates\n  coord_sf(clip = \"off\") +\n  scale_size(range = c(2, 10)) +\n  \n  # Themes\n  ggthemes::theme_map(\n    base_size = bts,\n    base_family = \"body_font\"\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      size = 2.8 * bts,\n      colour = text_hil,\n      margin = margin(10,0,10,0, \"mm\"),\n      family = \"title_font\"\n    ),\n    plot.subtitle = element_text(\n      colour = text_hil,\n      margin = margin(0,0,0,0, \"mm\"),\n      lineheight = 0.35,\n      size = 1.2 * bts\n    ),\n    plot.caption = element_textbox(\n      colour = text_hil,\n      family = \"caption_font\",\n      hjust = 0.5\n    )\n  ) \n\n\nAdd annotations and insets\n\n\nCode\n# QR Code for the plot\nurl_graphics &lt;- paste0(\n  \"https://aditya-dahiya.github.io/projects_presentations/projects/\",\n  # The file name of the current .qmd file\n  \"ind_airports_voronoi\",\n  \".qmd\"\n)\n# remotes::install_github('coolbutuseless/ggqr')\n# library(ggqr)\nplot_qr &lt;- ggplot(\n  data = NULL, \n  aes(x = 0, y = 0, label = url_graphics)\n  ) + \n  ggqr::geom_qr(\n    colour = text_hil, \n    fill = bg_col,\n    size = 2\n    ) +\n  # labs(caption = \"Scan for the Interactive Version\") +\n  coord_fixed() +\n  theme_void() +\n  labs(caption = \"Interactive Version\") +\n  theme(plot.background = element_rect(\n    fill = NA, \n    colour = NA\n    ),\n    plot.caption = element_text(\n      hjust = 0.5,\n      margin = margin(0,0,0,0, \"mm\"),\n      family = \"caption_font\",\n      size = bts/1.5,\n      colour = text_hil\n    )\n  )\n\ninset1 &lt;- ggplot() +\n  annotate(\n    geom = \"text\",\n    x = 0, y = 0,\n    label = data_source,\n    lineheight = 0.3,\n    family = \"caption_font\",\n    hjust = 1,\n    size = bts / 4,\n    colour = text_col\n  ) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(\n      fill = \"transparent\",\n      colour = \"transparent\"\n    ),\n    panel.background = element_rect(\n      fill = \"transparent\",\n      colour = \"transparent\"\n    )\n  )\n\nlibrary(patchwork)\ng &lt;- g_base +\n  inset_element(\n    p = plot_qr,\n    left = 0.82, right = 0.96,\n    top = 0.91, bottom = 0.78,\n    align_to = \"full\"\n  ) +\n  inset_element(\n    p = inset1,\n    left = 0.55, right = 1.25,\n    top = 0.8, bottom = 0.55,\n    align_to = \"full\"\n  ) +\n  plot_annotation(\n    theme = theme(\n      plot.background = element_rect(\n        fill = \"transparent\",\n        colour = \"transparent\"\n      ),\n      panel.background = element_rect(\n        fill = \"transparent\",\n        colour = \"transparent\"\n      )\n    )\n  )\n\nggsave(\n  filename = here::here(\"data_vizs\", \"a4_ind_airports_voronoi.png\"),\n  plot = g,\n  height = 297 * 2,\n  width = 210 * 2,\n  units = \"mm\",\n  bg = bg_col\n)\n\n\nSave graphic and a thumbnail\n\n\nCode\nggsave(\n  filename = here::here(\"data_vizs\", \"a4_ind_airports_voronoi.png\"),\n  plot = g,\n  height = 297 * 2,\n  width = 210 * 2,\n  units = \"mm\",\n  bg = bg_col\n)\n\n\nlibrary(magick)\n# Saving a thumbnail for the webpage\nimage_read(here::here(\"data_vizs\", \n                      \"a4_ind_airports_voronoi.png\")) |&gt; \n  image_resize(geometry = \"400\") |&gt; \n  image_write(here::here(\"data_vizs\", \"thumbnails\", \n                         \"ind_airports_voronoi.png\"))"
  },
  {
    "objectID": "data_vizs/wb_decadal_pop_change.html",
    "href": "data_vizs/wb_decadal_pop_change.html",
    "title": "Population changes in each decade (1960s - 2010s)",
    "section": "",
    "text": "Rising and Falling: Nations’ Population in past 6 Decades\nThe graphic is a beeswarm scatter-plot illustrating the decadal population changes for each country from 1960 to 2020, based on data sourced from the official World Bank databank. This data, encompassing total population figures derived from midyear estimates, adheres to the de-facto population definition, counting all residents irrespective of legal status or citizenship. The data originates from multiple reputable sources, including the United Nations Population Division, various national statistical offices, Eurostat, the U.S. Census Bureau, and the Secretariat of the Pacific Community.\nIn the scatterplot, each column corresponds to a decade, with the y-axis representing the percentage change in population. Each dot signifies a country, color-coded by continent according to World Bank regions, effectively illustrating regional demographic trends over time. The plot also highlights and labels the most significant outliers, showcasing the three countries with the highest population increases and the two countries with the most substantial decreases for each decade, providing a clear visual representation of extreme demographic shifts across different periods.\n\n\n\nThis bee-swarm scatterplot illustrates decadal population changes by country from 1960s to 2020s, showcasing the percentage growth or decline for each decade. It reveals rapid population expansions in Gulf countries during economic booms and notable declines in war-torn and Eastern European nations, with color-coded dots representing different continents. The plot underscores the increasing growth rates in Sub-Saharan Africa and the stagnation or decline in Europe and Latin America.\n\n\n\n\nAn Interactive Version of the same chart\n\n\n\n\n\n\n\n\nFigure 1: The beeswarm scatterplot of decadal population growth reveals that Gulf countries experienced the most rapid population expansions during the oil booms of the 1960s, 1970s, and economic boom of the 2000s. Population declines predominantly occurred in war-torn regions like Afghanistan (1980s) and Cambodia (1970s), with sharp declines also noted in Eastern Europe in the 2000s and 2010s, particularly in Bosnia Herzegovina, Latvia, and Lithuania. Additionally, Sub-Saharan African countries are showing increasing decadal population growth rates, while Europe and Latin American countries are experiencing stagnation or decline, often falling below the 0% growth line.\n\n\n\n\n\n\n\n\n\n\nFigure 2: The beeswarm scatterplot of decadal population growth reveals that Gulf countries experienced the most rapid population expansions during the oil booms of the 1960s, 1970s, and economic boom of the 2000s. Population declines predominantly occurred in war-torn regions like Afghanistan (1980s) and Cambodia (1970s), with sharp declines also noted in Eastern Europe in the 2000s and 2010s, particularly in Bosnia Herzegovina, Latvia, and Lithuania. Additionally, Sub-Saharan African countries are showing increasing decadal population growth rates, while Europe and Latin American countries are experiencing stagnation or decline, often falling below the 0% growth line.\n\n\n\n\n\n\n\nHow I made these graphics?\nGetting the data\n\n\nCode\n# Data Import and Wrangling Tools\nlibrary(tidyverse)            # All things tidy\nlibrary(janitor)              # Cleaning names etc.\nlibrary(wbstats)              # Fetching World Bank Data\n\n# Final plot tools\nlibrary(scales)               # Nice Scales for ggplot2\nlibrary(fontawesome)          # Icons display in ggplot2\nlibrary(ggtext)               # Markdown text support for ggplot2\nlibrary(showtext)             # Display fonts in ggplot2\nlibrary(gganimate)            # For animation\n\n\nSetting Parameters\n\n\nCode\n# Font for titles\nfont_add_google(\"Dosis\",\n  family = \"title_font\"\n) \n\n# Font for the caption\nfont_add_google(\"Saira Extra Condensed\",\n  family = \"caption_font\"\n) \n\n# Font for plot text\nfont_add_google(\"Saira Semi Condensed\",\n  family = \"body_font\"\n) \n\nshowtext_auto()\n\n# Background Colour\nbg_col &lt;- \"white\"\ntext_col &lt;- \"grey15\"\ntext_hil &lt;- \"grey30\"\n\nmypal &lt;- paletteer::paletteer_d(\"nbapalettes::nuggets_city2\")\n\n# Base Text Size\nbts &lt;- 20\n\n\nplot_title &lt;- \"Rising and Falling: Nations' Population in past 6 Decades\"\n\nplot_subtitle &lt;- str_wrap(\"The beeswarm scatterplot of decadal population growth reveals that Gulf countries experienced the most rapid population expansions during the oil booms of the 1960s, 1970s, and economic boom of the 2000s. Population declines predominantly occurred in war-torn regions like Afghanistan (1980s) and Cambodia (1970s), with sharp declines also noted in Eastern Europe in the 2000s and 2010s, particularly in Bosnia Herzegovina, Latvia, and Lithuania. Additionally, Sub-Saharan African countries are showing increasing decadal population growth rates, while Europe and Latin American countries are experiencing stagnation or decline, often falling below the 0% growth line.\", 170)\n\ntext1_annotate &lt;- str_wrap(\"The population surges in the UAE, Qatar, and Kuwait during the 1960s, 1970s, and 2000s were driven primarily by the discovery and exploitation of vast oil reserves, leading to rapid economic growth and significant infrastructure development. This economic boom attracted a large influx of foreign workers and expatriates to support the burgeoning industries.\", 40)\n\ntext2_annotate &lt;- str_wrap(\"About the Data: The data for the plot is sourced from the official World Bank databank, encompassing total population figures from 1960 to 2023. These midyear estimates are based on the de facto definition of population, counting all residents regardless of legal status or citizenship. The data is compiled from multiple reputable sources, including the United Nations Population Division, national statistical offices, Eurostat, the U.S. Census Bureau, and the Secretariat of the Pacific Community, ensuring comprehensive and reliable demographic information.\", 50)\n\n# Caption stuff for the plot\nsysfonts::font_add(\n  family = \"Font Awesome 6 Brands\",\n  regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\")\n)\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nsocial_caption_1 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{github_username}  &lt;/span&gt;\")\nsocial_caption_2 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{xtwitter_username}&lt;/span&gt;\")\n\n\nplot_caption &lt;- paste0(\n  \"**Data:** World Bank Databank. |  \",\n  \"**Code:** \", \n  social_caption_1, \n  \" |  **Graphics:** \", \n  social_caption_2\n  )\n\n\nData Wrangling\n\n\nCode\nlibrary(wbstats)\n\nlink_regions &lt;- wbstats::wb_countries() |&gt; \n  select(iso2c, region) |&gt; \n  mutate(iso2c = str_to_lower(iso2c))\n\n\ndf3 &lt;- rawdf2 |&gt; \n  select(country, iso2c, year = date, value) |&gt; \n  mutate(iso2c = str_to_lower(iso2c)) |&gt; \n  drop_na()\n\n# Not plotting very small territories with population below 750,000\nnot_plot &lt;- df3 |&gt; \n  filter(year == 2022) |&gt; \n  filter(value &lt; 7.5e5) |&gt; \n  pull(iso2c)\n\n# A treemap to show how many coutnries lie within population of some\n# of the most populous countries\n\n# countries_to_visualize &lt;- df3 |&gt; \n#   filter(year == 2022) |&gt; \n#   slice_max(order_by = value, n = 10) |&gt; \n#   pull(iso2c)\n# \n# too_small_countries &lt;- df3 |&gt; \n#   filter(year == 2022) |&gt; \n#   filter(value &lt; 1e5) |&gt; \n#   pull(country)\n# \n# df3 |&gt; \n#   mutate(\n#     country = if_else(\n#       iso2c %in% countries_to_visualize,\n#       country,\n#       \"Others\"\n#     )\n#   ) |&gt; \n#   group_by(year, country) |&gt; \n#   summarize(value = sum(value, na.rm = TRUE)) |&gt; \n#   ungroup() |&gt; \n#   ggplot(aes(x = year, y = value, fill = country, group = country)) +\n#   ggstream::geom_stream(type = \"proportional\", colour = \"white\")\n# \n# \n# df3 |&gt; \n#   visdat::vis_miss()\n# \n# big_country &lt;- \"India\"\n# view_year &lt;- 2023\n# \n# total_pop_to_fill &lt;- df3 |&gt; \n#   filter(year == view_year & country == big_country) |&gt; \n#   pull(value)\n# \n# plotdf3 &lt;- df3 |&gt; \n#   filter(year == view_year) |&gt; \n#   arrange(value) |&gt; \n#   mutate(cumsum_value = cumsum(value)) |&gt; \n#   filter(cumsum_value &lt;= total_pop_to_fill)\n#   \n# plotdf3 |&gt; \n#   ggplot(aes(area = value, fill = country)) +\n#   treemapify::geom_treemap(colour = \"white\") +\n#   labs(\n#     title = paste0(\"The scale of \", big_country, \"'s population\"),\n#     subtitle = paste0(\"Population of \", \n#                       big_country, \n#                       \" in \", view_year, \": \",\n#                       number(total_pop_to_fill, big.mark = \",\"),\n#                       \"\\n\",\n#                       nrow(plotdf3), \n#                       \" countries combined have lower population than \", \n#                       big_country)\n#   ) +\n#   theme_void() +\n#   theme(\n#     legend.position = \"none\",\n#     plot.title = element_text(hjust = 0.5)\n#   )\n\n\n\n# A new thought stream - decadal population rise\ndecade_levels &lt;- c(\n  \"rise_overall\",\n  \"rise60s\",\n  \"rise70s\",\n  \"rise80s\",\n  \"rise90s\",\n  \"rise00s\",\n  \"rise10s\"\n)\n\n# Decade wise population rise in each country\ndecade_df &lt;- df3 |&gt; \n  filter(!(iso2c %in% not_plot)) |&gt; \n  mutate(year = paste0(\"y_\", year)) |&gt; \n  pivot_wider(\n    id_cols = c(country, iso2c),\n    names_from = year,\n    values_from = value\n  ) |&gt; \n  mutate(\n    rise_overall = (y_2023 - y_1961)/y_1961,\n    rise60s = (y_1970 - y_1961)/y_1961,\n    rise70s = (y_1980 - y_1971)/y_1971,\n    rise80s = (y_1990 - y_1981)/y_1981,\n    rise90s = (y_2000 - y_1991)/y_1991,\n    rise00s = (y_2010 - y_2000)/y_2000,\n    rise10s = (y_2020 - y_2010)/y_2010\n  ) |&gt; \n  select(country, iso2c, starts_with(\"rise\")) |&gt; \n  pivot_longer(\n    cols = -c(country, iso2c),\n    names_to = \"decade\",\n    values_to = \"value\"\n  ) |&gt; \n  left_join(link_regions) |&gt; \n  mutate(\n    decade = fct(decade, levels = decade_levels),\n    region = fct(region, levels = region_levels)\n  )\n\n# Selecting countries to highlight and annotate in the plot\n# Top 3 high rise countries each decade\nselcon1 &lt;- decade_df |&gt; \n  group_by(decade) |&gt; \n  slice_max(order_by = value, n = 3) |&gt; \n  ungroup()\n\n# Bottom 2 countries in each decade\nselcon2 &lt;- decade_df |&gt; \n  group_by(decade) |&gt; \n  slice_min(order_by = value, n = 2) |&gt; \n  ungroup()\n\n\n# Overall 10 most populous countries\nselcon3 &lt;- rawdf2 |&gt; \n  filter(date == 2022) |&gt; \n  slice_max(order_by = value, n = 10) |&gt; \n  mutate(iso2c = str_to_lower(iso2c)) |&gt; \n  pull(iso2c)\n\nselcons &lt;- bind_rows(\n  selcon1,\n  selcon2\n) |&gt; \n  mutate(to_show_text = \"display\")\n\nplotdf &lt;- decade_df |&gt; \n  left_join(selcons) |&gt; \n  mutate(\n    to_show_text = if_else(\n      is.na(to_show_text),\n      NA,\n      paste0(country, \" (\", \n             number(round(100*value), suffix = \"%\"),\n             \")\")\n    )\n  )\n\n# Decadal rise overall for the world\noverall_decade_df &lt;- df3 |&gt; \n  group_by(year) |&gt; \n  summarise(total_pop = sum(value, na.rm = T)) |&gt; \n  mutate(\n    country = \"World\",\n    year = paste0(\"y_\", year),\n    \n  ) |&gt; \n  pivot_wider(\n    id_cols = country,\n    values_from = total_pop,\n    names_from = year\n  ) |&gt; \n  mutate(\n    rise60s = (y_1970 - y_1961)/y_1961,\n    rise70s = (y_1980 - y_1971)/y_1971,\n    rise80s = (y_1990 - y_1981)/y_1981,\n    rise90s = (y_2000 - y_1991)/y_1991,\n    rise00s = (y_2010 - y_2000)/y_2000,\n    rise10s = (y_2020 - y_2010)/y_2010,\n    .keep = \"none\"\n  ) |&gt; \n  pivot_longer(\n    cols = everything(),\n    names_to = \"decade\",\n    values_to = \"value\"\n  ) |&gt; \n  mutate(decade = fct(decade, levels = decade_levels))\n\n\nVisualization\n\n\nCode\ng_base &lt;- plotdf |&gt; \n  filter(decade != \"rise_overall\") |&gt; \n  ggplot(\n    mapping = aes(\n      x = decade,\n      y = value,\n      label = country,\n      colour = region\n    )\n  ) +\n  \n  # Beeswarm of the plot\n  geom_point(\n    pch = 19,\n    alpha = 1,\n    size = 5, \n    position = ggbeeswarm::position_beeswarm(\n      method = \"hex\",\n      cex = 2,\n      corral.width = 0.9,\n      corral = \"wrap\"\n    )\n  ) +\n  # Displaying text country names\n  ggrepel::geom_text_repel(\n    mapping = aes(label = to_show_text),\n    position = ggbeeswarm::position_beeswarm(\n      method = \"hex\",\n      cex = 2,\n      corral.width = 0.9,\n      corral = \"wrap\"\n    ),\n    lineheight = 0.35,\n    colour = text_hil,\n    hjust = 0,\n    vjust = 0.5,\n    family = \"body_font\",\n    size = bts\n  ) +\n  \n  # Horizontal Line Annotations\n  geom_hline(\n    yintercept = 1,\n    colour = text_hil,\n    linewidth = 0.5,\n    alpha = 0.5\n  ) +\n  annotate(\n    geom = \"text\",\n    label = \"100% rise -- population doubled in the decade\",\n    x = 7,\n    y = 1.02,\n    family = \"caption_font\",\n    colour = text_hil,\n    hjust = 1,\n    vjust = 0,\n    size = bts\n  ) +\n  geom_hline(\n    yintercept = 2,\n    colour = text_hil,\n    linewidth = 0.5,\n    alpha = 0.5\n  ) +\n  annotate(\n    geom = \"text\",\n    label = \"200% rise -- population tripled in the decade\",\n    x = 7,\n    y = 2.02,\n    family = \"caption_font\",\n    colour = text_hil,\n    hjust = 1,\n    vjust = 0,\n    size = bts\n  ) +\n  geom_hline(\n    yintercept = 0,\n    colour = text_hil,\n    linewidth = 0.5,\n    alpha = 0.5\n  ) +\n  annotate(\n    geom = \"text\",\n    label = \"Static Population\",\n    x = 7,\n    y = 0.02,\n    family = \"caption_font\",\n    colour = text_hil,\n    hjust = 1,\n    vjust = 0,\n    size = bts\n  ) +\n  annotate(\n    geom = \"text\",\n    x = 2.5,\n    y = 1.9,\n    label = text2_annotate,\n    colour = text_hil,\n    family = \"caption_font\",\n    size = bts/1.5,\n    lineheight = 0.3,\n    hjust = 0,\n    vjust = 1\n  ) +\n  \n  # Labels\n  labs(\n    y = \"Change in population (%)\",\n    x = NULL,\n    colour = NULL,\n    title = plot_title,\n    subtitle = plot_subtitle,\n    caption = plot_caption\n  ) +\n\n  # Scales and Coordinates\n  scale_color_manual(values = mypal) +\n  scale_y_continuous(\n    labels = label_percent()\n  ) +\n  scale_x_discrete(\n    labels = c(\"1960s\", \"1970s\", \"1980s\", \"1990s\", \"2000s\", \"2010s\"),\n    expand = expansion(c(-0.05, 0.05))\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme_minimal(\n    base_family = \"body_font\",\n    base_size = 4 * bts\n  ) +\n  theme(\n    legend.position = c(0.99, 0.92),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    legend.justification = c(1, 1),\n    legend.text = element_text(\n      margin = margin(0,0,0,2, \"mm\"),\n      colour = text_hil,\n      family = \"body_font\",\n      size = 4 * bts\n    ),\n    legend.key.height = unit(10, \"mm\"),\n    plot.title = element_text(\n      size = 10.5 * bts,\n      colour = text_hil,\n      family = \"title_font\",\n      margin = margin(10,0,5,0, \"mm\")\n    ),\n    plot.subtitle = element_text(\n      lineheight = 0.3,\n      colour = text_col,\n      size = 3 * bts,\n      margin = margin(0,0,0,0, \"mm\")\n    ),\n    plot.caption = element_textbox(\n      colour = text_hil,\n      family = \"caption_font\",\n      margin = margin(5,0,0,0, \"mm\"),\n      hjust = 0.5\n    ),\n    panel.grid.major.y = element_line(\n      linewidth = 0.5\n    ),\n    legend.background = element_rect(\n      fill = bg_col,\n      colour = \"transparent\"\n    ),\n    plot.title.position = \"plot\",\n    axis.text.x = element_text(\n      size = 5 * bts,\n      colour = text_col,\n      margin = margin(0,0,0,0, \"mm\")\n    ),\n    axis.text.y = element_text(\n      margin = margin(0,0,0,0, \"mm\")\n    ),\n    axis.title = element_text(\n      colour = text_hil,\n      margin = margin(0,0,0,0, \"mm\")\n    )\n  )\n\n\nSave graphic and a thumbnail\n\n\nCode\n# QR Code for the plot\nurl_graphics &lt;- paste0(\n  \"https://aditya-dahiya.github.io/projects_presentations/projects/\",\n  # The file name of the current .qmd file\n  \"world_population_animated_donut.html#decade-by-decade-the-worlds-population-story\"\n)\n# remotes::install_github('coolbutuseless/ggqr')\n# library(ggqr)\nplot_qr &lt;- ggplot(\n  data = NULL, \n  aes(x = 0, y = 0, label = url_graphics)\n  ) + \n  ggqr::geom_qr(\n    colour = text_hil, \n    fill = bg_col,\n    size = 2\n    ) +\n  coord_fixed() +\n  theme_void() +\n  theme(plot.background = element_rect(\n    fill = NA, \n    colour = NA\n    )\n  )\n\nlibrary(patchwork)\ng &lt;- g_base +\n  inset_element(\n    p = plot_qr,\n    left = 0.85, right = 0.99,\n    top = 0.95, bottom = 0.8,\n    align_to = \"full\"\n  ) +\n  plot_annotation(\n    theme = theme(\n      plot.background = element_rect(\n        fill = \"transparent\",\n        colour = \"transparent\"\n      ),\n      panel.background = element_rect(\n        fill = \"transparent\",\n        colour = \"transparent\"\n      )\n    )\n  )\n\nggsave(\n  filename = here::here(\"data_vizs\", \"a4_wb_decade_population.png\"),\n  plot = g,\n  height = 210 * 2,\n  width = 297 * 2,\n  units = \"mm\",\n  bg = bg_col\n)\n\nlibrary(magick)\n# Saving a thumbnail for the webpage\nimage_read(here::here(\"data_vizs\", \n                      \"a4_wb_decade_population.png\")) |&gt; \n  image_resize(geometry = \"400\") |&gt; \n  image_write(here::here(\"data_vizs\", \"thumbnails\", \n                         \"wb_decadal_pop_change.png\"))\n\n\nCode for the Interactive Version\n\n\nCode\n# Data Import and Wrangling Tools\nlibrary(tidyverse)            # All things tidy\nlibrary(janitor)              # Cleaning names etc.\nlibrary(wbstats)              # Fetching World Bank Data\n\n# Final plot tools\nlibrary(scales)               # Nice Scales for ggplot2\nlibrary(fontawesome)          # Icons display in ggplot2\nlibrary(ggtext)               # Markdown text support for ggplot2\nlibrary(showtext)             # Display fonts in ggplot2\nlibrary(gganimate)            # For animation\n\n# Loading the data\nrawdf2 &lt;- wb_data(\n  indicator = \"SP.POP.TOTL\",\n  start_date = 1960,\n  end_date = 2023,\n  return_wide = FALSE,\n  gapfill = TRUE,\n  mrv = 65\n)\n\n# Correct Order of regions for plotting in colours\nregion_levels &lt;- c(\n  \"East Asia & Pacific\",\n  \"Europe & Central Asia\",\n  \"Sub-Saharan Africa\",\n  \"Latin America & Caribbean\",\n  \"South Asia\",\n  \"Middle East & North Africa\",\n  \"North America\"\n)\n\n# Regions for the countries\nlink_regions &lt;- wbstats::wb_countries() |&gt; \n  select(iso2c, region) |&gt; \n  mutate(iso2c = str_to_lower(iso2c))\n\n# Font for titles\nfont_add_google(\"Dosis\",\n  family = \"title_font\"\n) \n\n# Font for the caption\nfont_add_google(\"Saira Extra Condensed\",\n  family = \"caption_font\"\n) \n\n# Font for plot text\nfont_add_google(\"Saira Semi Condensed\",\n  family = \"body_font\"\n) \n\nshowtext_auto()\n\n# Background Colour\nbg_col &lt;- \"white\"\ntext_col &lt;- \"grey15\"\ntext_hil &lt;- \"grey30\"\n\nmypal &lt;- paletteer::paletteer_d(\"nbapalettes::nuggets_city2\")\n\n# Base Text Size\nbts &lt;- 10\n\n# Dataframe for this analysis\ndf3 &lt;- rawdf2 |&gt; \n  select(country, iso2c, year = date, value) |&gt; \n  mutate(iso2c = str_to_lower(iso2c)) |&gt; \n  drop_na()\n\n# Not plotting very small territories with population below 750,000\nnot_plot &lt;- df3 |&gt; \n  filter(year == 2022) |&gt; \n  filter(value &lt; 7.5e5) |&gt; \n  pull(iso2c)\n\n# Decadal population rise\ndecade_levels &lt;- c(\n  \"rise_overall\",\n  \"rise60s\",\n  \"rise70s\",\n  \"rise80s\",\n  \"rise90s\",\n  \"rise00s\",\n  \"rise10s\"\n)\n\n# Decade wise population rise in each country\ndecade_df &lt;- df3 |&gt; \n  filter(!(iso2c %in% not_plot)) |&gt; \n  mutate(year = paste0(\"y_\", year)) |&gt; \n  pivot_wider(\n    id_cols = c(country, iso2c),\n    names_from = year,\n    values_from = value\n  ) |&gt; \n  mutate(\n    rise_overall = (y_2023 - y_1961)/y_1961,\n    rise60s = (y_1970 - y_1961)/y_1961,\n    rise70s = (y_1980 - y_1971)/y_1971,\n    rise80s = (y_1990 - y_1981)/y_1981,\n    rise90s = (y_2000 - y_1991)/y_1991,\n    rise00s = (y_2010 - y_2000)/y_2000,\n    rise10s = (y_2020 - y_2010)/y_2010\n  ) |&gt; \n  select(country, iso2c, starts_with(\"rise\")) |&gt; \n  pivot_longer(\n    cols = -c(country, iso2c),\n    names_to = \"decade\",\n    values_to = \"value\"\n  ) |&gt; \n  left_join(link_regions) |&gt; \n  mutate(\n    decade = fct(decade, levels = decade_levels),\n    region = fct(region, levels = region_levels)\n  )\n\n# Selecting countries to highlight and annotate in the plot\n# Top 3 high rise countries each decade\nselcon1 &lt;- decade_df |&gt; \n  group_by(decade) |&gt; \n  slice_max(order_by = value, n = 3) |&gt; \n  ungroup()\n\n# Bottom 2 countries in each decade\nselcon2 &lt;- decade_df |&gt; \n  group_by(decade) |&gt; \n  slice_min(order_by = value, n = 2) |&gt; \n  ungroup()\n\n\n# Overall 10 most populous countries\nselcon3 &lt;- rawdf2 |&gt; \n  filter(date == 2022) |&gt; \n  slice_max(order_by = value, n = 10) |&gt; \n  mutate(iso2c = str_to_lower(iso2c)) |&gt; \n  pull(iso2c)\n\nselcons &lt;- bind_rows(\n  selcon1,\n  selcon2\n) |&gt; \n  mutate(to_show_text = \"display\")\n\nplotdf &lt;- decade_df |&gt; \n  left_join(selcons) |&gt; \n  mutate(\n    to_show_text = if_else(\n      is.na(to_show_text),\n      NA,\n      paste0(country, \" (\", \n             number(round(100*value), suffix = \"%\"),\n             \")\")\n    )\n  ) |&gt; \n  mutate(id_var = row_number())\n\n# Decadal rise overall for the world\noverall_decade_df &lt;- df3 |&gt; \n  group_by(year) |&gt; \n  summarise(total_pop = sum(value, na.rm = T)) |&gt; \n  mutate(\n    country = \"World\",\n    year = paste0(\"y_\", year),\n    \n  ) |&gt; \n  pivot_wider(\n    id_cols = country,\n    values_from = total_pop,\n    names_from = year\n  ) |&gt; \n  mutate(\n    rise60s = (y_1970 - y_1961)/y_1961,\n    rise70s = (y_1980 - y_1971)/y_1971,\n    rise80s = (y_1990 - y_1981)/y_1981,\n    rise90s = (y_2000 - y_1991)/y_1991,\n    rise00s = (y_2010 - y_2000)/y_2000,\n    rise10s = (y_2020 - y_2010)/y_2010,\n    .keep = \"none\"\n  ) |&gt; \n  pivot_longer(\n    cols = everything(),\n    names_to = \"decade\",\n    values_to = \"value\"\n  ) |&gt; \n  mutate(decade = fct(decade, levels = decade_levels))\n\nplot_title &lt;- \"Rising and Falling: Nations' Population in past 6 Decades\"\n\n# Caption stuff for the plot\nsysfonts::font_add(\n  family = \"Font Awesome 6 Brands\",\n  regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\")\n)\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nsocial_caption_1 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{github_username}  &lt;/span&gt;\")\nsocial_caption_2 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{xtwitter_username}&lt;/span&gt;\")\n\n\nplot_caption &lt;- paste0(\n  \"**Data:** World Bank Databank. |  \",\n  \"**Code:** \", \n  social_caption_1, \n  \" |  **Graphics:** \", \n  social_caption_2\n  )\n\n# Making an alternative for ggbeeswarm for interactivity\nplotdf0 &lt;- plotdf |&gt; \n  mutate(y_value = round_to_fraction(value, 40))\n  \nplotdf1 &lt;- plotdf |&gt; \n  mutate(y_value = round_to_fraction(value, 40)) |&gt; \n  group_by(decade, y_value) |&gt; \n  slice_head(n = 10) |&gt; \n  count() |&gt; \n  rename(gp_nos = n)\n\n# A position multiplication Factor (to manually create a beeswarm)\nposition_vector &lt;- seq(-0.4, +0.4, length.out = 10)\n\nplotdf2 &lt;- plotdf0 |&gt; \n  left_join(plotdf1) |&gt; \n  group_by(decade, y_value) |&gt; \n  arrange(decade, y_value) |&gt; \n  mutate(group_num = row_number()) |&gt; \n  mutate(y_jizz = case_when(\n    group_num ==  1 ~ -0.04444444,\n    group_num ==  2 ~ +0.04444444,\n    group_num ==  3 ~ -0.13333333,\n    group_num ==  4 ~ +0.13333333,\n    group_num ==  5 ~ -0.22222222,\n    group_num ==  6 ~ +0.22222222,\n    group_num ==  7 ~ -0.31111111,\n    group_num ==  8 ~ +0.31111111,\n    group_num ==  9 ~ -0.40000000,\n    group_num == 10 ~ +0.40000000\n  )) |&gt; \n  mutate(y_var = as.numeric(decade) + y_jizz)\n\nbts = 9\n\nlibrary(ggiraph)\n\ng_base &lt;- plotdf2 |&gt; \n  filter(decade != \"rise_overall\") |&gt; \n  ggplot(\n    mapping = aes(\n      x = y_var,\n      y = y_value,\n      label = country,\n      colour = region,\n      data_id = iso2c\n    )\n  ) +\n  \n  # Beeswarm of the plot\n  ggiraph::geom_point_interactive(\n    mapping = aes(\n      tooltip = paste0(\n        \"Country: \",\n        country,\n        \"\\nRegion:\",\n        region,\n        \"\\nDecadal Population Change: \",\n        round(value*100, 1), \" %\"\n      )\n    ),\n    pch = 19,\n    alpha = 1,\n    size = 1.5, \n    hover_nearest = FALSE\n  ) +\n  \n  # Horizontal Line Annotations\n  geom_hline(\n    yintercept = 1,\n    colour = text_hil,\n    linewidth = 0.5,\n    alpha = 0.5\n  ) +\n  annotate(\n    geom = \"text\",\n    label = \"100% rise -- population doubled in the decade\",\n    x = 8.1,\n    y = 1.02,\n    family = \"caption_font\",\n    colour = text_hil,\n    hjust = 1,\n    vjust = 0,\n    size = bts/2\n  ) +\n  geom_hline(\n    yintercept = 2,\n    colour = text_hil,\n    linewidth = 0.5,\n    alpha = 0.5\n  ) +\n  annotate(\n    geom = \"text\",\n    label = \"200% rise -- population tripled in the decade\",\n    x = 8.1,\n    y = 2.02,\n    family = \"caption_font\",\n    colour = text_hil,\n    hjust = 1,\n    vjust = 0,\n    size = bts/2\n  ) +\n  geom_hline(\n    yintercept = 0,\n    colour = text_hil,\n    linewidth = 0.5,\n    alpha = 0.5\n  ) +\n  annotate(\n    geom = \"text\",\n    label = \"Static Population\",\n    x = 8.1,\n    y = 0.02,\n    family = \"caption_font\",\n    colour = text_hil,\n    hjust = 1,\n    vjust = 0,\n    size = bts/2\n  ) +\n  \n  # Labels\n  labs(\n    y = \"Change in population (%)\",\n    x = NULL,\n    colour = NULL,\n    title = plot_title,\n    caption = plot_caption,\n    subtitle = \"Hover over a dot to see Country details. Hover here to read about the Data Source.\"\n  ) +\n\n  # Scales and Coordinates\n  scale_color_manual_interactive(\n    values = mypal,\n    data_id = function(x) x, \n    tooltip = function(x) x\n    ) +\n  scale_y_continuous(\n    labels = label_percent()\n  ) +\n  scale_x_continuous(\n    breaks = 1:7,\n    labels = c(\"\", \"1960s\", \"1970s\", \"1980s\", \n               \"1990s\", \"2000s\", \"2010s\"),\n    limits = c(1.25, 8.15),\n    expand = expansion(0)\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme_minimal(\n    base_family = \"body_font\",\n    base_size = bts\n  ) +\n  theme(\n    legend.position = c(0.99, 0.92),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    legend.justification = c(1, 1),\n    legend.text = element_text(\n      colour = text_hil,\n      family = \"body_font\",\n      size = 1.5 * bts\n    ),\n    legend.key.height = unit(2, \"mm\"),\n    plot.title = element_text(\n      size = 3 * bts,\n      colour = text_hil,\n      family = \"title_font\"\n    ),\n    plot.subtitle = element_text_interactive(\n      size = 1.5 * bts,\n      colour = text_hil,\n      family = \"title_font\",\n      data_id = \"plot.subtitle\",\n      tooltip = \"About the Data: The data for the plot is sourced from the official World Bank databank, encompassing total population figures from 1960 to 2023. These midyear estimates are based on the de facto definition of population, counting all residents regardless of legal status or citizenship. The data is compiled from multiple reputable sources, including the United Nations Population Division, national statistical offices, Eurostat, the U.S. Census Bureau, and the Secretariat of the Pacific Community, ensuring comprehensive and reliable demographic information.\"\n    ),\n    plot.caption = element_textbox(\n      colour = text_hil,\n      family = \"caption_font\",\n      hjust = 0.5,\n      size = 1.5 * bts\n    ),\n    panel.grid.major.y = element_line(\n      linewidth = 0.5\n    ),\n    legend.background = element_rect(\n      fill = bg_col,\n      colour = \"transparent\"\n    ),\n    plot.title.position = \"plot\",\n    axis.text.x = element_text(\n      size = 2 * bts,\n      colour = text_hil,\n      margin = margin(0,0,0,0, \"mm\")\n    ),\n    axis.text.y = element_text(\n      margin = margin(0,0,0,0, \"mm\"),\n      size = 1.5 * bts\n    ),\n    axis.title = element_text(\n      colour = text_hil,\n      margin = margin(0,0,0,0, \"mm\"),\n      size = 1.5 * bts\n    )\n  )\n\ngirafe(\n  ggobj = g_base,\n  options = list(\n    opts_tooltip(\n      opacity = 1,\n      css = \"background-color:#ffffff;color:#333333;padding:2px;border-radius:3px;font-family:Arial\"\n    ),\n    opts_hover(\n      css = \"stroke:black;stroke-width:3px;\"),\n    opts_hover_inv(css = \"opacity:0.2;\"),\n    opts_zoom(max = 10)\n  )\n)"
  },
  {
    "objectID": "projects/world_population_animated_donut.html",
    "href": "projects/world_population_animated_donut.html",
    "title": "Some ingights on the World Population (1960-2023)",
    "section": "",
    "text": "Global population distribution, visualized through an animated donut chart. Using midyear estimates from the World Bank DataBank and inspired by the compelling visual style of James Eagle’s analysis on internet browser popularity, this chart illustrates the percentage share of the total world population across seven distinct regions: East Asia & Pacific, Middle East & North Africa, Europe & Central Asia, South Asia, Latin America & Caribbean, Sub-Saharan Africa, and North America. This engaging animation provides a dynamic perspective on demographic trends, reflecting data sourced from the United Nations Population Division, national statistical offices, and other reputable agencies. It shows how the world’s population is distributed and how these regions contribute to the global demographic landscape.\n\n\n\nAnimated Donut (Pie) Chart of the population-share of 7 different regions in the World’s Total Population. Notice the rising share of South Asia and Africa, and the falling share of the western world.\n\n\n\n\nLoading required libraries and data import\n\n\nCode\n# Data Import and Wrangling Tools\nlibrary(tidyverse)            # All things tidy\nlibrary(janitor)              # Cleaning names etc.\nlibrary(wbstats)              # Fetching World Bank Data\n\n# Final plot tools\nlibrary(scales)               # Nice Scales for ggplot2\nlibrary(fontawesome)          # Icons display in ggplot2\nlibrary(ggtext)               # Markdown text support for ggplot2\nlibrary(showtext)             # Display fonts in ggplot2\nlibrary(gganimate)            # For animation\n\n\nrawdf &lt;- wb_data(\n  indicator = \"SP.POP.TOTL\",\n  country = \"regions_only\",\n  start_date = 1960,\n  end_date = 2023,\n  return_wide = FALSE,\n  gapfill = TRUE,\n  mrv = 65\n) |&gt; \n  select(\n    region = country,\n    year = date,\n    population = value\n  ) \n\nregion_levels &lt;- c(\n  \"South Asia\",\n  \"Sub-Saharan Africa\",\n  \"Latin America & Caribbean\",\n  \"Middle East & North Africa\",\n  \"East Asia & Pacific\",\n  \"Europe & Central Asia\",\n  \"North America\"\n)\n\n\nVisualization Parameters\n\n\nCode\n# Font for titles\nfont_add_google(\"Dosis\",\n  family = \"title_font\"\n) \n\n# Font for the caption\nfont_add_google(\"Saira Extra Condensed\",\n  family = \"caption_font\"\n) \n\n# Font for plot text\nfont_add_google(\"Saira Semi Condensed\",\n  family = \"body_font\"\n) \n\nshowtext_auto()\n\n# Colour Palette\nmypal &lt;- paletteer::paletteer_d(\"feathers::bee_eater\")\nmypal &lt;- paletteer::paletteer_d(\"futurevisions::grand_tour\")\nmypal_fill &lt;- paletteer::paletteer_d(\"ghibli::PonyoLight\")\nmypal_medium &lt;- paletteer::paletteer_d(\"ghibli::PonyoMedium\")\nmypal_col &lt;- paletteer::paletteer_d(\"ghibli::PonyoDark\")\n\n# Background Colour\nbg_col &lt;- \"white\"\n\n# Colour for the text\ntext_col &lt;- \"grey20\"\n\n# Colour for highlighted text\ntext_hil &lt;- \"grey30\" \n\n\nAnnotation Text for the Plot\n\n\nCode\nplot_title &lt;- \"Global Population Distribution\"\n\nplot_subtitle &lt;- \"(1960 to 2023)\"\n\nplot_caption &lt;- \"Data: World Bank.  |   Graphics: @adityadahiyaias on X\"\n\n\nData Wrangling\n\n\nCode\ndf &lt;- rawdf |&gt; \n  group_by(year) |&gt; \n  mutate(percentage = population / sum(population)) |&gt; \n  mutate(region = fct(region, levels = region_levels)) |&gt; \n  ungroup() |&gt; \n  mutate(print_pop = number(population, \n                            accuracy = 0.01,\n                            scale_cut = cut_short_scale())) |&gt; \n  group_by(year) |&gt; \n  mutate(totalpop = sum(population)) |&gt; \n  ungroup()\n\n\nThe static plot & animating it\n\n\nCode\ng &lt;- df |&gt; \n  ggplot(\n    aes(\n      x = 1,\n      y = percentage,\n      fill = region,\n      group = region\n    )\n  ) + \n  geom_col(\n    colour = \"white\",\n    position = position_stack()\n  ) +\n  \n  # Text in the plot / animation\n  geom_text(\n    mapping = aes(\n      label = paste0(\n        round(100*percentage, 0),\n        \"%\"\n        ),\n      colour = region),\n    position = position_stack(vjust = 0.5),\n    family = \"body_font\",\n    fontface = \"bold\",\n    size = 6\n  ) +\n  geom_text(\n    mapping = aes(\n      label = paste0(\n        str_wrap(region, 15),\n        \"\\n\",\n        print_pop\n        ),\n      x = 1.6,\n      colour = region\n    ),\n    position = position_stack(vjust = 0.5),\n    hjust = \"outward\",\n    lineheight = 1,\n    family = \"body_font\",\n    size = 3\n  ) +\n  \n  # Central Year Annotation\n  geom_text(\n    aes(\n      label = as.factor(year),\n      x = -0.4,\n      y = 0\n    ),\n    size = 10,\n    family = \"title_font\",\n    colour = text_hil\n  ) +\n  \n  geom_text(\n    aes(\n      label = paste0(\"Total: \", round(totalpop / 1e9, 1), \" Billion\"),\n      x = -0.8,\n      y = 0\n    ),\n    size = 5,\n    family = \"title_font\",\n    colour = text_hil\n  ) +\n  \n  # Scales\n  scale_y_continuous(expand = expansion(0)) +\n  scale_x_continuous(\n    limits = c(-0.8, 2)\n  ) +\n  scale_fill_manual(values = mypal_fill) +\n  scale_colour_manual(values = mypal_col) +\n  labs(\n    title = plot_title,\n    caption = plot_caption,\n    subtitle = plot_subtitle\n  ) +\n  coord_polar(theta = \"y\") +\n  theme_minimal(\n    base_family = \"body_font\"\n  ) +\n  theme(\n    legend.position = \"none\",\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    plot.title = element_text(\n      hjust = 0.5, \n      family = \"title_font\",\n      colour = text_hil,\n      margin = margin(0,0,0,0),\n      size = 30,\n      face = \"bold\"\n    ),\n    plot.subtitle = element_text(\n      margin = margin(0,0,0,0),\n      colour = text_hil,\n      family = \"title_font\",\n      hjust = 0.5,\n      size = 15\n    ),\n    plot.caption = element_text(\n      hjust = 0.5,\n      family = \"caption_font\",\n      colour = text_hil,\n      margin = margin(0,0,0,0)\n    )\n  )\n\n\ng_anim &lt;- g +\n  transition_states(year) +\n  ease_aes(\"linear\")\n\n\nSavings the animation\n\n\nCode\nanim_save(\n  filename = here::here(\n    \"projects\", \n    \"world_population_animated_donut.gif\"\n    ),\n  animation = g_anim,\n  fps = 5,\n  duration = 20,\n  start_pause = 3,\n  end_pause = 10,\n  height = 500,\n  width = 480\n)\n\n\n\n\n\n\n\n\nThis graphic depicts the yearly percentage changes in population for various countries from 1961 to 2023, highlighting significant increases due to immigration and sharp declines resulting from war and natural disasters.\n\n\nThe data used for these line charts is sourced from the World Bank DataBank, which compiles midyear population estimates based on the de facto definition of population, encompassing all residents regardless of legal status or citizenship. This data, spanning from 1961 to 2023, includes inputs from various reputable sources such as the United Nations Population Division, national statistical offices, Eurostat, and the U.S. Census Bureau. The graphic illustrates the yearly percentage changes in population for different countries, highlighting significant demographic shifts. The analysis reveals notable population increases in countries like the UAE (1969-1977, 2007-2008) and Qatar (2006-2008), likely driven by immigration. Conversely, the charts emphasize sharp population declines due to war or natural disasters in countries such as Lebanon (1978-79), Afghanistan (1981-82), Kuwait (1990-91), Rwanda (1994-95), Kosovo (1998-1999), Syria (2013-2014), Libya (2012), and Ukraine (2022). These trends provide a stark visualization of how political instability, conflict, and crises can dramatically impact population dynamics.\n\n\nSetting Parameters\n\n\nCode\n# Font for titles\nfont_add_google(\"Dosis\",\n  family = \"title_font\"\n) \n\n# Font for the caption\nfont_add_google(\"Saira Extra Condensed\",\n  family = \"caption_font\"\n) \n\n# Font for plot text\nfont_add_google(\"Saira Semi Condensed\",\n  family = \"body_font\"\n) \n\ntext_col &lt;- \"grey20\"\n\ntext_hil &lt;- \"grey30\"\n\nmypal &lt;- paletteer::paletteer_d(\"ggthemes::Hue_Circle\")\n\nshowtext_auto()\n\nbg_col &lt;- \"white\"\n\n# Caption stuff for the plot\nsysfonts::font_add(\n  family = \"Font Awesome 6 Brands\",\n  regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\")\n)\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nsocial_caption_1 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{github_username}  &lt;/span&gt;\")\nsocial_caption_2 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{xtwitter_username}&lt;/span&gt;\")\n\nts = 80\n\nplot_title &lt;- \"Global Population Trends: Surges and Declines (1961-2023)\"\n\nplot_subtitle &lt;- glue::glue(\"The line charts highlight important demographic changes, with rapid population increases in the &lt;b style='color:{mypal[16]}'&gt;UAE&lt;/b&gt; (1969-1977,&lt;br&gt;2007-2008) and &lt;b style='color:{mypal[11]}'&gt;Qatar&lt;/b&gt; (2006-2008), likely due to immigration. In contrast, marked population declines are observed in&lt;br&gt;countries like &lt;b style='color:{mypal[8]}'&gt;Lebanon &lt;/b&gt; (1978-79), &lt;b style='color:{mypal[1]}'&gt;Afghanistan &lt;/b&gt; (1981-82), &lt;b style='color:{mypal[7]}'&gt;Kuwait  &lt;/b&gt;(1990-91), &lt;b style='color:{mypal[12]}'&gt;Rwanda &lt;/b&gt;(1994-95), &lt;b style='color:{mypal[6]}'&gt;Kosovo &lt;/b&gt;(1998-1999),&lt;br&gt;&lt;b style='color:{mypal[14]}'&gt;Syria&lt;/b&gt; (2013-2014), &lt;b style='color:{mypal[10]}'&gt;Libya &lt;/b&gt;(2012), and &lt;b style='color:{mypal[15]}'&gt;Ukraine &lt;/b&gt;(2022), primarily resulting from wars. These patterns highlight the profound&lt;br&gt;impact of socio-political and environmental factors on population dynamics.\")\n\nstr_view(plot_subtitle)\n\nplot_caption &lt;- paste0(\n  \"**Data:** World Bank Databank. |  \",\n  \"**Code:** \", \n  social_caption_1, \n  \" |  **Graphics:** \", \n  social_caption_2\n  )\n\ninset_text &lt;- \"About the data: The data for these line charts is derived from the World Bank DataBank, specifically the dataset on total population (ID: SP.POP.TOTL). This dataset is based on the de facto definition of population, counting all residents regardless of legal status or citizenship, and provides midyear estimates. The primary sources include the United Nations Population Division's World Population Prospects (2022 Revision), census reports, statistical publications from national statistical offices, Eurostat's demographic statistics, the United Nations Statistical Division's Population and Vital Statistics Report, the U.S. Census Bureau's International Database, and the Secretariat of the Pacific Community's Statistics and Demography Programme. These comprehensive and reputable sources ensure the reliability and accuracy of the population data presented in the charts.\"\n\nggplot() +\n  labs(subtitle = plot_subtitle) +\n  theme(plot.subtitle = element_markdown())\n\n\nData Wrangling\n\n\nCode\nrawdf2 &lt;- wb_data(\n  indicator = \"SP.POP.TOTL\",\n  start_date = 1960,\n  end_date = 2023,\n  return_wide = FALSE,\n  gapfill = TRUE,\n  mrv = 65\n)\n\nhigh_pop_countries &lt;- rawdf2 |&gt; \n  filter(date == 2022) |&gt; \n  filter(value &gt; 1e5) |&gt; \n  pull(country)\n\n\ndf &lt;- rawdf2 |&gt; \n  select(\n    country, year = date,\n    value, iso2c\n  ) |&gt; \n  mutate(iso2c = str_to_lower(iso2c)) |&gt;\n  group_by(country) |&gt; \n  mutate(increase = 100*(value - lead(value))/value) |&gt; \n  mutate(disp_val = (increase &gt; 13 | increase &lt; -5)) |&gt; \n  filter(country %in% high_pop_countries) |&gt; \n  mutate(country = fct(country))\n\ndf |&gt; \n  filter(disp_val) |&gt; \n  distinct(country)\n\n\n\n\nCode\ng_base &lt;- df |&gt; \n  ggplot(aes(x = year, \n             y = increase,\n             group = country)) +\n  geom_line(colour = \"grey10\", alpha = 0.2) +\n  geom_point(\n    data = df |&gt; filter(disp_val),\n    mapping = aes(colour = country),\n    size = 3, \n    alpha = 0.5\n  ) +\n  ggrepel::geom_text_repel(\n    data = df |&gt; filter(disp_val),\n    mapping = aes(\n      label = paste0(country, \"\\n(\", round(increase, 1), \"%,\", year, \")\"),\n      colour = country\n    ),\n    lineheight = 0.3,\n    family = \"body_font\",\n    size = ts / 4\n  ) +\n  geom_hline(yintercept = 0, colour = text_hil, linewidth = 1) +\n  annotate(\n    geom = \"label\",\n    x = 1962,\n    y = -8,\n    hjust = 0, \n    vjust = 1,\n    label = str_wrap(inset_text, 60),\n    colour = text_hil,\n    fill = bg_col,\n    lineheight = 0.35,\n    size = ts / 7,\n    family = \"caption_font\",\n    label.size = NA\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 2010, \n    y = -25,\n    label = \"Name of the Country\\n(% Population Change, Year)\",\n    family = \"body_font\",\n    fontface = \"bold\",\n    colour = mypal[1],\n    lineheight = 0.3,\n    size = ts / 3,\n    fill = bg_col,\n    hjust = 0.5,\n    vjust = 0.5,\n    label.padding = unit(0.15, \"lines\")\n  ) +\n  scale_x_continuous(\n    expand = expansion(0), \n    breaks = seq(1960, 2020, 10),\n    limits = c(1961, 2023)\n  ) +\n  scale_y_continuous(\n    labels = label_number(suffix = \"%\")\n  ) +\n  scale_colour_manual(values = mypal) +\n  labs(\n    x = NULL, y = \"Yearly population change (%)\",\n    title = plot_title,\n    subtitle = plot_subtitle,\n    caption = plot_caption\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme_minimal(\n    base_family = \"body_font\",\n    base_size = ts\n  ) +\n  theme(\n    legend.position = \"none\",\n    axis.line.y = element_line(\n      arrow = arrow(ends = \"both\", length = unit(10, \"mm\")),\n      linewidth = 1,\n      colour = text_hil\n    ),\n    panel.grid.major.y = element_line(\n      colour = \"grey90\",\n      linewidth = 0.5\n    ),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    plot.title = element_text(\n      hjust = 0,\n      family = \"title_font\",\n      size = 2.5 * ts,\n      colour = text_hil,\n      margin = margin(10, 0, 3,0, \"mm\")\n    ),\n    plot.subtitle = element_markdown(\n      lineheight = 0.35,\n      hjust = 0,\n      colour = text_col,\n      margin = margin(0,0,5,0, \"mm\")\n    ),\n    plot.caption = element_textbox(\n      hjust = 0.5,\n      family = \"caption_font\",\n      colour = text_hil\n    ),\n    plot.background = element_rect(\n      fill = bg_col,\n      colour = bg_col\n    ),\n    axis.title.y = element_text(margin = margin(0,0,0,5, \"mm\"), colour = text_col),\n    axis.text.y = element_text(\n      margin = margin(0,0,0,0, \"mm\"), \n      colour = text_col,\n      size = 1.2 * ts),\n    axis.text.x = element_text(\n      margin = margin(0,0,0,0, \"mm\"), \n      colour = text_col,\n      size = 1.1 * ts),\n    axis.ticks.y = element_blank()\n  ) \n\n# QR Code for the plot\nurl_graphics &lt;- paste0(\n  \"https://aditya-dahiya.github.io/projects_presentations/projects/\",\n  # The file name of the current .qmd file\n  \"world_population_animated_donut\",         \n  \".html\"\n)\n# remotes::install_github('coolbutuseless/ggqr')\n# library(ggqr)\nplot_qr &lt;- ggplot(\n  data = NULL, \n  aes(x = 0, y = 0, label = url_graphics)\n  ) + \n  ggqr::geom_qr(\n    colour = text_hil, \n    fill = bg_col,\n    size = 1.9\n    ) +\n  coord_fixed() +\n  theme_void() +\n  theme(plot.background = element_rect(\n    fill = NA, \n    colour = NA\n    )\n  )\n\nlibrary(patchwork)\ng &lt;- g_base +\n  # Add QR Code to the plot\n  inset_element(\n    p = plot_qr, \n    left = 0.85, \n    right = 1,\n    bottom = 0.75,\n    top = 0.90, \n    align_to = \"full\",\n    clip = FALSE\n  ) +\n  \n  # Basix Plot Annotations\n  plot_annotation(\n    theme = theme(\n      plot.background = element_rect(\n        fill = bg_col, \n        colour = NA, \n        linewidth = 0\n      )\n    )\n  )\n\nggsave(\n  plot = g,\n  filename = here::here(\"data_vizs\", \"a4_world_population_change.png\"),\n  height = 210 * 2,\n  width = 297 * 2,\n  units = \"mm\"\n)"
  },
  {
    "objectID": "projects/world_population_animated_donut.html#yearly-population-changes",
    "href": "projects/world_population_animated_donut.html#yearly-population-changes",
    "title": "Some ingights on the World Population (1960-2023)",
    "section": "",
    "text": "This graphic depicts the yearly percentage changes in population for various countries from 1961 to 2023, highlighting significant increases due to immigration and sharp declines resulting from war and natural disasters.\n\n\nThe data used for these line charts is sourced from the World Bank DataBank, which compiles midyear population estimates based on the de facto definition of population, encompassing all residents regardless of legal status or citizenship. This data, spanning from 1961 to 2023, includes inputs from various reputable sources such as the United Nations Population Division, national statistical offices, Eurostat, and the U.S. Census Bureau. The graphic illustrates the yearly percentage changes in population for different countries, highlighting significant demographic shifts. The analysis reveals notable population increases in countries like the UAE (1969-1977, 2007-2008) and Qatar (2006-2008), likely driven by immigration. Conversely, the charts emphasize sharp population declines due to war or natural disasters in countries such as Lebanon (1978-79), Afghanistan (1981-82), Kuwait (1990-91), Rwanda (1994-95), Kosovo (1998-1999), Syria (2013-2014), Libya (2012), and Ukraine (2022). These trends provide a stark visualization of how political instability, conflict, and crises can dramatically impact population dynamics.\n\n\nSetting Parameters\n\n\nCode\n# Font for titles\nfont_add_google(\"Dosis\",\n  family = \"title_font\"\n) \n\n# Font for the caption\nfont_add_google(\"Saira Extra Condensed\",\n  family = \"caption_font\"\n) \n\n# Font for plot text\nfont_add_google(\"Saira Semi Condensed\",\n  family = \"body_font\"\n) \n\ntext_col &lt;- \"grey20\"\n\ntext_hil &lt;- \"grey30\"\n\nmypal &lt;- paletteer::paletteer_d(\"ggthemes::Hue_Circle\")\n\nshowtext_auto()\n\nbg_col &lt;- \"white\"\n\n# Caption stuff for the plot\nsysfonts::font_add(\n  family = \"Font Awesome 6 Brands\",\n  regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\")\n)\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nsocial_caption_1 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{github_username}  &lt;/span&gt;\")\nsocial_caption_2 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{xtwitter_username}&lt;/span&gt;\")\n\nts = 80\n\nplot_title &lt;- \"Global Population Trends: Surges and Declines (1961-2023)\"\n\nplot_subtitle &lt;- glue::glue(\"The line charts highlight important demographic changes, with rapid population increases in the &lt;b style='color:{mypal[16]}'&gt;UAE&lt;/b&gt; (1969-1977,&lt;br&gt;2007-2008) and &lt;b style='color:{mypal[11]}'&gt;Qatar&lt;/b&gt; (2006-2008), likely due to immigration. In contrast, marked population declines are observed in&lt;br&gt;countries like &lt;b style='color:{mypal[8]}'&gt;Lebanon &lt;/b&gt; (1978-79), &lt;b style='color:{mypal[1]}'&gt;Afghanistan &lt;/b&gt; (1981-82), &lt;b style='color:{mypal[7]}'&gt;Kuwait  &lt;/b&gt;(1990-91), &lt;b style='color:{mypal[12]}'&gt;Rwanda &lt;/b&gt;(1994-95), &lt;b style='color:{mypal[6]}'&gt;Kosovo &lt;/b&gt;(1998-1999),&lt;br&gt;&lt;b style='color:{mypal[14]}'&gt;Syria&lt;/b&gt; (2013-2014), &lt;b style='color:{mypal[10]}'&gt;Libya &lt;/b&gt;(2012), and &lt;b style='color:{mypal[15]}'&gt;Ukraine &lt;/b&gt;(2022), primarily resulting from wars. These patterns highlight the profound&lt;br&gt;impact of socio-political and environmental factors on population dynamics.\")\n\nstr_view(plot_subtitle)\n\nplot_caption &lt;- paste0(\n  \"**Data:** World Bank Databank. |  \",\n  \"**Code:** \", \n  social_caption_1, \n  \" |  **Graphics:** \", \n  social_caption_2\n  )\n\ninset_text &lt;- \"About the data: The data for these line charts is derived from the World Bank DataBank, specifically the dataset on total population (ID: SP.POP.TOTL). This dataset is based on the de facto definition of population, counting all residents regardless of legal status or citizenship, and provides midyear estimates. The primary sources include the United Nations Population Division's World Population Prospects (2022 Revision), census reports, statistical publications from national statistical offices, Eurostat's demographic statistics, the United Nations Statistical Division's Population and Vital Statistics Report, the U.S. Census Bureau's International Database, and the Secretariat of the Pacific Community's Statistics and Demography Programme. These comprehensive and reputable sources ensure the reliability and accuracy of the population data presented in the charts.\"\n\nggplot() +\n  labs(subtitle = plot_subtitle) +\n  theme(plot.subtitle = element_markdown())\n\n\nData Wrangling\n\n\nCode\nrawdf2 &lt;- wb_data(\n  indicator = \"SP.POP.TOTL\",\n  start_date = 1960,\n  end_date = 2023,\n  return_wide = FALSE,\n  gapfill = TRUE,\n  mrv = 65\n)\n\nhigh_pop_countries &lt;- rawdf2 |&gt; \n  filter(date == 2022) |&gt; \n  filter(value &gt; 1e5) |&gt; \n  pull(country)\n\n\ndf &lt;- rawdf2 |&gt; \n  select(\n    country, year = date,\n    value, iso2c\n  ) |&gt; \n  mutate(iso2c = str_to_lower(iso2c)) |&gt;\n  group_by(country) |&gt; \n  mutate(increase = 100*(value - lead(value))/value) |&gt; \n  mutate(disp_val = (increase &gt; 13 | increase &lt; -5)) |&gt; \n  filter(country %in% high_pop_countries) |&gt; \n  mutate(country = fct(country))\n\ndf |&gt; \n  filter(disp_val) |&gt; \n  distinct(country)\n\n\n\n\nCode\ng_base &lt;- df |&gt; \n  ggplot(aes(x = year, \n             y = increase,\n             group = country)) +\n  geom_line(colour = \"grey10\", alpha = 0.2) +\n  geom_point(\n    data = df |&gt; filter(disp_val),\n    mapping = aes(colour = country),\n    size = 3, \n    alpha = 0.5\n  ) +\n  ggrepel::geom_text_repel(\n    data = df |&gt; filter(disp_val),\n    mapping = aes(\n      label = paste0(country, \"\\n(\", round(increase, 1), \"%,\", year, \")\"),\n      colour = country\n    ),\n    lineheight = 0.3,\n    family = \"body_font\",\n    size = ts / 4\n  ) +\n  geom_hline(yintercept = 0, colour = text_hil, linewidth = 1) +\n  annotate(\n    geom = \"label\",\n    x = 1962,\n    y = -8,\n    hjust = 0, \n    vjust = 1,\n    label = str_wrap(inset_text, 60),\n    colour = text_hil,\n    fill = bg_col,\n    lineheight = 0.35,\n    size = ts / 7,\n    family = \"caption_font\",\n    label.size = NA\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 2010, \n    y = -25,\n    label = \"Name of the Country\\n(% Population Change, Year)\",\n    family = \"body_font\",\n    fontface = \"bold\",\n    colour = mypal[1],\n    lineheight = 0.3,\n    size = ts / 3,\n    fill = bg_col,\n    hjust = 0.5,\n    vjust = 0.5,\n    label.padding = unit(0.15, \"lines\")\n  ) +\n  scale_x_continuous(\n    expand = expansion(0), \n    breaks = seq(1960, 2020, 10),\n    limits = c(1961, 2023)\n  ) +\n  scale_y_continuous(\n    labels = label_number(suffix = \"%\")\n  ) +\n  scale_colour_manual(values = mypal) +\n  labs(\n    x = NULL, y = \"Yearly population change (%)\",\n    title = plot_title,\n    subtitle = plot_subtitle,\n    caption = plot_caption\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme_minimal(\n    base_family = \"body_font\",\n    base_size = ts\n  ) +\n  theme(\n    legend.position = \"none\",\n    axis.line.y = element_line(\n      arrow = arrow(ends = \"both\", length = unit(10, \"mm\")),\n      linewidth = 1,\n      colour = text_hil\n    ),\n    panel.grid.major.y = element_line(\n      colour = \"grey90\",\n      linewidth = 0.5\n    ),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    plot.title = element_text(\n      hjust = 0,\n      family = \"title_font\",\n      size = 2.5 * ts,\n      colour = text_hil,\n      margin = margin(10, 0, 3,0, \"mm\")\n    ),\n    plot.subtitle = element_markdown(\n      lineheight = 0.35,\n      hjust = 0,\n      colour = text_col,\n      margin = margin(0,0,5,0, \"mm\")\n    ),\n    plot.caption = element_textbox(\n      hjust = 0.5,\n      family = \"caption_font\",\n      colour = text_hil\n    ),\n    plot.background = element_rect(\n      fill = bg_col,\n      colour = bg_col\n    ),\n    axis.title.y = element_text(margin = margin(0,0,0,5, \"mm\"), colour = text_col),\n    axis.text.y = element_text(\n      margin = margin(0,0,0,0, \"mm\"), \n      colour = text_col,\n      size = 1.2 * ts),\n    axis.text.x = element_text(\n      margin = margin(0,0,0,0, \"mm\"), \n      colour = text_col,\n      size = 1.1 * ts),\n    axis.ticks.y = element_blank()\n  ) \n\n# QR Code for the plot\nurl_graphics &lt;- paste0(\n  \"https://aditya-dahiya.github.io/projects_presentations/projects/\",\n  # The file name of the current .qmd file\n  \"world_population_animated_donut\",         \n  \".html\"\n)\n# remotes::install_github('coolbutuseless/ggqr')\n# library(ggqr)\nplot_qr &lt;- ggplot(\n  data = NULL, \n  aes(x = 0, y = 0, label = url_graphics)\n  ) + \n  ggqr::geom_qr(\n    colour = text_hil, \n    fill = bg_col,\n    size = 1.9\n    ) +\n  coord_fixed() +\n  theme_void() +\n  theme(plot.background = element_rect(\n    fill = NA, \n    colour = NA\n    )\n  )\n\nlibrary(patchwork)\ng &lt;- g_base +\n  # Add QR Code to the plot\n  inset_element(\n    p = plot_qr, \n    left = 0.85, \n    right = 1,\n    bottom = 0.75,\n    top = 0.90, \n    align_to = \"full\",\n    clip = FALSE\n  ) +\n  \n  # Basix Plot Annotations\n  plot_annotation(\n    theme = theme(\n      plot.background = element_rect(\n        fill = bg_col, \n        colour = NA, \n        linewidth = 0\n      )\n    )\n  )\n\nggsave(\n  plot = g,\n  filename = here::here(\"data_vizs\", \"a4_world_population_change.png\"),\n  height = 210 * 2,\n  width = 297 * 2,\n  units = \"mm\"\n)"
  },
  {
    "objectID": "data_vizs.html",
    "href": "data_vizs.html",
    "title": "Data Visualizations",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nOWID Fertility Scatter\n\n\n\nJuly 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal Fertility Decline: A 70-Year Trend\n\n\n\nJuly 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday David Robinson’s functions\n\n\n\nJuly 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRadar Chart of Health Burdens in USA, China, India, and Globally\n\n\n\nJuly 8, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComparing Health Impacts: Cardiovascular vs. Diabetes and Kidney Diseases\n\n\n\nJuly 5, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal Health Burden: Visualizing the Top 25 Causes of Illness\n\n\n\nJune 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday Datasets\n\n\n\nJune 27, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTechnological Leapfrogging: Mobile Phones Over Landlines in the Developing World\n\n\n\nJune 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAge-Specific Sex Ratios Over Seven Decades\n\n\n\nJune 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSex Ratios at Birth Worldwide (1970-2020)\n\n\n\nJune 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLGBTQ+ Movies over the years (1990-2022)\n\n\n\nJune 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDoes Higher Healthcare Spending Guarantee Better Coverage?\n\n\n\nJune 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDecades of Change: How Life Expectancy Gains (at birth and beyond 65) have Shifted.\n\n\n\nJune 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow Have Global Life Expectancy Trends Diverged?\n\n\n\nJune 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLife Expectancy at different Age Groups\n\n\n\nMay 31, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLisa’s Vegetable Garden Data\n\n\n\nMay 29, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow Far Are Indian Capitals from Their Geographic Centres?\n\n\n\nMay 28, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigating India: Closest International Airports\n\n\n\nMay 27, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComparing burden of disease: India vs China\n\n\n\nMay 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPopulation changes in each decade (1960s - 2010s)\n\n\n\nMay 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPopulation Surges and Falls\n\n\n\nMay 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCarbon Majors Emissions Data\n\n\n\nMay 21, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRegional Share in Global Population\n\n\n\nMay 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal Airports and Flights\n\n\n\nMay 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRich vs. Poor in the G-20\n\n\n\nMay 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGDP vs. Life Expectancy\n\n\n\nMay 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Great American Coffee Taste Test\n\n\n\nMay 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal Salaries: Doctors vs. Nurses\n\n\n\nMay 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRolling Stone Album Rankings\n\n\n\nMay 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorldwide Bureaucracy Indicators\n\n\n\nApril 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll the places - brands & stores around the world\n\n\n\nApril 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAir Obstacles: New York City\n\n\n\nApril 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal Border Crossings\n\n\n\nApril 10, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Random Projects",
    "section": "",
    "text": "Some ingights on the World Population (1960-2023)\n\n\nCharts and Visualizations on the Population of different regions using World Bank Data\n\n\n\n\n\n\n\n\nMay 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nA Rayshader Map for India’s Power Plants\n\n\nUsing Rayshader in R to plot map, inspired by Milos Makes Maps\n\n\n\n\n\n\n\n\nMay 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nData Visualization Projects\n\n\nExamples of Visualizations Created for #TidyTuesday\n\n\n\n\n\n\n\n\nApr 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nData Visualizations from D.I.P.\n\n\nExamples of Visualizations created from the Data Is Plural Newsletter by Jeremy Singer-Vine\n\n\n\n\n\n\n\n\nApr 14, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAn interactive map of USA’s Groundhogs Day predictors\n\n\nInitially Created for #TidyTuesday\n\n\n\n\n\n\n\n\nFeb 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nElectoral Kaleidoscope: Visualizing the Impact of Proportional Representation\n\n\nHow the PSR System could’ve changed the 1992 and 2020 US House of Representatives majority party!\n\n\n\n\n\n\n\n\nNov 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nEerie Revelations: Text Analysis of Snopes.com’s Horror Legends\n\n\nLooking at the snopes.com articles as a part of #TidyTuesday Week 44 (Oct 31, 2023)\n\n\n\n\n\n\n\n\nNov 2, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nPatient Risk Profiles\n\n\nLooking at the Jenna Rep’s curated data-set of Patient Risk Profiles as a part of #TidyTuesday Week 43 (Oct 23, 2023)\n\n\n\n\n\n\n\n\nOct 25, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nMaking road-maps of cities with Open Street Maps\n\n\nA user-created function to create street art maps in a single line of code\n\n\n\n\n\n\n\n\nOct 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nDancing Through the Years: A Data-Driven Look at Taylor Swift’s Music\n\n\nLooking at the W. Jake Thompson’s curated data-set of Taylor Swift songs as a part of #TidyTuesday (Oct 10, 2023)\n\n\n\n\n\n\n\n\nOct 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nCreating racing bar charts in R with gganimate\n\n\nAnnotated code to create racing bar charts using nycflight13 dataset\n\n\n\n\n\n\n\n\nOct 17, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nGhostly Jargon in Haunted Spots: A Gendered Perspective\n\n\nLooking at the dataset for haunted places in USA as a part of Tidy Tuesday (Oct 10, 2023)\n\n\n\n\n\n\n\n\nOct 13, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "data_vizs/owid_fertility_scatter.html",
    "href": "data_vizs/owid_fertility_scatter.html",
    "title": "OWID Fertility Scatter",
    "section": "",
    "text": "Source of the Data: The fertility rate data is sourced from the United Nations’ World Population Prospects (2022) and has been processed and presented by Our World in Data. The dataset provides the average number of live births a hypothetical cohort of women would have at the end of their reproductive period, assuming they experienced the fertility rates of a specific period throughout their lives without mortality impact. The data covers the period from 1950 to 2021 and is measured in live births per woman. Age-specific fertility rates are included, indicating the number of births to women in particular age groups, divided by the number of women in those groups, across annual civil calendar years. This dataset, part of the 27th edition of the official global population estimates, is based on extensive data on population size, fertility, mortality, and international migration for 237 countries or areas. For more information, visit the UN’s World Population Prospects page here and here. The data was retrieved on September 9, 2022. Our World in Data processes the data through various steps to ensure accuracy, including standardizing country names, converting units, and calculating derived indicators. Detailed information on their data processing can be found here. For citation purposes, use: UN, World Population Prospects (2022) – processed by Our World in Data.\n\n\n\n\n\n\nFigure 1: …………………\n\n\n\n\nHow I made these graphics?\nGetting the data\n\n\nCode\n# Data Import and Wrangling Tools\nlibrary(tidyverse)            # All things tidy\nlibrary(owidR)                # Get data from Our World in R\n\n# Final plot tools\nlibrary(scales)               # Nice Scales for ggplot2\nlibrary(fontawesome)          # Icons display in ggplot2\nlibrary(ggtext)               # Markdown text support\nlibrary(showtext)             # Display fonts in ggplot2\nlibrary(colorspace)           # To lighten and darken colours\nlibrary(patchwork)            # Combining plots\n\nsearch1 &lt;- owidR::owid_search(\"fertility\")\n\ndf1 &lt;- owid(\"children-per-woman-un\")\n\npopdf &lt;- owid(\"population-with-un-projections\")\n\n\nVisualization Parameters\n\n\nCode\n# Font for titles\nfont_add_google(\"Chakra Petch\",\n  family = \"title_font\"\n) \n\n# Font for the caption\nfont_add_google(\"Saira Semi Condensed\",\n  family = \"caption_font\"\n) \n\n# Font for plot text\nfont_add_google(\"Changa\",\n  family = \"body_font\"\n) \n\nshowtext_auto()\n\n# Colour Palette\nmypal &lt;- rev(paletteer::paletteer_d(\"LaCroixColoR::Lime\")[c(1,2,4:6)])\n\n# Background Colour\nbg_col &lt;- \"grey98\"\ntext_col &lt;- \"grey10\"\ntext_hil &lt;- \"grey25\"\n\n# Base Text Size\nbts &lt;- 80\n\nplot_title &lt;- \"Declining Global Fertility Rates (1950-2020)\"\n\nplot_subtitle &lt;- \"The fertility rate, representing the average number of live births per woman, has notably declined from 1950 to 2020, driven largely by reductions in middle-income countries such as India and China. This graphic highlights this global trend, while also showing that the poorest and war-torn nations have experienced minimal decline in fertility rates. Nearly half of the world's population now has fertility rates below the replacement level.\"\n\ndata_annotation &lt;- \"About the Data: This data on fertility rates, sourced from the United Nations' World Population Prospects (2022) and processed by Our World in Data, spans from 1950 to 2021. It reflects the average number of live births per woman, with age-specific rates, providing insights into global fertility trends across decades.\"\n\n# Caption stuff for the plot\nsysfonts::font_add(\n  family = \"Font Awesome 6 Brands\",\n  regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\")\n)\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nsocial_caption_1 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_hil}'&gt;{github_username}  &lt;/span&gt;\")\nsocial_caption_2 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_hil}'&gt;{xtwitter_username}&lt;/span&gt;\")\n\nplot_caption &lt;- paste0(\n  \"**Data:** United Nations & Our World in Data  |  \",\n  \"**Code:** \", \n  social_caption_1, \n  \" |  **Graphics:** \", \n  social_caption_2\n  )\nrm(github, github_username, xtwitter, \n   xtwitter_username, social_caption_1, social_caption_2)\n\n\nData Wrangling\n\n\nCode\n# A tibble for the fertility levels in each decade\ndf2 &lt;- df1 |&gt; \n  as_tibble() |&gt; \n  janitor::clean_names() |&gt; \n  rename(fertility = fertility_rate_sex_all_age_all_variant_estimates) |&gt; \n  filter(!is.na(code)) |&gt; \n  filter(entity != \"World\")\n\n\n# A tibble of populations for each coutnry in each decade\npopdf1 &lt;- popdf |&gt; \n  as_tibble() |&gt; \n  janitor::clean_names() |&gt; \n  filter(!is.na(code)) |&gt; \n  filter(entity != \"World\") |&gt; \n  mutate(\n    population = ifelse(\n      is.na(population_sex_all_age_all_variant_estimates),\n      population_sex_all_age_all_variant_medium,\n      population_sex_all_age_all_variant_estimates\n    )\n  ) |&gt; \n  select(-c(population_sex_all_age_all_variant_estimates,\n            population_sex_all_age_all_variant_medium))\n\n\n# df2 |&gt; \n#   left_join(popdf1) |&gt; \n#   drop_na() |&gt; \n#   group_by(year) |&gt; \n#   summarise(\n#     fertility = weighted.mean(x = fertility, w = population, na.rm = T)\n#   ) |&gt; \n#   ggplot(aes(x = year, y = fertility)) +\n#   geom_point() +\n#   geom_line()\n\ndf_continents &lt;- rnaturalearth::ne_countries() |&gt; \n  as_tibble() |&gt; \n  janitor::clean_names() |&gt; \n  select(iso_a3, continent) |&gt; \n  rename(code = iso_a3)\n\ndf3 &lt;- df2 |&gt; \n  left_join(popdf1) |&gt;\n  left_join(df_continents) |&gt; \n  drop_na() |&gt; \n  filter(year &gt;= 1951 & year &lt;= 2020) |&gt; \n  mutate(\n    year = cut(\n      year, \n      breaks = seq(1950, 2020, 10), \n      labels = paste0(seq(1950, 2010, 10), \"s\")\n      )\n  ) |&gt; \n  group_by(continent, entity, code, year) |&gt; \n  summarise(\n    fertility = weighted.mean(fertility, w = population, na.rm = T),\n    population = mean(population, na.rm = T)\n  )\n\ndf4 &lt;- df2 |&gt; \n  left_join(popdf1) |&gt;\n  drop_na() |&gt; \n  filter(year &gt;= 1951 & year &lt;= 2020) |&gt; \n  mutate(\n    year = cut(\n      year, \n      breaks = seq(1950, 2020, 10), \n      labels = paste0(seq(1950, 2010, 10), \"s\")\n      )\n  ) |&gt; \n  group_by(year) |&gt; \n  summarise(\n    fertility = weighted.mean(fertility, w = population, na.rm = T)\n  )\n\n\nVisualization\n\n\nCode\ndf3 |&gt; \n  ggplot(\n    aes(\n      x = year, \n      y = fertility\n    )\n  ) +\n  geom_hline(\n    yintercept = 2.1,\n    linetype = 3,\n    colour = \"grey50\"\n  ) +\n  geom_point(\n    mapping = aes(\n      size = population,\n      colour = continent\n    ),\n    pch = 20,\n    alpha = 0.7,\n    position = position_jitter(\n      width = 0.2,\n      height = 0\n    )\n  ) +\n  geom_segment(\n    data = df4,\n    mapping = aes(\n      x = as.numeric(year) - 0.3,\n      xend = as.numeric(year) + 0.3,\n      y = fertility,\n      yend = fertility\n    ),\n    colour = \"black\",\n    linewidth = 3,\n    alpha = 0.2\n  ) +\n  geom_text(\n    data = df4,\n    mapping = aes(\n      x = year,\n      y = fertility,\n      label = paste0(\"TFR: \", round(fertility, 1))\n    ),\n    colour = \"grey10\",\n    family = \"body_font\"\n  ) +\n  scale_y_continuous(\n    expand = expansion(0),\n    limits = c(1, 8.5),\n    breaks = 1:8\n  ) +\n  paletteer::scale_color_paletteer_d(\"awtools::spalette\") +\n  scale_size_continuous(\n    range = c(0.2, 10)\n  ) +\n  guides(\n    size = \"none\",\n    colour = guide_legend(\n      override.aes = list(\n        size = 5\n      )\n    )\n  ) +\n  labs(\n    title = plot_title,\n    subtitle = plot_subtitle,\n    caption = plot_caption,\n    x = NULL,\n    y = \"Fertility rate (average children per woman)\",\n    colour = NULL\n  ) +\n  theme_minimal(\n    base_family = \"body_font\",\n    base_size = 11\n  ) +\n  theme(\n    panel.grid = element_blank(),\n    axis.line.y = element_line(\n      arrow = arrow(ends = \"both\", length = unit(2, \"mm\"))\n    ),\n    legend.position = \"right\",\n    plot.caption = element_textbox(\n      hjust = 0.5,\n      family = \"caption_font\",\n      colour = text_hil\n    )\n  )\n\n\nAdding insets and annotations using (Pedersen 2024)\n\n\nCode\n# QR Code for the plot\nurl_graphics &lt;- paste0(\n  \"https://aditya-dahiya.github.io/projects_presentations/projects/\",\n  # The file name of the current .qmd file\n  \"owid_fertility\",\n  \".qmd\"\n)\n# remotes::install_github('coolbutuseless/ggqr')\n# library(ggqr)\nplot_qr &lt;- ggplot(\n  data = NULL, \n  aes(x = 0, y = 0, label = url_graphics)\n  ) + \n  ggqr::geom_qr(\n    colour = text_hil, \n    fill = bg_col,\n    size = 2.2\n    ) +\n  # labs(caption = \"Scan for the Interactive Version\") +\n  coord_fixed() +\n  theme_void() +\n  theme(plot.background = element_rect(\n    fill = NA, \n    colour = NA\n    ),\n    plot.caption = element_text(\n      hjust = 0.5,\n      margin = margin(0,0,0,0, \"mm\"),\n      family = \"caption_font\",\n      size = bts/1.8\n    )\n  )\n\nplot_data &lt;- ggplot() +\n  annotate(\n    geom = \"text\",\n    x = 0, y = 0,\n    label = str_wrap(data_annotation, 30),\n    family = \"caption_font\",\n    colour = text_hil,\n    lineheight = 0.3, \n    size = bts / 6,\n    hjust = 0\n  ) +\n  theme_void()\n\ng_full &lt;- g +\n  inset_element(\n    p = plot_data,\n    left = -0.07, right = 0.12,\n    top = 0.8, bottom = 0.6,\n    align_to = \"full\",\n    clip = FALSE\n  ) +\n  inset_element(\n    p = plot_qr,\n    left = 0.025, right = 0.12,\n    top = 0.98, bottom = 0.77,\n    align_to = \"full\",\n    clip = FALSE\n  ) +\n  plot_annotation(\n    theme = theme(\n      plot.background = element_rect(\n        fill = \"transparent\", colour = \"transparent\"\n      ),\n      panel.background = element_rect(\n        fill = \"transparent\", colour = \"transparent\"\n      )\n    )\n  )\n\n\nSave the graphic and a thumbnail\n\n\nCode\nggsave(\n  filename = here::here(\"data_vizs\", \"a4_owid_fertility.png\"),\n  plot = g_full,\n  width = 297 * 2,\n  height = 210 * 2,\n  units = \"mm\",\n  bg = bg_col\n)\n\nlibrary(magick)\n# Saving a thumbnail for the webpage\nimage_read(here::here(\"data_vizs\", \n                      \"owid_fertility_scatter.png\")) |&gt; \n  image_resize(geometry = \"400\") |&gt; \n  image_write(here::here(\"data_vizs\", \"thumbnails\", \n                         \"owid_fertility_scatter.png\"))\n\n\n\n\n\n\n\nReferences\n\nPedersen, Thomas Lin. 2024. “Patchwork: The Composer of Plots.” https://CRAN.R-project.org/package=patchwork."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Presentations, Data Viz & More",
    "section": "",
    "text": "Welcome to my webpage, where knowledge meets creativity! Explore my Presentations tab to delve into a collection of insightful training sessions and lectures, and head to Projects to witness the art of data visualization and data science in action. For more about me, visit my main webpage here."
  },
  {
    "objectID": "data_vizs/ind_state_centroid.html",
    "href": "data_vizs/ind_state_centroid.html",
    "title": "How Far Are Indian Capitals from Their Geographic Centres?",
    "section": "",
    "text": "The map illustrates the geographic centres and capitals of Indian states, based on data from the Survey of India. Using the R programming language and the sf package (Pebesma and Bivand 2023) , the geographic centres were determined with the sf_centroid() function, and distances to the capitals were calculated using sf_distance(). These distances were normalized by the square root of the state area to allow for meaningful comparisons across states of varying sizes. The findings show that the capitals of Uttar Pradesh, Chhattisgarh, and Manipur are closest to their geographic centres, while those of Haryana, Tamil Nadu, and Kerala are the farthest. This spatial relationship is visually represented with arrows connecting the geographic centres to the state capitals.\n\n\n\nThe map displays the geographic centres and capitals of Indian states, with arrows indicating the distance between them. When normalized by the square root of the state area, the capitals of Uttar Pradesh, Chhattisgarh, and Manipur are closest to their centres, while those of Haryana, Tamil Nadu, and Kerala are farthest.\n\n\n\nInteractive Version of the map\n\n\n\n\n\n\n\n\nFigure 1: Data & Technique: The data for this map was sourced from the Survey of India, providing accurate locations of state capitals and boundaries. Using the R programming language, specifically the {sf} package, the geographic centre (centroid) of each state was calculated with the function sf_centroid(). The distances between these centroids and the actual state capitals were then computed using the sf_distance() function. The comparison metric represents the distance between a state’s capital and its geographic centre, normalized by the state’s area, allowing for a comparative analysis of this distance across states of varying sizes.\n\n\n\n\n\n\nHow I made this graphic?\nGetting the data\n\n\nCode\n# Data Import and Wrangling Tools\nlibrary(tidyverse)            # All things tidy\n\n# Final plot tools\nlibrary(scales)               # Nice Scales for ggplot2\nlibrary(fontawesome)          # Icons display in ggplot2\nlibrary(ggtext)               # Markdown text support for ggplot2\nlibrary(showtext)             # Display fonts in ggplot2\nlibrary(colorspace)         # To lighten and darken colours\n\n# Maps related packages\nlibrary(sf)                   # Geomteric objects manipulation\n\n# Get State Map of India\nindia_state_map &lt;- read_sf(here::here(\n  \"data\", \"india_map\", \"India_State_Boundary.shp\"\n)) |&gt; \n  # During interations, using lower resolution for quick plotting\n  # st_simplify(dTolerance = 5000) |&gt; \n  st_transform(crs = 4326) |&gt; \n  mutate(state = case_when(\n    State_Name == \"Chhattishgarh\" ~ \"Chhattisgarh\",\n    State_Name == \"Tamilnadu\" ~ \"Tamil Nadu\",\n    State_Name == \"Telengana\" ~ \"Telangana\",\n    .default = State_Name\n    ),\n    .keep = \"unused\"\n  )\n\nstate_capitals &lt;- tibble(\n  State = c(\n    \"Andhra Pradesh\", \"Arunachal Pradesh\", \"Assam\", \"Bihar\",\n    \"Chhattishgarh\", \"Goa\", \"Gujarat\", \"Haryana\", \"Himachal Pradesh\",\n    \"Jharkhand\", \"Karnataka\", \"Kerala\", \"Madhya Pradesh\", \n    \"Maharashtra\", \"Manipur\", \"Meghalaya\", \"Mizoram\", \"Nagaland\",\n    \"Odisha\", \"Punjab\", \"Rajasthan\", \"Sikkim\", \"Tamilnadu\",\n    \"Telengana\", \"Tripura\", \"Uttar Pradesh\", \"Uttarakhand\", \n    \"West Bengal\"),\n  Capital = c(\n    \"Amaravati\", \"Itanagar\", \"Dispur\", \"Patna\", \"Raipur\", \n    \"Panaji\", \"Gandhinagar\", \"Chandigarh\", \"Shimla\", \"Ranchi\",\n    \"Bengaluru\", \"Thiruvananthapuram\", \"Bhopal\", \"Mumbai\", \"Imphal\", \n    \"Shillong\", \"Aizawl\", \"Kohima\", \"Bhubaneswar\", \"Chandigarh\", \n    \"Jaipur\", \"Gangtok\", \"Chennai\", \"Hyderabad\", \"Agartala\", \n    \"Lucknow\", \"Dehradun\", \"Kolkata\"),\n  Latitude = c(16.5417, 27.1020, 26.1445, 25.5941, 21.2514, \n               15.4909, 23.2156, 30.7333, 31.1048, 23.3441, \n               12.9716, 8.5241, 23.2599, 19.0760, 24.8170, \n               25.5788, 23.7271, 25.6751, 20.2961, 30.7333, \n               26.9124, 27.3314, 13.0827, 17.3850, 23.8315, \n               26.8467, 30.3165, 22.5726),\n  Longitude = c(80.5167, 93.6920, 91.7362, 85.1376, 81.6296, \n                73.8278, 72.6369, 76.7794, 77.1734, 85.3096, \n                77.5946, 76.9366, 77.4126, 72.8777, 93.9368, \n                91.8933, 92.7176, 94.1086, 85.8245, 76.7794, \n                75.7873, 88.6138, 80.2707, 78.4867, 91.2868, \n                80.9462, 78.0322, 88.3639)\n)\n\n\nVisualization Parameters\n\n\nCode\n# Font for titles\nfont_add_google(\"Fjalla One\",\n  family = \"title_font\"\n) \n\n# Font for the caption\nfont_add_google(\"Saira Extra Condensed\",\n  family = \"caption_font\"\n) \n\n# Font for plot text\nfont_add_google(\"Saira Condensed\",\n  family = \"body_font\"\n) \n\nshowtext_auto()\n\n# Background Colour\nbg_col &lt;- \"#f5f0fc\"\ntext_col &lt;- \"#2a0169\"\ntext_hil &lt;- \"#350182\"\n\nviz_cols &lt;- paletteer::paletteer_d(\"ltc::trio1\")\nviz_cols[2] &lt;- \"red\"\n\n# Base Text Size\nbts &lt;- 80\n\nplot_title &lt;- \"Geocentres & Capitals: Indian States\"\n\nplot_subtitle &lt;- glue::glue(\"Geographic centres and capitals of the Indian states,&lt;br&gt;with arrows indicating the distance between them.&lt;br&gt;The &lt;b style='color:{viz_cols[3] }'&gt;capitals&lt;/b&gt; are closest to the &lt;b style='color:{viz_cols[2] }'&gt;geographic&lt;/b&gt;&lt;br&gt;&lt;b style='color:{viz_cols[2] }'&gt;centres&lt;/b&gt; for Uttar Pradesh, Chhattisgarh,&lt;br&gt;and Manipur, while they are farthest&lt;br&gt;for Haryana, Tamil Nadu, & Kerala.\")\n\n# Caption stuff for the plot\nsysfonts::font_add(\n  family = \"Font Awesome 6 Brands\",\n  regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\")\n)\nsocial_caption_1 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;&#xf09b;&lt;/span&gt; &lt;span style='color: {text_col}'&gt;aditya-dahiya  &lt;/span&gt;\")\nsocial_caption_2 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;&#xe61b;&lt;/span&gt; &lt;span style='color: {text_col}'&gt;@adityadahiyaias &lt;/span&gt;\")\nplot_caption &lt;- paste0(\n  \"**Data:** Survey of India \",\n  \"**Code:** \", social_caption_1, \n  \" |  **Graphics:** \", social_caption_2\n  )\n\ndata_source &lt;- str_wrap(\"Data & Technique: The data for this map was sourced from the Survey of India, providing accurate locations of state capitals and boundaries. Using the R programming language, specifically the {sf} package, the geographic centre (centroid) of each state was calculated with the function sf_centroid(). The distances between these centroids and the actual state capitals were then computed using the sf_distance() function. The comparison metric represents the distance between a state's capital and its geographic centre, normalized by the state's area, allowing for a comparative analysis of this distance across states of varying sizes.\", 80)\n\ndata_source |&gt; str_view()\n\n\nData Wrangling\n\n\nCode\n# Calculate geomteric centres of each state\ndf1 &lt;- india_state_map |&gt;\n  st_centroid() |&gt;\n  rename(geometry_centroid = geometry)\n\ndf1 &lt;- df1 |&gt; \n  mutate(\n    from_lon = sf::st_coordinates(df1)[,1],\n    from_lat = sf::st_coordinates(df1)[,2]) |&gt; \n    as_tibble() |&gt; \n    mutate(state = case_when(\n    state == \"Chhattishgarh\" ~ \"Chhattisgarh\",\n    state == \"Tamilnadu\" ~ \"Tamil Nadu\",\n    state == \"Telengana\" ~ \"Telangana\",\n    .default = state\n    ),\n    .keep = \"unused\"\n  )\nprint(df1, n = Inf)\n\n# Capitals of each state\ndf2 &lt;- state_capitals |&gt; \n  janitor::clean_names() |&gt; \n  st_as_sf(coords = c(\"longitude\", \"latitude\")) |&gt; \n  rename(\n    State_Name = state,\n    geometry_capital = geometry\n  )\n\ndf2 &lt;- df2 |&gt; \n  mutate(\n    to_lon = sf::st_coordinates(df2)[,1],\n    to_lat = sf::st_coordinates(df2)[,2]\n  ) |&gt; \n  as_tibble() |&gt; \n  rename(state = State_Name) |&gt; \n  mutate(state = case_when(\n    state == \"Chhattishgarh\" ~ \"Chhattisgarh\",\n    state == \"Tamilnadu\" ~ \"Tamil Nadu\",\n    state == \"Telengana\" ~ \"Telangana\",\n    .default = state\n    ),\n    .keep = \"unused\"\n  )\n  \nprint(df2, n = Inf)\n\nplotdf &lt;- df2 |&gt;\n  left_join(df1) |&gt; \n  st_as_sf(crs = 4326) |&gt; \n  mutate(\n    distance = as.numeric(\n      st_distance(\n        geometry_capital, \n        geometry_centroid, by_element = TRUE) / 1000)\n  ) |&gt; \n  relocate(state)\n\nprint(plotdf, n = Inf)\n\ndistance_lines &lt;- geosphere::gcIntermediate(\n  p1 = plotdf |&gt; drop_na() |&gt; as_tibble() |&gt; \n       select(from_lon, from_lat),\n  p2 = plotdf |&gt; drop_na() |&gt; as_tibble() |&gt;\n       select(to_lon, to_lat),\n  n = 1000,\n  breakAtDateLine = TRUE,\n  addStartEnd = TRUE,\n  sp = TRUE) |&gt; \n  sf::st_as_sf(crs = 4326)\n\nratio_df &lt;- india_state_map |&gt; \n  mutate(area_state = as.numeric(st_area(geometry))) |&gt; \n  as_tibble() |&gt; \n  select(state, area_state) |&gt; \n  full_join(plotdf |&gt; as_tibble() |&gt; select(state, distance)) |&gt; \n  mutate(ratio = distance / sqrt(area_state))\n\n\nVisualization\n\n\nCode\ng_base &lt;- plotdf |&gt; \n  ggplot() +\n  geom_sf_text(\n    data = india_state_map,\n    mapping = aes(label = state),\n    colour = text_col,\n    alpha = 0.5,\n    family = \"body_font\",\n    size = bts / 8\n  ) +\n  geom_sf(\n    data = india_state_map,\n    fill = text_hil,\n    colour = text_hil,\n    alpha = 0.05, \n    linewidth = 0.5\n  ) +\n  geom_sf(\n    mapping = aes(\n      geometry = geometry_centroid\n    ),\n    colour = viz_cols[2],\n    pch = 8,\n    size = 6\n  ) +\n  geom_sf(\n    mapping = aes(\n      geometry = geometry_capital\n    ),\n    colour = viz_cols[3],\n    pch = 19,\n    size = 6,\n    alpha = 0.8\n  ) +\n  geom_sf(\n    data = distance_lines,\n    linetype = 3,\n    linewidth = 0.5,\n    colour = text_col\n  ) +\n  labs(\n    title = plot_title,\n    subtitle = plot_subtitle,\n    caption = plot_caption\n  ) +\n  ggthemes::theme_map(\n    base_family = \"body_font\",\n    base_size = bts\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      size = 2.9 * bts,\n      colour = text_hil,\n      margin = margin(10,0,0,0, \"mm\"),\n      family = \"title_font\"\n    ),\n    plot.subtitle = element_markdown(\n      colour = text_hil,\n      margin = margin(8,0,0,0, \"mm\"),\n      lineheight = 0.38,\n      size = 1.2 * bts\n    ),\n    plot.caption = element_textbox(\n      colour = text_hil,\n      family = \"caption_font\",\n      hjust = 0.5\n    )\n  )\n\ng2 &lt;- ratio_df |&gt; \n  drop_na() |&gt; \n  ggplot(\n    mapping = aes(\n      x = ratio, \n      y = reorder(state, ratio),\n      label = state,\n      colour = ratio\n    )\n  ) +\n  geom_point(\n    colour = viz_cols[3],\n    alpha = 0.8,\n    pch = 19,\n    size = 5\n  ) +\n  # geom_text(\n  #   check_overlap = TRUE,\n  #   hjust = \"outward\",\n  #   vjust = \"outward\",\n  #   nudge_x = 0.15,\n  #   family = \"body_font\",\n  #   size = bts / 5\n  # ) +\n  ggrepel::geom_text_repel(\n    nudge_x = 0.15,\n    family = \"body_font\",\n    size = bts / 5,\n    hjust = 0.5\n  ) +\n  scale_x_continuous(\n    trans = \"log2\",\n    expand = expansion(0)\n  ) +\n  scale_y_discrete(\n    expand = expansion(0)\n  ) +\n  viridis::scale_colour_viridis(\n    option = \"plasma\",\n    begin = 0, end = 0.75\n  ) +\n  labs(\n    title = \"Distance: State Capital to Geographic Centre\",\n    subtitle = \"(normalized by State Area)\\nDots further away from center indicates more distance.\"\n  ) +\n  coord_polar(theta = \"y\") +\n  theme_minimal(\n    base_family = \"body_font\",\n    base_size = bts / 1\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      colour = text_col, hjust = 0.5,\n      margin = margin(0,0,0,0, \"mm\"),\n      family = \"caption_font\"\n      ),\n    plot.subtitle = element_text(\n      colour = text_col, hjust = 0.5,\n      margin = margin(0,0,0,0, \"mm\"),\n      lineheight = 0.35\n      ),\n    plot.caption = element_text(\n      colour = text_col, hjust = 0.5,\n      margin = margin(0,0,0,0, \"mm\")\n      ),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    panel.grid = element_line(\n      linewidth = 0.5,\n      colour = darken(bg_col, 0.2),\n      linetype = 3\n    ),\n    plot.background = element_rect(\n      fill = \"transparent\",\n      colour = \"transparent\"\n    ),\n    panel.background = element_rect(\n      fill = \"transparent\",\n      colour = \"transparent\"\n    )\n  )\n\n\nAdd annotations and insets\n\n\nCode\n# QR Code for the plot\nurl_graphics &lt;- paste0(\n  \"https://aditya-dahiya.github.io/projects_presentations/projects/\",\n  # The file name of the current .qmd file\n  \"ind_state_centroid\",\n  \".qmd\"\n)\n# remotes::install_github('coolbutuseless/ggqr')\n# library(ggqr)\nplot_qr &lt;- ggplot(\n  data = NULL, \n  aes(x = 0, y = 0, label = url_graphics)\n  ) + \n  ggqr::geom_qr(\n    colour = text_hil, \n    fill = bg_col,\n    size = 2\n    ) +\n  # labs(caption = \"Scan for the Interactive Version\") +\n  coord_fixed() +\n  theme_void() +\n  labs(caption = \"Interactive Version\") +\n  theme(plot.background = element_rect(\n    fill = NA, \n    colour = NA\n    ),\n    plot.caption = element_text(\n      hjust = 0.5,\n      margin = margin(0,0,0,0, \"mm\"),\n      family = \"caption_font\",\n      size = bts/1.5,\n      colour = text_hil\n    )\n  )\n\ninset1 &lt;- ggplot() +\n  annotate(\n    geom = \"text\",\n    x = 0, y = 0,\n    label = data_source,\n    lineheight = 0.3,\n    family = \"caption_font\",\n    hjust = 1,\n    size = bts / 5,\n    colour = text_col\n  ) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(\n      fill = \"transparent\",\n      colour = \"transparent\"\n    ),\n    panel.background = element_rect(\n      fill = \"transparent\",\n      colour = \"transparent\"\n    )\n  )\n\nlibrary(patchwork)\ng &lt;- g_base +\n  inset_element(\n    p = g2,\n    left = 0.5, right = 1,\n    top = 0.95, bottom = 0.5,\n    align_to = \"full\"\n  ) +\n  inset_element(\n    p = plot_qr,\n    left = 0.05, right = 0.2,\n    top = 0.2, bottom = 0.0,\n    align_to = \"full\"\n  ) +\n  inset_element(\n    p = inset1,\n    left = 0.50, right = 1.3,\n    top = 0.4, bottom = 0.2,\n    align_to = \"full\"\n  ) +\n  plot_annotation(\n    theme = theme(\n      plot.background = element_rect(\n        fill = \"transparent\",\n        colour = \"transparent\"\n      ),\n      panel.background = element_rect(\n        fill = \"transparent\",\n        colour = \"transparent\"\n      )\n    )\n  )\n\n\nSave graphic and a thumbnail\n\n\nCode\nggsave(\n  filename = here::here(\"data_vizs\", \"a4_ind_state_centroid.png\"),\n  plot = g,\n  height = 297 * 2,\n  width = 210 * 2,\n  units = \"mm\",\n  bg = bg_col\n)\n\nlibrary(magick)\n# Saving a thumbnail for the webpage\nimage_read(here::here(\"data_vizs\", \n                      \"a4_ind_state_centroid.png\")) |&gt; \n  image_resize(geometry = \"400\") |&gt; \n  image_write(here::here(\"data_vizs\", \"thumbnails\", \n                         \"ind_state_centroid.png\"))\n\n\n\n\n\n\n\nReferences\n\nPebesma, Edzer, and Roger Bivand. 2023. “Spatial Data Science: With Applications in r.” https://doi.org/10.1201/9780429459016."
  }
]